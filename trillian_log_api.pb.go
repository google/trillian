// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trillian_log_api.proto

/*
Package trillian is a generated protocol buffer package.

It is generated from these files:
	trillian_log_api.proto
	trillian_map_api.proto
	trillian_admin_api.proto
	trillian.proto

It has these top-level messages:
	QueueLeafRequest
	QueueLeafResponse
	AddSequencedLeafRequest
	AddSequencedLeafResponse
	GetInclusionProofRequest
	GetInclusionProofResponse
	GetInclusionProofByHashRequest
	GetInclusionProofByHashResponse
	GetConsistencyProofRequest
	GetConsistencyProofResponse
	GetLatestSignedLogRootRequest
	GetLatestSignedLogRootResponse
	GetSequencedLeafCountRequest
	GetSequencedLeafCountResponse
	GetEntryAndProofRequest
	GetEntryAndProofResponse
	InitLogRequest
	InitLogResponse
	QueueLeavesRequest
	QueueLeavesResponse
	AddSequencedLeavesRequest
	AddSequencedLeavesResponse
	GetLeavesByIndexRequest
	GetLeavesByIndexResponse
	GetLeavesByRangeRequest
	GetLeavesByRangeResponse
	GetLeavesByHashRequest
	GetLeavesByHashResponse
	QueuedLogLeaf
	LogLeaf
	Proof
	MapLeaf
	MapLeafInclusion
	GetMapLeavesRequest
	GetMapLeavesByRevisionRequest
	GetMapLeavesResponse
	SetMapLeavesRequest
	SetMapLeavesResponse
	GetSignedMapRootRequest
	GetSignedMapRootByRevisionRequest
	GetSignedMapRootResponse
	InitMapRequest
	InitMapResponse
	ListTreesRequest
	ListTreesResponse
	GetTreeRequest
	CreateTreeRequest
	UpdateTreeRequest
	DeleteTreeRequest
	UndeleteTreeRequest
	Tree
	SignedEntryTimestamp
	SignedLogRoot
	SignedMapRoot
*/
package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueueLeafRequest struct {
	LogId int64    `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Leaf  *LogLeaf `protobuf:"bytes,2,opt,name=leaf" json:"leaf,omitempty"`
}

func (m *QueueLeafRequest) Reset()                    { *m = QueueLeafRequest{} }
func (m *QueueLeafRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueLeafRequest) ProtoMessage()               {}
func (*QueueLeafRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueueLeafRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *QueueLeafRequest) GetLeaf() *LogLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

type QueueLeafResponse struct {
	QueuedLeaf *QueuedLogLeaf `protobuf:"bytes,2,opt,name=queued_leaf,json=queuedLeaf" json:"queued_leaf,omitempty"`
}

func (m *QueueLeafResponse) Reset()                    { *m = QueueLeafResponse{} }
func (m *QueueLeafResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueLeafResponse) ProtoMessage()               {}
func (*QueueLeafResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueueLeafResponse) GetQueuedLeaf() *QueuedLogLeaf {
	if m != nil {
		return m.QueuedLeaf
	}
	return nil
}

type AddSequencedLeafRequest struct {
	LogId     int64    `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex int64    `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	Leaf      *LogLeaf `protobuf:"bytes,3,opt,name=leaf" json:"leaf,omitempty"`
}

func (m *AddSequencedLeafRequest) Reset()                    { *m = AddSequencedLeafRequest{} }
func (m *AddSequencedLeafRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSequencedLeafRequest) ProtoMessage()               {}
func (*AddSequencedLeafRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddSequencedLeafRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *AddSequencedLeafRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *AddSequencedLeafRequest) GetLeaf() *LogLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

type AddSequencedLeafResponse struct {
	SequencedLeaf *QueuedLogLeaf `protobuf:"bytes,3,opt,name=sequenced_leaf,json=sequencedLeaf" json:"sequenced_leaf,omitempty"`
}

func (m *AddSequencedLeafResponse) Reset()                    { *m = AddSequencedLeafResponse{} }
func (m *AddSequencedLeafResponse) String() string            { return proto.CompactTextString(m) }
func (*AddSequencedLeafResponse) ProtoMessage()               {}
func (*AddSequencedLeafResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddSequencedLeafResponse) GetSequencedLeaf() *QueuedLogLeaf {
	if m != nil {
		return m.SequencedLeaf
	}
	return nil
}

type GetInclusionProofRequest struct {
	LogId     int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex int64 `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	TreeSize  int64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *GetInclusionProofRequest) Reset()                    { *m = GetInclusionProofRequest{} }
func (m *GetInclusionProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofRequest) ProtoMessage()               {}
func (*GetInclusionProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetInclusionProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetInclusionProofRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *GetInclusionProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type GetInclusionProofResponse struct {
	Proof *Proof `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetInclusionProofResponse) Reset()                    { *m = GetInclusionProofResponse{} }
func (m *GetInclusionProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofResponse) ProtoMessage()               {}
func (*GetInclusionProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetInclusionProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetInclusionProofByHashRequest struct {
	LogId           int64  `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafHash        []byte `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	TreeSize        int64  `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	OrderBySequence bool   `protobuf:"varint,4,opt,name=order_by_sequence,json=orderBySequence" json:"order_by_sequence,omitempty"`
}

func (m *GetInclusionProofByHashRequest) Reset()                    { *m = GetInclusionProofByHashRequest{} }
func (m *GetInclusionProofByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofByHashRequest) ProtoMessage()               {}
func (*GetInclusionProofByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetInclusionProofByHashRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetInclusionProofByHashRequest) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *GetInclusionProofByHashRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *GetInclusionProofByHashRequest) GetOrderBySequence() bool {
	if m != nil {
		return m.OrderBySequence
	}
	return false
}

type GetInclusionProofByHashResponse struct {
	// Logs can potentially contain leaves with duplicate hashes so it's possible
	// for this to return multiple proofs.
	// TODO(gbelvin) only return one proof.
	Proof []*Proof `protobuf:"bytes,2,rep,name=proof" json:"proof,omitempty"`
}

func (m *GetInclusionProofByHashResponse) Reset()                    { *m = GetInclusionProofByHashResponse{} }
func (m *GetInclusionProofByHashResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofByHashResponse) ProtoMessage()               {}
func (*GetInclusionProofByHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetInclusionProofByHashResponse) GetProof() []*Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetConsistencyProofRequest struct {
	LogId          int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	FirstTreeSize  int64 `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
	SecondTreeSize int64 `protobuf:"varint,3,opt,name=second_tree_size,json=secondTreeSize" json:"second_tree_size,omitempty"`
}

func (m *GetConsistencyProofRequest) Reset()                    { *m = GetConsistencyProofRequest{} }
func (m *GetConsistencyProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofRequest) ProtoMessage()               {}
func (*GetConsistencyProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetConsistencyProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetConsistencyProofRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

func (m *GetConsistencyProofRequest) GetSecondTreeSize() int64 {
	if m != nil {
		return m.SecondTreeSize
	}
	return 0
}

type GetConsistencyProofResponse struct {
	Proof *Proof `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetConsistencyProofResponse) Reset()                    { *m = GetConsistencyProofResponse{} }
func (m *GetConsistencyProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofResponse) ProtoMessage()               {}
func (*GetConsistencyProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetConsistencyProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetLatestSignedLogRootRequest struct {
	LogId int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *GetLatestSignedLogRootRequest) Reset()                    { *m = GetLatestSignedLogRootRequest{} }
func (m *GetLatestSignedLogRootRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSignedLogRootRequest) ProtoMessage()               {}
func (*GetLatestSignedLogRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetLatestSignedLogRootRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

type GetLatestSignedLogRootResponse struct {
	SignedLogRoot *SignedLogRoot `protobuf:"bytes,2,opt,name=signed_log_root,json=signedLogRoot" json:"signed_log_root,omitempty"`
}

func (m *GetLatestSignedLogRootResponse) Reset()                    { *m = GetLatestSignedLogRootResponse{} }
func (m *GetLatestSignedLogRootResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSignedLogRootResponse) ProtoMessage()               {}
func (*GetLatestSignedLogRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetLatestSignedLogRootResponse) GetSignedLogRoot() *SignedLogRoot {
	if m != nil {
		return m.SignedLogRoot
	}
	return nil
}

type GetSequencedLeafCountRequest struct {
	LogId int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *GetSequencedLeafCountRequest) Reset()                    { *m = GetSequencedLeafCountRequest{} }
func (m *GetSequencedLeafCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSequencedLeafCountRequest) ProtoMessage()               {}
func (*GetSequencedLeafCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetSequencedLeafCountRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

type GetSequencedLeafCountResponse struct {
	LeafCount int64 `protobuf:"varint,2,opt,name=leaf_count,json=leafCount" json:"leaf_count,omitempty"`
}

func (m *GetSequencedLeafCountResponse) Reset()                    { *m = GetSequencedLeafCountResponse{} }
func (m *GetSequencedLeafCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSequencedLeafCountResponse) ProtoMessage()               {}
func (*GetSequencedLeafCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSequencedLeafCountResponse) GetLeafCount() int64 {
	if m != nil {
		return m.LeafCount
	}
	return 0
}

type GetEntryAndProofRequest struct {
	LogId     int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex int64 `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	TreeSize  int64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *GetEntryAndProofRequest) Reset()                    { *m = GetEntryAndProofRequest{} }
func (m *GetEntryAndProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryAndProofRequest) ProtoMessage()               {}
func (*GetEntryAndProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetEntryAndProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetEntryAndProofRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *GetEntryAndProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type GetEntryAndProofResponse struct {
	Proof *Proof   `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
	Leaf  *LogLeaf `protobuf:"bytes,3,opt,name=leaf" json:"leaf,omitempty"`
}

func (m *GetEntryAndProofResponse) Reset()                    { *m = GetEntryAndProofResponse{} }
func (m *GetEntryAndProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryAndProofResponse) ProtoMessage()               {}
func (*GetEntryAndProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetEntryAndProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *GetEntryAndProofResponse) GetLeaf() *LogLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

type InitLogRequest struct {
	LogId int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *InitLogRequest) Reset()                    { *m = InitLogRequest{} }
func (m *InitLogRequest) String() string            { return proto.CompactTextString(m) }
func (*InitLogRequest) ProtoMessage()               {}
func (*InitLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *InitLogRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

type InitLogResponse struct {
	Created *SignedLogRoot `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
}

func (m *InitLogResponse) Reset()                    { *m = InitLogResponse{} }
func (m *InitLogResponse) String() string            { return proto.CompactTextString(m) }
func (*InitLogResponse) ProtoMessage()               {}
func (*InitLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *InitLogResponse) GetCreated() *SignedLogRoot {
	if m != nil {
		return m.Created
	}
	return nil
}

type QueueLeavesRequest struct {
	LogId  int64      `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Leaves []*LogLeaf `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *QueueLeavesRequest) Reset()                    { *m = QueueLeavesRequest{} }
func (m *QueueLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueLeavesRequest) ProtoMessage()               {}
func (*QueueLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *QueueLeavesRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *QueueLeavesRequest) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type QueueLeavesResponse struct {
	// Same number and order as in the corresponding request.
	QueuedLeaves []*QueuedLogLeaf `protobuf:"bytes,2,rep,name=queued_leaves,json=queuedLeaves" json:"queued_leaves,omitempty"`
}

func (m *QueueLeavesResponse) Reset()                    { *m = QueueLeavesResponse{} }
func (m *QueueLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueLeavesResponse) ProtoMessage()               {}
func (*QueueLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *QueueLeavesResponse) GetQueuedLeaves() []*QueuedLogLeaf {
	if m != nil {
		return m.QueuedLeaves
	}
	return nil
}

type AddSequencedLeavesRequest struct {
	LogId          int64      `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	StartLeafIndex int64      `protobuf:"varint,2,opt,name=start_leaf_index,json=startLeafIndex" json:"start_leaf_index,omitempty"`
	Leaves         []*LogLeaf `protobuf:"bytes,3,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *AddSequencedLeavesRequest) Reset()                    { *m = AddSequencedLeavesRequest{} }
func (m *AddSequencedLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSequencedLeavesRequest) ProtoMessage()               {}
func (*AddSequencedLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddSequencedLeavesRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *AddSequencedLeavesRequest) GetStartLeafIndex() int64 {
	if m != nil {
		return m.StartLeafIndex
	}
	return 0
}

func (m *AddSequencedLeavesRequest) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type AddSequencedLeavesResponse struct {
	// Same number and order as in the corresponding request.
	SequencedLeaves []*QueuedLogLeaf `protobuf:"bytes,3,rep,name=sequenced_leaves,json=sequencedLeaves" json:"sequenced_leaves,omitempty"`
}

func (m *AddSequencedLeavesResponse) Reset()                    { *m = AddSequencedLeavesResponse{} }
func (m *AddSequencedLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddSequencedLeavesResponse) ProtoMessage()               {}
func (*AddSequencedLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AddSequencedLeavesResponse) GetSequencedLeaves() []*QueuedLogLeaf {
	if m != nil {
		return m.SequencedLeaves
	}
	return nil
}

type GetLeavesByIndexRequest struct {
	LogId     int64   `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex []int64 `protobuf:"varint,2,rep,packed,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
}

func (m *GetLeavesByIndexRequest) Reset()                    { *m = GetLeavesByIndexRequest{} }
func (m *GetLeavesByIndexRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByIndexRequest) ProtoMessage()               {}
func (*GetLeavesByIndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetLeavesByIndexRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetLeavesByIndexRequest) GetLeafIndex() []int64 {
	if m != nil {
		return m.LeafIndex
	}
	return nil
}

type GetLeavesByIndexResponse struct {
	// TODO(gbelvin) reply with error codes. Reuse QueuedLogLeaf?
	Leaves []*LogLeaf `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *GetLeavesByIndexResponse) Reset()                    { *m = GetLeavesByIndexResponse{} }
func (m *GetLeavesByIndexResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByIndexResponse) ProtoMessage()               {}
func (*GetLeavesByIndexResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetLeavesByIndexResponse) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type GetLeavesByRangeRequest struct {
	LogId      int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	StartIndex int64 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	Count      int64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *GetLeavesByRangeRequest) Reset()                    { *m = GetLeavesByRangeRequest{} }
func (m *GetLeavesByRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByRangeRequest) ProtoMessage()               {}
func (*GetLeavesByRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetLeavesByRangeRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetLeavesByRangeRequest) GetStartIndex() int64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *GetLeavesByRangeRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetLeavesByRangeResponse struct {
	// Returned log leaves starting from the `start_index` of the request, in
	// order. There may be fewer than `request.count` leaves returned, if the
	// requested range extended beyond the size of the tree or if the server opted
	// to return fewer leaves than requested.
	Leaves []*LogLeaf `protobuf:"bytes,1,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *GetLeavesByRangeResponse) Reset()                    { *m = GetLeavesByRangeResponse{} }
func (m *GetLeavesByRangeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByRangeResponse) ProtoMessage()               {}
func (*GetLeavesByRangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetLeavesByRangeResponse) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type GetLeavesByHashRequest struct {
	LogId           int64    `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafHash        [][]byte `protobuf:"bytes,2,rep,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	OrderBySequence bool     `protobuf:"varint,3,opt,name=order_by_sequence,json=orderBySequence" json:"order_by_sequence,omitempty"`
}

func (m *GetLeavesByHashRequest) Reset()                    { *m = GetLeavesByHashRequest{} }
func (m *GetLeavesByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByHashRequest) ProtoMessage()               {}
func (*GetLeavesByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetLeavesByHashRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetLeavesByHashRequest) GetLeafHash() [][]byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *GetLeavesByHashRequest) GetOrderBySequence() bool {
	if m != nil {
		return m.OrderBySequence
	}
	return false
}

type GetLeavesByHashResponse struct {
	// TODO(gbelvin) reply with error codes. Reuse QueuedLogLeaf?
	Leaves []*LogLeaf `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *GetLeavesByHashResponse) Reset()                    { *m = GetLeavesByHashResponse{} }
func (m *GetLeavesByHashResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByHashResponse) ProtoMessage()               {}
func (*GetLeavesByHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetLeavesByHashResponse) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// A result of submitting an entry to the log. Output only.
//
// TODO(pavelkalinnikov): Consider renaming it to AddLogLeafResult or the like.
// It can be reused by AddSequencedLeaves API.
type QueuedLogLeaf struct {
	// The leaf as it was stored by Trillian. Empty unless `status.code` is:
	//  - `google.rpc.OK`: the `leaf` data is the same as in the request.
	//  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
	//    `leaf` is the conflicting one already in the log.
	Leaf *LogLeaf `protobuf:"bytes,1,opt,name=leaf" json:"leaf,omitempty"`
	// The status of adding the leaf.
	//  - `google.rpc.OK`: successfully added.
	//  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
	//    existing one. Either `leaf_identity_hash` is the same in the `LOG`
	//    mode, or `leaf_index` in the `PREORDERED_LOG`.
	//  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
	//    present in the log, e.g., same `leaf_index` but different `leaf_data`.
	Status *google_rpc.Status `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *QueuedLogLeaf) Reset()                    { *m = QueuedLogLeaf{} }
func (m *QueuedLogLeaf) String() string            { return proto.CompactTextString(m) }
func (*QueuedLogLeaf) ProtoMessage()               {}
func (*QueuedLogLeaf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *QueuedLogLeaf) GetLeaf() *LogLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *QueuedLogLeaf) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// A leaf of the log's Merkle tree, corresponds to a single log entry. Each leaf
// has a unique `leaf_index` in the scope of this tree.
type LogLeaf struct {
	// Output only. The hash over `leaf_data`.
	MerkleLeafHash []byte `protobuf:"bytes,1,opt,name=merkle_leaf_hash,json=merkleLeafHash,proto3" json:"merkle_leaf_hash,omitempty"`
	// Required. The arbitrary data associated with this log entry. Validity of
	// this field is governed by the call site (personality).
	LeafValue []byte `protobuf:"bytes,2,opt,name=leaf_value,json=leafValue,proto3" json:"leaf_value,omitempty"`
	// The arbitrary metadata, e.g., a timestamp.
	ExtraData []byte `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// Output only. The index of the leaf in the Merkle tree, i.e., the position
	// of the corresponding entry in the log. This value will be set by the
	// LogSigner in a way depending on the log type (normal or pre-ordered).
	LeafIndex int64 `protobuf:"varint,4,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	// The hash over the identity of this leaf. If empty, assumed to be the same
	// as `merkle_leaf_hash`. It is a mechanism for the personality to provide a
	// hint to Trillian that two leaves should be considered "duplicates" even
	// though their `leaf_value`s differ.
	//
	// E.g., in a CT personality multiple `add-chain` calls for an identical
	// certificate would produce differing `leaf_data` bytes (due to the
	// presence of SCT elements), with just this information Trillian would be
	// unable to determine that. Within the context of the CT personality, these
	// entries are dupes, so it sets `leaf_identity_hash` to `H(cert)`, which
	// allows Trillian to detect the duplicates.
	//
	// Continuing the CT example, for a CT mirror personality (which must allow
	// dupes since the source log could contain them), the part of the
	// personality which fetches and submits the entries might set
	// `leaf_identity_hash` to `H(leaf_index||cert)`.
	// TODO(pavelkalinnikov): Consider instead using `H(cert)` and allowing
	// identity hash dupes in `PREORDERED_LOG` mode, for it can later be
	// upgraded to `LOG` which will need to correctly detect duplicates with
	// older entries when new ones get queued.
	LeafIdentityHash []byte `protobuf:"bytes,5,opt,name=leaf_identity_hash,json=leafIdentityHash,proto3" json:"leaf_identity_hash,omitempty"`
	// Output only. The time at which this leaf was passed to `QueueLeaves`.
	// This value will be determined and set by the LogServer. Equals zero if
	// the entry was submitted without queuing.
	QueueTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=queue_timestamp,json=queueTimestamp" json:"queue_timestamp,omitempty"`
	// Output only. The time at which this leaf was integrated into the tree.
	// This value will be determined and set by the LogSigner.
	IntegrateTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=integrate_timestamp,json=integrateTimestamp" json:"integrate_timestamp,omitempty"`
}

func (m *LogLeaf) Reset()                    { *m = LogLeaf{} }
func (m *LogLeaf) String() string            { return proto.CompactTextString(m) }
func (*LogLeaf) ProtoMessage()               {}
func (*LogLeaf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *LogLeaf) GetMerkleLeafHash() []byte {
	if m != nil {
		return m.MerkleLeafHash
	}
	return nil
}

func (m *LogLeaf) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *LogLeaf) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *LogLeaf) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *LogLeaf) GetLeafIdentityHash() []byte {
	if m != nil {
		return m.LeafIdentityHash
	}
	return nil
}

func (m *LogLeaf) GetQueueTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.QueueTimestamp
	}
	return nil
}

func (m *LogLeaf) GetIntegrateTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.IntegrateTimestamp
	}
	return nil
}

// A consistency or inclusion proof for a Merkle tree. Output only.
type Proof struct {
	LeafIndex int64    `protobuf:"varint,1,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	Hashes    [][]byte `protobuf:"bytes,3,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *Proof) Reset()                    { *m = Proof{} }
func (m *Proof) String() string            { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()               {}
func (*Proof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Proof) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *Proof) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueLeafRequest)(nil), "trillian.QueueLeafRequest")
	proto.RegisterType((*QueueLeafResponse)(nil), "trillian.QueueLeafResponse")
	proto.RegisterType((*AddSequencedLeafRequest)(nil), "trillian.AddSequencedLeafRequest")
	proto.RegisterType((*AddSequencedLeafResponse)(nil), "trillian.AddSequencedLeafResponse")
	proto.RegisterType((*GetInclusionProofRequest)(nil), "trillian.GetInclusionProofRequest")
	proto.RegisterType((*GetInclusionProofResponse)(nil), "trillian.GetInclusionProofResponse")
	proto.RegisterType((*GetInclusionProofByHashRequest)(nil), "trillian.GetInclusionProofByHashRequest")
	proto.RegisterType((*GetInclusionProofByHashResponse)(nil), "trillian.GetInclusionProofByHashResponse")
	proto.RegisterType((*GetConsistencyProofRequest)(nil), "trillian.GetConsistencyProofRequest")
	proto.RegisterType((*GetConsistencyProofResponse)(nil), "trillian.GetConsistencyProofResponse")
	proto.RegisterType((*GetLatestSignedLogRootRequest)(nil), "trillian.GetLatestSignedLogRootRequest")
	proto.RegisterType((*GetLatestSignedLogRootResponse)(nil), "trillian.GetLatestSignedLogRootResponse")
	proto.RegisterType((*GetSequencedLeafCountRequest)(nil), "trillian.GetSequencedLeafCountRequest")
	proto.RegisterType((*GetSequencedLeafCountResponse)(nil), "trillian.GetSequencedLeafCountResponse")
	proto.RegisterType((*GetEntryAndProofRequest)(nil), "trillian.GetEntryAndProofRequest")
	proto.RegisterType((*GetEntryAndProofResponse)(nil), "trillian.GetEntryAndProofResponse")
	proto.RegisterType((*InitLogRequest)(nil), "trillian.InitLogRequest")
	proto.RegisterType((*InitLogResponse)(nil), "trillian.InitLogResponse")
	proto.RegisterType((*QueueLeavesRequest)(nil), "trillian.QueueLeavesRequest")
	proto.RegisterType((*QueueLeavesResponse)(nil), "trillian.QueueLeavesResponse")
	proto.RegisterType((*AddSequencedLeavesRequest)(nil), "trillian.AddSequencedLeavesRequest")
	proto.RegisterType((*AddSequencedLeavesResponse)(nil), "trillian.AddSequencedLeavesResponse")
	proto.RegisterType((*GetLeavesByIndexRequest)(nil), "trillian.GetLeavesByIndexRequest")
	proto.RegisterType((*GetLeavesByIndexResponse)(nil), "trillian.GetLeavesByIndexResponse")
	proto.RegisterType((*GetLeavesByRangeRequest)(nil), "trillian.GetLeavesByRangeRequest")
	proto.RegisterType((*GetLeavesByRangeResponse)(nil), "trillian.GetLeavesByRangeResponse")
	proto.RegisterType((*GetLeavesByHashRequest)(nil), "trillian.GetLeavesByHashRequest")
	proto.RegisterType((*GetLeavesByHashResponse)(nil), "trillian.GetLeavesByHashResponse")
	proto.RegisterType((*QueuedLogLeaf)(nil), "trillian.QueuedLogLeaf")
	proto.RegisterType((*LogLeaf)(nil), "trillian.LogLeaf")
	proto.RegisterType((*Proof)(nil), "trillian.Proof")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrillianLog service

type TrillianLogClient interface {
	// Adds a single leaf to the queue.
	QueueLeaf(ctx context.Context, in *QueueLeafRequest, opts ...grpc.CallOption) (*QueueLeafResponse, error)
	// Adds a single leaf with assigned sequence number to the tree's storage,
	// to be integrated later to the tree.
	AddSequencedLeaf(ctx context.Context, in *AddSequencedLeafRequest, opts ...grpc.CallOption) (*AddSequencedLeafResponse, error)
	// Returns inclusion proof for a leaf with a given index in a given tree.
	GetInclusionProof(ctx context.Context, in *GetInclusionProofRequest, opts ...grpc.CallOption) (*GetInclusionProofResponse, error)
	// Returns inclusion proof for a leaf with a given identity hash in a given
	// tree.
	GetInclusionProofByHash(ctx context.Context, in *GetInclusionProofByHashRequest, opts ...grpc.CallOption) (*GetInclusionProofByHashResponse, error)
	// Returns consistency proof between two versions of a given tree.
	GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error)
	// Returns the latest signed log root for a given tree. Corresponds to the
	// ReadOnlyLogTreeTX.LatestSignedLogRoot storage interface.
	GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error)
	// Returns the total number of leaves that have been integrated into the
	// given tree. Corresponds to the ReadOnlyLogTreeTX.GetSequencedLeafCount
	// storage interface.
	GetSequencedLeafCount(ctx context.Context, in *GetSequencedLeafCountRequest, opts ...grpc.CallOption) (*GetSequencedLeafCountResponse, error)
	// Returns log entry and the corresponding inclusion proof for a given leaf
	// index in a given tree.
	GetEntryAndProof(ctx context.Context, in *GetEntryAndProofRequest, opts ...grpc.CallOption) (*GetEntryAndProofResponse, error)
	InitLog(ctx context.Context, in *InitLogRequest, opts ...grpc.CallOption) (*InitLogResponse, error)
	// Adds a batch of leaves to the queue.
	QueueLeaves(ctx context.Context, in *QueueLeavesRequest, opts ...grpc.CallOption) (*QueueLeavesResponse, error)
	// Adds a batch of leaves with assigned sequence numbers to the tree.
	AddSequencedLeaves(ctx context.Context, in *AddSequencedLeavesRequest, opts ...grpc.CallOption) (*AddSequencedLeavesResponse, error)
	// Returns a batch of leaves located in the provided positions.
	GetLeavesByIndex(ctx context.Context, in *GetLeavesByIndexRequest, opts ...grpc.CallOption) (*GetLeavesByIndexResponse, error)
	// Returns a batch of leaves in a sequential range.
	GetLeavesByRange(ctx context.Context, in *GetLeavesByRangeRequest, opts ...grpc.CallOption) (*GetLeavesByRangeResponse, error)
	// Returns a batch of leaves by their `merkle_leaf_hash` values.
	GetLeavesByHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error)
}

type trillianLogClient struct {
	cc *grpc.ClientConn
}

func NewTrillianLogClient(cc *grpc.ClientConn) TrillianLogClient {
	return &trillianLogClient{cc}
}

func (c *trillianLogClient) QueueLeaf(ctx context.Context, in *QueueLeafRequest, opts ...grpc.CallOption) (*QueueLeafResponse, error) {
	out := new(QueueLeafResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/QueueLeaf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) AddSequencedLeaf(ctx context.Context, in *AddSequencedLeafRequest, opts ...grpc.CallOption) (*AddSequencedLeafResponse, error) {
	out := new(AddSequencedLeafResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/AddSequencedLeaf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetInclusionProof(ctx context.Context, in *GetInclusionProofRequest, opts ...grpc.CallOption) (*GetInclusionProofResponse, error) {
	out := new(GetInclusionProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetInclusionProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetInclusionProofByHash(ctx context.Context, in *GetInclusionProofByHashRequest, opts ...grpc.CallOption) (*GetInclusionProofByHashResponse, error) {
	out := new(GetInclusionProofByHashResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetInclusionProofByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error) {
	out := new(GetConsistencyProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetConsistencyProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error) {
	out := new(GetLatestSignedLogRootResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLatestSignedLogRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetSequencedLeafCount(ctx context.Context, in *GetSequencedLeafCountRequest, opts ...grpc.CallOption) (*GetSequencedLeafCountResponse, error) {
	out := new(GetSequencedLeafCountResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetSequencedLeafCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetEntryAndProof(ctx context.Context, in *GetEntryAndProofRequest, opts ...grpc.CallOption) (*GetEntryAndProofResponse, error) {
	out := new(GetEntryAndProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetEntryAndProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) InitLog(ctx context.Context, in *InitLogRequest, opts ...grpc.CallOption) (*InitLogResponse, error) {
	out := new(InitLogResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/InitLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) QueueLeaves(ctx context.Context, in *QueueLeavesRequest, opts ...grpc.CallOption) (*QueueLeavesResponse, error) {
	out := new(QueueLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/QueueLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) AddSequencedLeaves(ctx context.Context, in *AddSequencedLeavesRequest, opts ...grpc.CallOption) (*AddSequencedLeavesResponse, error) {
	out := new(AddSequencedLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/AddSequencedLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByIndex(ctx context.Context, in *GetLeavesByIndexRequest, opts ...grpc.CallOption) (*GetLeavesByIndexResponse, error) {
	out := new(GetLeavesByIndexResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByRange(ctx context.Context, in *GetLeavesByRangeRequest, opts ...grpc.CallOption) (*GetLeavesByRangeResponse, error) {
	out := new(GetLeavesByRangeResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error) {
	out := new(GetLeavesByHashResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrillianLog service

type TrillianLogServer interface {
	// Adds a single leaf to the queue.
	QueueLeaf(context.Context, *QueueLeafRequest) (*QueueLeafResponse, error)
	// Adds a single leaf with assigned sequence number to the tree's storage,
	// to be integrated later to the tree.
	AddSequencedLeaf(context.Context, *AddSequencedLeafRequest) (*AddSequencedLeafResponse, error)
	// Returns inclusion proof for a leaf with a given index in a given tree.
	GetInclusionProof(context.Context, *GetInclusionProofRequest) (*GetInclusionProofResponse, error)
	// Returns inclusion proof for a leaf with a given identity hash in a given
	// tree.
	GetInclusionProofByHash(context.Context, *GetInclusionProofByHashRequest) (*GetInclusionProofByHashResponse, error)
	// Returns consistency proof between two versions of a given tree.
	GetConsistencyProof(context.Context, *GetConsistencyProofRequest) (*GetConsistencyProofResponse, error)
	// Returns the latest signed log root for a given tree. Corresponds to the
	// ReadOnlyLogTreeTX.LatestSignedLogRoot storage interface.
	GetLatestSignedLogRoot(context.Context, *GetLatestSignedLogRootRequest) (*GetLatestSignedLogRootResponse, error)
	// Returns the total number of leaves that have been integrated into the
	// given tree. Corresponds to the ReadOnlyLogTreeTX.GetSequencedLeafCount
	// storage interface.
	GetSequencedLeafCount(context.Context, *GetSequencedLeafCountRequest) (*GetSequencedLeafCountResponse, error)
	// Returns log entry and the corresponding inclusion proof for a given leaf
	// index in a given tree.
	GetEntryAndProof(context.Context, *GetEntryAndProofRequest) (*GetEntryAndProofResponse, error)
	InitLog(context.Context, *InitLogRequest) (*InitLogResponse, error)
	// Adds a batch of leaves to the queue.
	QueueLeaves(context.Context, *QueueLeavesRequest) (*QueueLeavesResponse, error)
	// Adds a batch of leaves with assigned sequence numbers to the tree.
	AddSequencedLeaves(context.Context, *AddSequencedLeavesRequest) (*AddSequencedLeavesResponse, error)
	// Returns a batch of leaves located in the provided positions.
	GetLeavesByIndex(context.Context, *GetLeavesByIndexRequest) (*GetLeavesByIndexResponse, error)
	// Returns a batch of leaves in a sequential range.
	GetLeavesByRange(context.Context, *GetLeavesByRangeRequest) (*GetLeavesByRangeResponse, error)
	// Returns a batch of leaves by their `merkle_leaf_hash` values.
	GetLeavesByHash(context.Context, *GetLeavesByHashRequest) (*GetLeavesByHashResponse, error)
}

func RegisterTrillianLogServer(s *grpc.Server, srv TrillianLogServer) {
	s.RegisterService(&_TrillianLog_serviceDesc, srv)
}

func _TrillianLog_QueueLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).QueueLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/QueueLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).QueueLeaf(ctx, req.(*QueueLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_AddSequencedLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSequencedLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).AddSequencedLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/AddSequencedLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).AddSequencedLeaf(ctx, req.(*AddSequencedLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetInclusionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInclusionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetInclusionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetInclusionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetInclusionProof(ctx, req.(*GetInclusionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetInclusionProofByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInclusionProofByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetInclusionProofByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetInclusionProofByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetInclusionProofByHash(ctx, req.(*GetInclusionProofByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetConsistencyProof(ctx, req.(*GetConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLatestSignedLogRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSignedLogRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLatestSignedLogRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLatestSignedLogRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLatestSignedLogRoot(ctx, req.(*GetLatestSignedLogRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetSequencedLeafCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSequencedLeafCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetSequencedLeafCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetSequencedLeafCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetSequencedLeafCount(ctx, req.(*GetSequencedLeafCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetEntryAndProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryAndProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetEntryAndProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetEntryAndProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetEntryAndProof(ctx, req.(*GetEntryAndProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_InitLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).InitLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/InitLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).InitLog(ctx, req.(*InitLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_QueueLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).QueueLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/QueueLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).QueueLeaves(ctx, req.(*QueueLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_AddSequencedLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSequencedLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).AddSequencedLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/AddSequencedLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).AddSequencedLeaves(ctx, req.(*AddSequencedLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByIndex(ctx, req.(*GetLeavesByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByRange(ctx, req.(*GetLeavesByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByHash(ctx, req.(*GetLeavesByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianLog",
	HandlerType: (*TrillianLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueLeaf",
			Handler:    _TrillianLog_QueueLeaf_Handler,
		},
		{
			MethodName: "AddSequencedLeaf",
			Handler:    _TrillianLog_AddSequencedLeaf_Handler,
		},
		{
			MethodName: "GetInclusionProof",
			Handler:    _TrillianLog_GetInclusionProof_Handler,
		},
		{
			MethodName: "GetInclusionProofByHash",
			Handler:    _TrillianLog_GetInclusionProofByHash_Handler,
		},
		{
			MethodName: "GetConsistencyProof",
			Handler:    _TrillianLog_GetConsistencyProof_Handler,
		},
		{
			MethodName: "GetLatestSignedLogRoot",
			Handler:    _TrillianLog_GetLatestSignedLogRoot_Handler,
		},
		{
			MethodName: "GetSequencedLeafCount",
			Handler:    _TrillianLog_GetSequencedLeafCount_Handler,
		},
		{
			MethodName: "GetEntryAndProof",
			Handler:    _TrillianLog_GetEntryAndProof_Handler,
		},
		{
			MethodName: "InitLog",
			Handler:    _TrillianLog_InitLog_Handler,
		},
		{
			MethodName: "QueueLeaves",
			Handler:    _TrillianLog_QueueLeaves_Handler,
		},
		{
			MethodName: "AddSequencedLeaves",
			Handler:    _TrillianLog_AddSequencedLeaves_Handler,
		},
		{
			MethodName: "GetLeavesByIndex",
			Handler:    _TrillianLog_GetLeavesByIndex_Handler,
		},
		{
			MethodName: "GetLeavesByRange",
			Handler:    _TrillianLog_GetLeavesByRange_Handler,
		},
		{
			MethodName: "GetLeavesByHash",
			Handler:    _TrillianLog_GetLeavesByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_log_api.proto",
}

func init() { proto.RegisterFile("trillian_log_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdf, 0x6f, 0x1b, 0xc5,
	0x13, 0xef, 0xc5, 0xf9, 0x39, 0x49, 0x6c, 0x67, 0xf3, 0x6d, 0xe3, 0x5c, 0x9a, 0x6f, 0xd3, 0x4d,
	0xd3, 0xba, 0xa1, 0xd8, 0xa4, 0xa8, 0x80, 0xa2, 0xaa, 0xa8, 0x6e, 0xaa, 0x34, 0x60, 0x20, 0x38,
	0x55, 0x85, 0xca, 0xc3, 0xb1, 0xb6, 0x37, 0xce, 0x89, 0xf3, 0xad, 0x7b, 0xb7, 0x8e, 0xea, 0x56,
	0x7d, 0x41, 0x42, 0x3c, 0x21, 0x21, 0xc1, 0x03, 0x2f, 0x08, 0xde, 0xf8, 0x77, 0x90, 0xf8, 0x17,
	0x78, 0xe3, 0x9f, 0x40, 0xb7, 0xbb, 0xe7, 0xfb, 0xe1, 0xbb, 0x73, 0x2c, 0xc4, 0x9b, 0x6f, 0x76,
	0x76, 0xe6, 0x33, 0x33, 0x3b, 0x33, 0x1f, 0x19, 0xae, 0x70, 0xc7, 0xb4, 0x2c, 0x93, 0xd8, 0x86,
	0xc5, 0x3a, 0x06, 0xe9, 0x99, 0x95, 0x9e, 0xc3, 0x38, 0x43, 0xf3, 0xbe, 0x5c, 0xbf, 0xda, 0x61,
	0xac, 0x63, 0xd1, 0x2a, 0xe9, 0x99, 0x55, 0x62, 0xdb, 0x8c, 0x13, 0x6e, 0x32, 0xdb, 0x95, 0x7a,
	0xfa, 0x35, 0x75, 0x2a, 0xbe, 0x9a, 0xfd, 0xd3, 0x2a, 0x37, 0xbb, 0xd4, 0xe5, 0xa4, 0xdb, 0x53,
	0x0a, 0x6b, 0x4a, 0xc1, 0xe9, 0xb5, 0xaa, 0x2e, 0x27, 0xbc, 0xef, 0xdf, 0xcc, 0xfb, 0x1e, 0xe4,
	0x37, 0x3e, 0x86, 0xe2, 0xe7, 0x7d, 0xda, 0xa7, 0x75, 0x4a, 0x4e, 0x1b, 0xf4, 0x45, 0x9f, 0xba,
	0x1c, 0x5d, 0x86, 0x59, 0x0f, 0x96, 0xd9, 0x2e, 0x69, 0x5b, 0x5a, 0x39, 0xd7, 0x98, 0xb1, 0x58,
	0xe7, 0xa8, 0x8d, 0x76, 0x60, 0xda, 0xa2, 0xe4, 0xb4, 0x34, 0xb5, 0xa5, 0x95, 0x17, 0xef, 0xae,
	0x54, 0x86, 0x96, 0xea, 0xac, 0x23, 0xae, 0x8b, 0x63, 0xfc, 0x09, 0xac, 0x84, 0x2c, 0xba, 0x3d,
	0x66, 0xbb, 0x14, 0x7d, 0x00, 0x8b, 0x2f, 0x3c, 0x61, 0xdb, 0x08, 0x99, 0x58, 0x0b, 0x4c, 0x88,
	0x1b, 0x6d, 0xdf, 0x10, 0x48, 0x5d, 0xef, 0x37, 0x3e, 0x87, 0xb5, 0x87, 0xed, 0xf6, 0x89, 0x07,
	0xcd, 0x6e, 0x49, 0xd9, 0x18, 0x9c, 0x9b, 0x00, 0x9e, 0x13, 0xc3, 0xb4, 0xdb, 0xf4, 0xa5, 0x70,
	0x95, 0x6b, 0x2c, 0x78, 0x92, 0x23, 0x4f, 0x30, 0x0c, 0x23, 0x97, 0x1d, 0xc6, 0x73, 0x28, 0x8d,
	0xfa, 0x55, 0xd1, 0x3c, 0x80, 0xbc, 0xeb, 0x1f, 0x18, 0x21, 0x63, 0xa9, 0x01, 0x2d, 0xbb, 0x61,
	0x3b, 0xb8, 0x0b, 0xa5, 0x43, 0xca, 0x8f, 0xec, 0x96, 0xd5, 0x77, 0x4d, 0x66, 0x1f, 0x3b, 0x8c,
	0xfd, 0xcb, 0xa0, 0x36, 0x60, 0x81, 0x3b, 0x94, 0x1a, 0xae, 0xf9, 0x8a, 0x0a, 0x30, 0xb9, 0xc6,
	0xbc, 0x27, 0x38, 0x31, 0x5f, 0x51, 0x5c, 0x83, 0xf5, 0x04, 0x77, 0x2a, 0x96, 0x1d, 0x98, 0xe9,
	0x79, 0x02, 0x55, 0x93, 0x42, 0x10, 0x82, 0xd4, 0x93, 0xa7, 0xf8, 0x17, 0x0d, 0xfe, 0x3f, 0x62,
	0xa4, 0x36, 0x78, 0x42, 0xdc, 0xb3, 0x31, 0xc8, 0x37, 0x40, 0xe0, 0x34, 0xce, 0x88, 0x7b, 0x26,
	0x9c, 0x2c, 0x35, 0xe6, 0x3d, 0x81, 0x77, 0x35, 0x13, 0x37, 0xda, 0x85, 0x15, 0xe6, 0xb4, 0xa9,
	0x63, 0x34, 0x07, 0x86, 0x9f, 0xc0, 0xd2, 0xf4, 0x96, 0x56, 0x9e, 0x6f, 0x14, 0xc4, 0x41, 0x6d,
	0xe0, 0xd7, 0x07, 0x3f, 0x81, 0x6b, 0xa9, 0xf0, 0x46, 0x23, 0xcd, 0x65, 0x44, 0xfa, 0xad, 0x06,
	0xfa, 0x21, 0xe5, 0x8f, 0x98, 0xed, 0x9a, 0x2e, 0xa7, 0x76, 0x6b, 0x70, 0x91, 0xfa, 0xdc, 0x84,
	0xc2, 0xa9, 0xe9, 0xb8, 0xdc, 0x08, 0xc2, 0x91, 0x45, 0x5a, 0x16, 0xe2, 0xa7, 0x7e, 0x4c, 0x65,
	0x28, 0xba, 0xb4, 0xc5, 0xec, 0xb6, 0x11, 0x8f, 0x3b, 0x2f, 0xe5, 0xbe, 0x26, 0x3e, 0x80, 0x8d,
	0x44, 0x18, 0x93, 0xd5, 0xed, 0x3d, 0xd8, 0x3c, 0xa4, 0xbc, 0x4e, 0x38, 0x75, 0xf9, 0x89, 0xd9,
	0xb1, 0xc5, 0x9b, 0x6c, 0x30, 0xc6, 0xb3, 0xe3, 0xc1, 0x44, 0x94, 0x3b, 0xf1, 0x9e, 0x02, 0xf0,
	0x21, 0x14, 0x5c, 0x71, 0x20, 0x66, 0x98, 0xc3, 0x18, 0x1f, 0x6d, 0xeb, 0xe8, 0xcd, 0x65, 0x37,
	0xfc, 0x89, 0xef, 0xc1, 0xd5, 0x43, 0xca, 0x23, 0x1d, 0xf6, 0x88, 0xf5, 0xed, 0x71, 0xc8, 0x1e,
	0x88, 0x88, 0x92, 0xae, 0x29, 0x60, 0x7e, 0xab, 0xb4, 0x3c, 0x69, 0xb8, 0x55, 0x84, 0x1a, 0xb6,
	0x60, 0xed, 0x90, 0xf2, 0xc7, 0x36, 0x77, 0x06, 0x0f, 0xed, 0xf6, 0x7f, 0xdd, 0x7b, 0x67, 0xa2,
	0xd5, 0x63, 0xde, 0x26, 0x2a, 0xe1, 0x45, 0x07, 0xd6, 0x2d, 0xc8, 0x1f, 0xd9, 0x26, 0xf7, 0xb2,
	0x9b, 0x9d, 0xc0, 0x03, 0x28, 0x0c, 0x15, 0x15, 0x92, 0x3d, 0x98, 0x6b, 0x39, 0x94, 0x70, 0x2a,
	0x55, 0x33, 0x6a, 0xe8, 0xeb, 0xe1, 0x67, 0x80, 0xfc, 0x31, 0x7f, 0x4e, 0xdd, 0x31, 0x19, 0xbc,
	0x0d, 0xb3, 0x96, 0xd0, 0x53, 0xbd, 0x97, 0x10, 0x84, 0x52, 0xc0, 0x27, 0xb0, 0x1a, 0xb1, 0xab,
	0x10, 0xde, 0x87, 0xe5, 0x60, 0x81, 0x04, 0x86, 0x52, 0x27, 0xee, 0xd2, 0x70, 0x85, 0x78, 0x46,
	0xbf, 0xd3, 0x60, 0x3d, 0x36, 0xcd, 0xc7, 0x83, 0xf6, 0x5a, 0x95, 0x13, 0x87, 0x1b, 0x23, 0xc5,
	0xcf, 0x0b, 0x79, 0x7d, 0xf8, 0x02, 0x82, 0xf0, 0x72, 0xe3, 0xc2, 0xfb, 0x0a, 0xf4, 0x24, 0x20,
	0x2a, 0xca, 0x9a, 0x37, 0x1d, 0x42, 0x8b, 0x25, 0x30, 0x99, 0x1a, 0x68, 0xc1, 0x8d, 0xda, 0xc2,
	0x9f, 0x89, 0xf7, 0x2d, 0x3f, 0x6a, 0x03, 0x01, 0x70, 0xc2, 0xf7, 0x9d, 0x8b, 0xbc, 0x6f, 0xfc,
	0x58, 0x3c, 0xe1, 0x98, 0x41, 0x05, 0x78, 0x82, 0xc2, 0x76, 0x22, 0xb8, 0x1a, 0xc4, 0xee, 0xd0,
	0x31, 0xb8, 0xae, 0xc1, 0xa2, 0x2c, 0x40, 0x38, 0xf7, 0x20, 0x44, 0x32, 0xef, 0xff, 0x83, 0x19,
	0xd9, 0xe4, 0xb2, 0xeb, 0xe4, 0x47, 0x0c, 0xaf, 0x72, 0x34, 0x82, 0x57, 0x1b, 0x87, 0xf7, 0x25,
	0x5c, 0x09, 0x99, 0x99, 0x7c, 0xd1, 0xe5, 0x22, 0x8b, 0x2e, 0x71, 0x97, 0xe5, 0x92, 0x77, 0xd9,
	0x41, 0x24, 0x53, 0x91, 0x1d, 0x36, 0x41, 0xbe, 0x9b, 0xb0, 0x1c, 0x79, 0x29, 0xc3, 0x39, 0xa2,
	0x65, 0xce, 0x11, 0xb4, 0x0b, 0xb3, 0x92, 0x31, 0xaa, 0xb1, 0x84, 0x2a, 0x92, 0x4b, 0x56, 0x9c,
	0x5e, 0xab, 0x72, 0x22, 0x4e, 0x1a, 0x4a, 0x03, 0xff, 0x31, 0x05, 0x73, 0xbe, 0xf9, 0x32, 0x14,
	0xbb, 0xd4, 0xf9, 0xda, 0xa2, 0x46, 0x90, 0x05, 0x4d, 0xac, 0xfb, 0xbc, 0x94, 0xd7, 0xfd, 0x5c,
	0xf8, 0xef, 0xed, 0x9c, 0x58, 0x7d, 0xaa, 0x28, 0x81, 0x48, 0xdd, 0x33, 0x4f, 0xe0, 0x1d, 0xd3,
	0x97, 0xdc, 0x21, 0x46, 0x9b, 0x70, 0x22, 0x72, 0xb4, 0xd4, 0x58, 0x10, 0x92, 0x03, 0xc2, 0x49,
	0xec, 0xb5, 0x4e, 0xc7, 0xa7, 0xf1, 0x1d, 0x40, 0xf2, 0xb8, 0x4d, 0x6d, 0x6e, 0xf2, 0x81, 0x04,
	0x32, 0x23, 0xac, 0x14, 0x85, 0x9a, 0x3a, 0x10, 0x50, 0x1e, 0x41, 0x41, 0x0c, 0x0a, 0x63, 0x48,
	0xa0, 0x4b, 0xb3, 0x22, 0x6a, 0xdd, 0x8f, 0xda, 0xa7, 0xd8, 0x95, 0xa7, 0xbe, 0x46, 0x23, 0x2f,
	0xae, 0x0c, 0xbf, 0xd1, 0xc7, 0xb0, 0x6a, 0xda, 0x9c, 0x76, 0x1c, 0xc2, 0xc3, 0x86, 0xe6, 0xc6,
	0x1a, 0x42, 0xc3, 0x6b, 0x43, 0x19, 0x3e, 0x80, 0x19, 0x31, 0xfd, 0x63, 0x71, 0x6a, 0xf1, 0x38,
	0xaf, 0xc0, 0xac, 0x17, 0x99, 0x1a, 0x10, 0x4b, 0x0d, 0xf5, 0xf5, 0xd1, 0xf4, 0xfc, 0x54, 0x31,
	0x77, 0xf7, 0xef, 0x65, 0x58, 0x7c, 0xaa, 0xea, 0x5b, 0x67, 0x1d, 0x64, 0xc3, 0xc2, 0x90, 0x94,
	0x23, 0x3d, 0x36, 0x4b, 0x42, 0x9c, 0x5a, 0xdf, 0x48, 0x3c, 0x93, 0xaf, 0x0f, 0x97, 0xbf, 0xf9,
	0xf3, 0xaf, 0x1f, 0xa7, 0x30, 0xde, 0xac, 0x9e, 0xef, 0x35, 0x29, 0x27, 0x7b, 0x55, 0x8b, 0x75,
	0xdc, 0xea, 0x6b, 0xd9, 0x0d, 0x6f, 0xaa, 0xf2, 0xe5, 0xed, 0x6b, 0xbb, 0xe8, 0x07, 0x0d, 0x8a,
	0x71, 0xfa, 0x8c, 0xae, 0x07, 0xb6, 0x53, 0x28, 0xbd, 0x8e, 0xb3, 0x54, 0x14, 0x8a, 0x7b, 0x02,
	0x45, 0x15, 0xef, 0x66, 0xa2, 0xa8, 0xbe, 0x0e, 0xb2, 0xf7, 0xc6, 0x83, 0xf4, 0x9b, 0x06, 0x2b,
	0x23, 0x14, 0x11, 0x85, 0x1c, 0xa6, 0x51, 0x72, 0x7d, 0x3b, 0x53, 0x47, 0xa1, 0xaa, 0x09, 0x54,
	0xf7, 0xd1, 0xfe, 0x04, 0xa8, 0x4c, 0xdf, 0x94, 0x21, 0x37, 0xfd, 0xef, 0x9a, 0xe8, 0xfc, 0x24,
	0x16, 0x8b, 0xca, 0x19, 0x20, 0x22, 0xe3, 0x49, 0xbf, 0x7d, 0x01, 0x4d, 0x05, 0xfa, 0x7d, 0x01,
	0x7a, 0x0f, 0x55, 0xb3, 0x0b, 0x1a, 0xe0, 0x6c, 0xca, 0x7e, 0x42, 0x3f, 0x69, 0xb0, 0x9a, 0xc0,
	0x4e, 0xd1, 0x8d, 0x88, 0xef, 0x14, 0x0e, 0xad, 0xef, 0x8c, 0xd1, 0x52, 0xe8, 0xde, 0x11, 0xe8,
	0x76, 0x51, 0x39, 0x19, 0xdd, 0x7e, 0x2b, 0xb8, 0xa8, 0x12, 0xf8, 0xb3, 0x26, 0x87, 0xf6, 0x28,
	0x6d, 0x45, 0xb7, 0x22, 0x3e, 0xd3, 0x09, 0xb1, 0x5e, 0x1e, 0xaf, 0xa8, 0xf0, 0xbd, 0x25, 0xf0,
	0xed, 0xa0, 0xed, 0x94, 0xec, 0x79, 0x9c, 0xd8, 0xdd, 0xb7, 0x84, 0x05, 0xf4, 0xab, 0x06, 0x97,
	0x13, 0x79, 0x2b, 0xba, 0x19, 0x71, 0x98, 0xca, 0x87, 0xf5, 0x5b, 0x63, 0xf5, 0xa2, 0x0d, 0x82,
	0xde, 0xce, 0xae, 0x6a, 0xc0, 0x34, 0xc4, 0xde, 0x44, 0xdf, 0x6b, 0x50, 0x8c, 0x73, 0xd5, 0x70,
	0xcf, 0xa6, 0xb0, 0x66, 0x1d, 0x67, 0xa9, 0x28, 0x48, 0x77, 0x05, 0xa4, 0x3b, 0x68, 0x82, 0x9e,
	0x45, 0x2d, 0x98, 0x53, 0x3c, 0x15, 0x95, 0x02, 0x17, 0x51, 0x8e, 0xab, 0xaf, 0x27, 0x9c, 0x28,
	0x9f, 0xdb, 0xc2, 0xe7, 0x26, 0xde, 0x48, 0x79, 0x3e, 0xa6, 0x6d, 0x72, 0x54, 0x87, 0xc5, 0x10,
	0xdd, 0x44, 0x57, 0x47, 0xc7, 0x5f, 0x40, 0x14, 0xf5, 0xcd, 0x94, 0x53, 0xe5, 0xf0, 0x12, 0x22,
	0x80, 0x46, 0xd9, 0x1d, 0xda, 0x4e, 0x1d, 0x6a, 0x21, 0xdb, 0x37, 0xb2, 0x95, 0x86, 0x2e, 0xbe,
	0x14, 0x45, 0x8a, 0xb0, 0xb1, 0x58, 0x91, 0x92, 0xa8, 0x5f, 0xac, 0x48, 0x89, 0x64, 0x6e, 0xc4,
	0xb8, 0xa0, 0x4e, 0x29, 0xc6, 0xc3, 0xfc, 0x2d, 0xc5, 0x78, 0x84, 0x79, 0xe1, 0x4b, 0xe8, 0x0b,
	0x28, 0xc4, 0x68, 0x0d, 0xda, 0x4a, 0xbc, 0x18, 0x1e, 0x66, 0xd7, 0x33, 0x34, 0x7c, 0xcb, 0xb5,
	0x4f, 0x61, 0xbd, 0xc5, 0xba, 0xfe, 0xa2, 0x8d, 0xfe, 0xc3, 0x55, 0x5b, 0x0d, 0xed, 0xc1, 0x87,
	0x3d, 0xf3, 0xd8, 0x13, 0x1e, 0x6b, 0xcf, 0xf5, 0x8e, 0xc9, 0xcf, 0xfa, 0xcd, 0x4a, 0x8b, 0x75,
	0xab, 0xea, 0xcf, 0x32, 0xff, 0x62, 0x73, 0x56, 0xdc, 0x7c, 0xf7, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x03, 0x6c, 0xfb, 0xa7, 0x13, 0x00, 0x00,
}
