// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93yfHIb9/dLQUtvGCiM/nc+zj833HSfHpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHnrWOEEoSSfgCkDulDNR6baYq8A3KmHNHSeJekRDW69JcMzsikiD3HJQvaWRmpS5Kfi9BKbLIXBfOEQ3GTpK405gx69ixLssRLwRftETti2tsdI7cz0RNKbBA5eNYkxkDNJckhLFDGMsD5iGxz4hSnISN6IUBWbe1BRkXCyniCPmCqbHzX8k5QtgMRuAb4z0N9HLs/ON4WyOO3JNh0HEdopdAgvIIQliK++oIQhi4lo+TdLfYsw/tkLvHCPoRF2QGrB9SOslWIPZqa8ReYyNYz0RQm1eq70o1DG68VPB968aM8u/I/AFeVLRJianorIrsI/YMbNLvz8ww2RqK28oAW/rnMCcx098Ii01Ug5tkYx9QktTtXgpIEuBBR9BG7k1aU3j1PKrZx55lRE5rLyVgQeGyh5y0nx40cCNzuyfuFSgNASoiDHD4ZB8cfhssz3OyLdM/EjWAuIrDGchXFoOWKhvM0SsJQtPfmeCaUE75oua5MPy66Nhj+atUB3uVi07ZVBQKj8P9XV12pXRpkofk7Xgf8ralLpm9/QZyYvO9cynZjpb7IlUHjbKHrrZefcnIy9u8hRwyWAHr7tOY8rmQIWG9bHnv5O+d/L2T/1GdvML7TcQnq5FbkCvqP+8TxMv38Jb+fQl6Kd7GN4YXFyy7VzTc6W/gRwxKo2HpugEVCa5gA+iL61N2lHsQpyw/NSXJRhsyYqmeWW+1BBJSvlivkUr/76Nz7xps5huLsMOdq7DmZy7jLd5+aoaSLrV+Xb31CSPS3tvTqq1yf/jG033fGeJ0i/1kCLBbe5NQjVPKTtqNpNCim9ZPFxOhTQK7AWcHB4NOvpAVGQRdP+ql4F2wWrk1pKMpHEXLSguiKhtdaXnqY+m3/hLrSs99ezCCYxI2iDqLoo28mcxtBLTZ64Q22Frnao2pVZ62XBdKlBxhL/+x5GcAAAD//x4vKjleGQAA",
	"html.tmpl": "H4sIAAAAAAAA/9xa62/bOBL/nr9iVu0iu21lOU7S9lzFB2zaYnHYPtCke3ufDrREW0RpUivSaXOG//cDST1IiZKdV/dw6IdKw9HMcOY3D9KJf3j94fzyXx/fQCZXdHZwEJv/AeIMo1Q9AMSSSIpnHwsuecIpvObJeoWZRJJwFkdm1XCusESQZKgQWJ4Fny/fhi+DcokS9gUKTM8CIa8pFhnGMgB5neOzQOJvMkqECCAr8OIsyKTMxTSKFpxJMVpyvqQY5USMEr5SfH9foBWh12ef52sm19OT8fjZi/H42cl4TCSiJAmiUqlWZZ4B5jy9hk35AvCVpDKbwvMxXr2qiStULAmbwhFeAVpL3qwknPJiCo8mk0lDVAaGxpgpBMac4BkIxEQocEEWDWuO0pSwZTjnUvLVFE4atduD8iE7suzTsr9isszkFBgvVog20ua8SHFRCzvKv4HglKTwCCHUr3Q8OsXfumonltr7kGz5cXSKVzDuqjz+S3aKLK0KdGGKE15oICvNDHfjffr8BZ6cdiRJNKe4i6aj8fjHFjwE+Q+ewkubXu4p4ZSiXOApVE9dNSoN+1z1Yjy2ZKLky7Lga5aGlelpov51ZepEkMWUySxMMkLTn/AVZj/bIOgKW8zVv66wtIMdJ0hJknSCVEYHJp4IyRTydpAISzGTOim7COtiS4mw9nb0c5+88SuInsB7DoYAnMGCFEJCDoQpMU+ituzoCVzqyPMFLAimqWiYRpoQGmTItGWC+vStYmg+sFBjF4Nd0ialtMvrHN9Z2HEp7Dc0x9Qj7flNhJ2Uwl5jkRQkV2nlEWnXVa9j8TeJmSCc2c6tiUMOflMx7euXQam3cfSgwMrZvyBxPwIrh79fr+a48Ig8vanE03sKIVuv4ArRNRYjO4hsvRqK33u02t8xPbImu3xyI2nH9+MPkSCKCuMRPfQ4bjGroV4N9WplSmHVrqws+8eeycHWlXAmsRqcGg2PJE9CRUeE4QLW1BJLiZChHpS06nYfrBorxYt2CaaE4bCy6sjpcJ7q3FgCM6AEZk43dhrbnNPUt8W3hGJQHZGwJaTkyqm9VNlilna05ZSInKLrqWniNx41qr2dqMmmO+H4DPJMWG0/u0aFCaZ0WGZnlkGULNkUCuXDPeVa6MkwHL47fAaHbw4BsRQO/ziEOUqXWOhmmGG45OeWw/Wax9Oj5zZEanS45NoowjSI5pQnX14d9CDL/dbea4KZxMWr3ShyZrHnCgydQe/l3+bo5OXwQLVYjJOX1rc1zPU8ow4N5il08sQzFrnTVA29AqVkLVSafXODH0flUca8/RCG8FngApK1kHwF5xcXEIa3OGk1HCNF1eemODJnP/WoRsVKaXYEJD0L9Hkv6D0OZkc1/2RW16TzsibFUTap1lUCa4F2bQqq01q8ptVqTQPYbArElhhGqhSI7bZeUEuPVX78m6keMj2DkWomDkdMycx6BYhR6YZHm03JHszqxzhCLfY1dQmWPe+wEGjZMqlHrUf52zWllQGxyBGDhCIhzgKdZsHsXRwpqjLuN86WPQYapHTVbTaYpR3LatvfsPXqoQx/86CG14Pi7axvALPdhs3U6d/JH+VOFPJCiq8wbcZNcV87usDFFUkeDEYXTTTuIRJx5CaE+137C2V/Y2x35AlmF2ZI+l0PSWro1m61pTYa4yglV2Ul6SkKwwVBl5/SO3ZftYpNnE10CfIXh2xibacsipc8tzxa2lhZk8PImiK3dfcdqiFxdlyZYMe2lU3Zse32Pj1qjSxg9CsS+iDqgiw2E2ftkfqIF7SKoGxuBm1qMYtlOtOC40im+k3FsH7RJ8z6zbLQ0CJZtBRFHk2xNB2pDc4aAJ19Nfb5kkemdkhlZ18VUyfL1NasSJhXA9d+KYpZeWGHrlwxOiEsI/caL9CaSp0g2235NgXNba+UqRdHeY85XW/3ZXjH33GkUTE7cFvvymBX51mrLYdgR+eD3lI7RpvNY24OVx0BJWzxnzCC4ApRkiLJC3MJEdQUPCrWFIsA2jvITma/lyypuYBRQ8hJG1ZmT+1g+KA+CKYG/z0MpS2mZ+wbGm8q7EqGKiRlUvyTyMz4vuPfHXvaK0E8ZO/A5Nr406g0qYz+z6NP6/Zc5wikpDFHA79EvK9lVap8DbcUF/kNvFvSeNPGSpzW91RgD2ZN0OArkZna5nYLvCyWD4Zd5dWhEH9oqvX/C2p1qYW8IEwuIPjx6VXQheR91NEbQqL1vaZAaNEqnm5n7xmJ47ljp9vsWxeCN2r4tT5/0/8FiebF3Mg98AgwfCb4nxgDHCnn5uRL2LIlr1m40YBhnHzjCcM3YMBfPGH4v2thv/cUey+jc+M1J2Hqy+LAzSofWk2e1MX1FongSQNfEtSe0DHqwt8L/j2gvxewemDVB5AuPLrg6ECjBYwOEIZKYIOG3kN/z8HeRsj+dXMICw9YM28KlYFqeRe43LVOPlSVvAuU77dCPkgC9F8i9RfD710I32GZ8RScevgJ/7nGQoKTBp+wyDkT2KXedwIYcx4Q/eXeWrAtqS5mDcLKpQtZYLQibLndgtDPNaL21Gvc11FsyH7NZu02qr9X6bcw+lgYnLevDKwbBxNd35XDwIWDdd1g/vRshHIyyqTMA9fI7KREc3lO+/Xy8iPMCUsJW3YuGXzHtP7R2uvkduoMMPWvf0RS4qLvGKfaD0+v94vb3uN5fbgrI1Zl3eDpbrN53P9TDtziEmEgpR+z3fOPsXkHU+ndHVzKxX6Wfcfm247S3huHDpCHLhy+F477bxu+NxDv1ArudMGwT6m8QdydL9uXCva6M1hUv4Ls+4tNNjFq3Umh709cmt97WyGs5oVRXnDJ3SHgPZdY1G/nT5+6y/9AV8ilfLyWGWcWzXJsCzxt2DRTld5B+0eTohqr9O/hVaM98EDFYujGuoKT2tjA+nme75Cg9r6DxTjDz+QizsWMgzMLYXFkyHFU/hH5fwMAAP//DVFicFYuAAA=",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2+jOhC+81fMC+/wqor0XiU5vPZVT6u2qtpqL9Vq6yQTgmRsFptoK/D/vvIPsAnQVNrVXpYLnhk8zHzf54EYHkou+YZTuOabKkcmicw4ixYEGMlxOZO8mK0WF2QVRXEMz2RNEfgOrjiTyKSI6rokLEWY32QUhVJRXf+9yyh+1dvhcgnze5KjUgm81LVbf/kn7tZnEUCX4w6FIKlOA2A33HKWhptuKkrDjci2SoUp/mNV/lP7v0tkIuOsTaL7SigekIKPmWS+T6US7GITiZ+wPGSbsLfTdbX3BF6eNoSSEj4TWiE8vxWoaxDGmRy0M5HaeRZ9mBHPcVeLY3pRAKFZypazMkv3crZaENiXuFvOYiOHZ17o5xYXhVVFtz+q6/k1ik2ZFVpFSgXVeG57L/aNe5mZjJ650azZDub/E3GTId3qnA2YJTQGHGjglqyRQgPBTmiiBhJ9gb1D33QXNCGGOj8khsvGdwpNJy/9vpBGa5/Zp00V5vG6ZnxdQr8T28c17khFpeFWKXDmJZi+w5DTgymwrxCPSCjgqPGa9cj8S4S+3Vf5GssphIYodSBNo+XfPYpYDzBr6zlCMpax9Dhiy/s90NnQ4q8kAWRbyJ1UIUlWgYLdaPkF8m1Ah05x8AHATXOTYJ+CMABjCALqblsExrQVwDAxCUNIRsfon6vP14FAXycV6jnpUXCkTv99+ZhA3xHnHco937YafcRvFQrZsvOIouBMYGtPsnNMxLF5bDfht0IXMD12XUnH09e5gyFsSXD+J1kiyTOWKgXCrDvIXVbb2TCt9Y/ktYH3Ep86eAOOheOxpdedzziG4S+AJmte6D+4lo17LlFAA1fn563rEzmQdv3wJvecOWucrIAVGJ61kUNly/Jkheozf5cWsxlcrKDvcszqkrvzVhRhTNce2rb+1tOh8yMAAP//me02bccKAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
