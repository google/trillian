// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/google/trillian/storage (interfaces: AdminStorage,AdminTX,LogStorage,LogTreeTX,MapStorage,MapTreeTX,ReadOnlyAdminTX,ReadOnlyLogTX,ReadOnlyLogTreeTX,ReadOnlyMapTreeTX)

package storage

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	trillian "github.com/google/trillian"
	time "time"
)

// MockAdminStorage is a mock of AdminStorage interface
type MockAdminStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAdminStorageMockRecorder
}

// MockAdminStorageMockRecorder is the mock recorder for MockAdminStorage
type MockAdminStorageMockRecorder struct {
	mock *MockAdminStorage
}

// NewMockAdminStorage creates a new mock instance
func NewMockAdminStorage(ctrl *gomock.Controller) *MockAdminStorage {
	mock := &MockAdminStorage{ctrl: ctrl}
	mock.recorder = &MockAdminStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAdminStorage) EXPECT() *MockAdminStorageMockRecorder {
	return _m.recorder
}

// Begin mocks base method
func (_m *MockAdminStorage) Begin(_param0 context.Context) (AdminTX, error) {
	ret := _m.ctrl.Call(_m, "Begin", _param0)
	ret0, _ := ret[0].(AdminTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (_mr *MockAdminStorageMockRecorder) Begin(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin", arg0)
}

// CheckDatabaseAccessible mocks base method
func (_m *MockAdminStorage) CheckDatabaseAccessible(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "CheckDatabaseAccessible", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDatabaseAccessible indicates an expected call of CheckDatabaseAccessible
func (_mr *MockAdminStorageMockRecorder) CheckDatabaseAccessible(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckDatabaseAccessible", arg0)
}

// Snapshot mocks base method
func (_m *MockAdminStorage) Snapshot(_param0 context.Context) (ReadOnlyAdminTX, error) {
	ret := _m.ctrl.Call(_m, "Snapshot", _param0)
	ret0, _ := ret[0].(ReadOnlyAdminTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (_mr *MockAdminStorageMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshot", arg0)
}

// MockAdminTX is a mock of AdminTX interface
type MockAdminTX struct {
	ctrl     *gomock.Controller
	recorder *MockAdminTXMockRecorder
}

// MockAdminTXMockRecorder is the mock recorder for MockAdminTX
type MockAdminTXMockRecorder struct {
	mock *MockAdminTX
}

// NewMockAdminTX creates a new mock instance
func NewMockAdminTX(ctrl *gomock.Controller) *MockAdminTX {
	mock := &MockAdminTX{ctrl: ctrl}
	mock.recorder = &MockAdminTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAdminTX) EXPECT() *MockAdminTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockAdminTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockAdminTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockAdminTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockAdminTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// CreateTree mocks base method
func (_m *MockAdminTX) CreateTree(_param0 context.Context, _param1 *trillian.Tree) (*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "CreateTree", _param0, _param1)
	ret0, _ := ret[0].(*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree
func (_mr *MockAdminTXMockRecorder) CreateTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTree", arg0, arg1)
}

// GetTree mocks base method
func (_m *MockAdminTX) GetTree(_param0 context.Context, _param1 int64) (*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "GetTree", _param0, _param1)
	ret0, _ := ret[0].(*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree
func (_mr *MockAdminTXMockRecorder) GetTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTree", arg0, arg1)
}

// IsClosed mocks base method
func (_m *MockAdminTX) IsClosed() bool {
	ret := _m.ctrl.Call(_m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (_mr *MockAdminTXMockRecorder) IsClosed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsClosed")
}

// ListTreeIDs mocks base method
func (_m *MockAdminTX) ListTreeIDs(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "ListTreeIDs", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeIDs indicates an expected call of ListTreeIDs
func (_mr *MockAdminTXMockRecorder) ListTreeIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTreeIDs", arg0)
}

// ListTrees mocks base method
func (_m *MockAdminTX) ListTrees(_param0 context.Context) ([]*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "ListTrees", _param0)
	ret0, _ := ret[0].([]*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrees indicates an expected call of ListTrees
func (_mr *MockAdminTXMockRecorder) ListTrees(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTrees", arg0)
}

// Rollback mocks base method
func (_m *MockAdminTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockAdminTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// UpdateTree mocks base method
func (_m *MockAdminTX) UpdateTree(_param0 context.Context, _param1 int64, _param2 func(*trillian.Tree)) (*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "UpdateTree", _param0, _param1, _param2)
	ret0, _ := ret[0].(*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTree indicates an expected call of UpdateTree
func (_mr *MockAdminTXMockRecorder) UpdateTree(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTree", arg0, arg1, arg2)
}

// MockLogStorage is a mock of LogStorage interface
type MockLogStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLogStorageMockRecorder
}

// MockLogStorageMockRecorder is the mock recorder for MockLogStorage
type MockLogStorageMockRecorder struct {
	mock *MockLogStorage
}

// NewMockLogStorage creates a new mock instance
func NewMockLogStorage(ctrl *gomock.Controller) *MockLogStorage {
	mock := &MockLogStorage{ctrl: ctrl}
	mock.recorder = &MockLogStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogStorage) EXPECT() *MockLogStorageMockRecorder {
	return _m.recorder
}

// BeginForTree mocks base method
func (_m *MockLogStorage) BeginForTree(_param0 context.Context, _param1 int64) (LogTreeTX, error) {
	ret := _m.ctrl.Call(_m, "BeginForTree", _param0, _param1)
	ret0, _ := ret[0].(LogTreeTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginForTree indicates an expected call of BeginForTree
func (_mr *MockLogStorageMockRecorder) BeginForTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginForTree", arg0, arg1)
}

// CheckDatabaseAccessible mocks base method
func (_m *MockLogStorage) CheckDatabaseAccessible(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "CheckDatabaseAccessible", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDatabaseAccessible indicates an expected call of CheckDatabaseAccessible
func (_mr *MockLogStorageMockRecorder) CheckDatabaseAccessible(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckDatabaseAccessible", arg0)
}

// Snapshot mocks base method
func (_m *MockLogStorage) Snapshot(_param0 context.Context) (ReadOnlyLogTX, error) {
	ret := _m.ctrl.Call(_m, "Snapshot", _param0)
	ret0, _ := ret[0].(ReadOnlyLogTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (_mr *MockLogStorageMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshot", arg0)
}

// SnapshotForTree mocks base method
func (_m *MockLogStorage) SnapshotForTree(_param0 context.Context, _param1 int64) (ReadOnlyLogTreeTX, error) {
	ret := _m.ctrl.Call(_m, "SnapshotForTree", _param0, _param1)
	ret0, _ := ret[0].(ReadOnlyLogTreeTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotForTree indicates an expected call of SnapshotForTree
func (_mr *MockLogStorageMockRecorder) SnapshotForTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotForTree", arg0, arg1)
}

// MockLogTreeTX is a mock of LogTreeTX interface
type MockLogTreeTX struct {
	ctrl     *gomock.Controller
	recorder *MockLogTreeTXMockRecorder
}

// MockLogTreeTXMockRecorder is the mock recorder for MockLogTreeTX
type MockLogTreeTXMockRecorder struct {
	mock *MockLogTreeTX
}

// NewMockLogTreeTX creates a new mock instance
func NewMockLogTreeTX(ctrl *gomock.Controller) *MockLogTreeTX {
	mock := &MockLogTreeTX{ctrl: ctrl}
	mock.recorder = &MockLogTreeTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogTreeTX) EXPECT() *MockLogTreeTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockLogTreeTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockLogTreeTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockLogTreeTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockLogTreeTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// DequeueLeaves mocks base method
func (_m *MockLogTreeTX) DequeueLeaves(_param0 context.Context, _param1 int, _param2 time.Time) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "DequeueLeaves", _param0, _param1, _param2)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueLeaves indicates an expected call of DequeueLeaves
func (_mr *MockLogTreeTXMockRecorder) DequeueLeaves(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DequeueLeaves", arg0, arg1, arg2)
}

// GetActiveLogIDs mocks base method
func (_m *MockLogTreeTX) GetActiveLogIDs(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "GetActiveLogIDs", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLogIDs indicates an expected call of GetActiveLogIDs
func (_mr *MockLogTreeTXMockRecorder) GetActiveLogIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveLogIDs", arg0)
}

// GetActiveLogIDsWithPendingWork mocks base method
func (_m *MockLogTreeTX) GetActiveLogIDsWithPendingWork(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "GetActiveLogIDsWithPendingWork", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLogIDsWithPendingWork indicates an expected call of GetActiveLogIDsWithPendingWork
func (_mr *MockLogTreeTXMockRecorder) GetActiveLogIDsWithPendingWork(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveLogIDsWithPendingWork", arg0)
}

// GetLeavesByHash mocks base method
func (_m *MockLogTreeTX) GetLeavesByHash(_param0 context.Context, _param1 [][]byte, _param2 bool) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "GetLeavesByHash", _param0, _param1, _param2)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByHash indicates an expected call of GetLeavesByHash
func (_mr *MockLogTreeTXMockRecorder) GetLeavesByHash(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLeavesByHash", arg0, arg1, arg2)
}

// GetLeavesByIndex mocks base method
func (_m *MockLogTreeTX) GetLeavesByIndex(_param0 context.Context, _param1 []int64) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "GetLeavesByIndex", _param0, _param1)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByIndex indicates an expected call of GetLeavesByIndex
func (_mr *MockLogTreeTXMockRecorder) GetLeavesByIndex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLeavesByIndex", arg0, arg1)
}

// GetMerkleNodes mocks base method
func (_m *MockLogTreeTX) GetMerkleNodes(_param0 context.Context, _param1 int64, _param2 []NodeID) ([]Node, error) {
	ret := _m.ctrl.Call(_m, "GetMerkleNodes", _param0, _param1, _param2)
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleNodes indicates an expected call of GetMerkleNodes
func (_mr *MockLogTreeTXMockRecorder) GetMerkleNodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerkleNodes", arg0, arg1, arg2)
}

// GetSequencedLeafCount mocks base method
func (_m *MockLogTreeTX) GetSequencedLeafCount(_param0 context.Context) (int64, error) {
	ret := _m.ctrl.Call(_m, "GetSequencedLeafCount", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequencedLeafCount indicates an expected call of GetSequencedLeafCount
func (_mr *MockLogTreeTXMockRecorder) GetSequencedLeafCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSequencedLeafCount", arg0)
}

// IsOpen mocks base method
func (_m *MockLogTreeTX) IsOpen() bool {
	ret := _m.ctrl.Call(_m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (_mr *MockLogTreeTXMockRecorder) IsOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpen")
}

// LatestSignedLogRoot mocks base method
func (_m *MockLogTreeTX) LatestSignedLogRoot(_param0 context.Context) (trillian.SignedLogRoot, error) {
	ret := _m.ctrl.Call(_m, "LatestSignedLogRoot", _param0)
	ret0, _ := ret[0].(trillian.SignedLogRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSignedLogRoot indicates an expected call of LatestSignedLogRoot
func (_mr *MockLogTreeTXMockRecorder) LatestSignedLogRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestSignedLogRoot", arg0)
}

// QueueLeaves mocks base method
func (_m *MockLogTreeTX) QueueLeaves(_param0 context.Context, _param1 []*trillian.LogLeaf, _param2 time.Time) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "QueueLeaves", _param0, _param1, _param2)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueLeaves indicates an expected call of QueueLeaves
func (_mr *MockLogTreeTXMockRecorder) QueueLeaves(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueLeaves", arg0, arg1, arg2)
}

// ReadRevision mocks base method
func (_m *MockLogTreeTX) ReadRevision() int64 {
	ret := _m.ctrl.Call(_m, "ReadRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ReadRevision indicates an expected call of ReadRevision
func (_mr *MockLogTreeTXMockRecorder) ReadRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadRevision")
}

// Rollback mocks base method
func (_m *MockLogTreeTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockLogTreeTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// SetMerkleNodes mocks base method
func (_m *MockLogTreeTX) SetMerkleNodes(_param0 context.Context, _param1 []Node) error {
	ret := _m.ctrl.Call(_m, "SetMerkleNodes", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMerkleNodes indicates an expected call of SetMerkleNodes
func (_mr *MockLogTreeTXMockRecorder) SetMerkleNodes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMerkleNodes", arg0, arg1)
}

// StoreSignedLogRoot mocks base method
func (_m *MockLogTreeTX) StoreSignedLogRoot(_param0 context.Context, _param1 trillian.SignedLogRoot) error {
	ret := _m.ctrl.Call(_m, "StoreSignedLogRoot", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSignedLogRoot indicates an expected call of StoreSignedLogRoot
func (_mr *MockLogTreeTXMockRecorder) StoreSignedLogRoot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoreSignedLogRoot", arg0, arg1)
}

// UpdateSequencedLeaves mocks base method
func (_m *MockLogTreeTX) UpdateSequencedLeaves(_param0 context.Context, _param1 []*trillian.LogLeaf) error {
	ret := _m.ctrl.Call(_m, "UpdateSequencedLeaves", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSequencedLeaves indicates an expected call of UpdateSequencedLeaves
func (_mr *MockLogTreeTXMockRecorder) UpdateSequencedLeaves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSequencedLeaves", arg0, arg1)
}

// WriteRevision mocks base method
func (_m *MockLogTreeTX) WriteRevision() int64 {
	ret := _m.ctrl.Call(_m, "WriteRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WriteRevision indicates an expected call of WriteRevision
func (_mr *MockLogTreeTXMockRecorder) WriteRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRevision")
}

// MockMapStorage is a mock of MapStorage interface
type MockMapStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMapStorageMockRecorder
}

// MockMapStorageMockRecorder is the mock recorder for MockMapStorage
type MockMapStorageMockRecorder struct {
	mock *MockMapStorage
}

// NewMockMapStorage creates a new mock instance
func NewMockMapStorage(ctrl *gomock.Controller) *MockMapStorage {
	mock := &MockMapStorage{ctrl: ctrl}
	mock.recorder = &MockMapStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMapStorage) EXPECT() *MockMapStorageMockRecorder {
	return _m.recorder
}

// BeginForTree mocks base method
func (_m *MockMapStorage) BeginForTree(_param0 context.Context, _param1 int64) (MapTreeTX, error) {
	ret := _m.ctrl.Call(_m, "BeginForTree", _param0, _param1)
	ret0, _ := ret[0].(MapTreeTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginForTree indicates an expected call of BeginForTree
func (_mr *MockMapStorageMockRecorder) BeginForTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginForTree", arg0, arg1)
}

// CheckDatabaseAccessible mocks base method
func (_m *MockMapStorage) CheckDatabaseAccessible(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "CheckDatabaseAccessible", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDatabaseAccessible indicates an expected call of CheckDatabaseAccessible
func (_mr *MockMapStorageMockRecorder) CheckDatabaseAccessible(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckDatabaseAccessible", arg0)
}

// Snapshot mocks base method
func (_m *MockMapStorage) Snapshot(_param0 context.Context) (ReadOnlyMapTX, error) {
	ret := _m.ctrl.Call(_m, "Snapshot", _param0)
	ret0, _ := ret[0].(ReadOnlyMapTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (_mr *MockMapStorageMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshot", arg0)
}

// SnapshotForTree mocks base method
func (_m *MockMapStorage) SnapshotForTree(_param0 context.Context, _param1 int64) (ReadOnlyMapTreeTX, error) {
	ret := _m.ctrl.Call(_m, "SnapshotForTree", _param0, _param1)
	ret0, _ := ret[0].(ReadOnlyMapTreeTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotForTree indicates an expected call of SnapshotForTree
func (_mr *MockMapStorageMockRecorder) SnapshotForTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotForTree", arg0, arg1)
}

// MockMapTreeTX is a mock of MapTreeTX interface
type MockMapTreeTX struct {
	ctrl     *gomock.Controller
	recorder *MockMapTreeTXMockRecorder
}

// MockMapTreeTXMockRecorder is the mock recorder for MockMapTreeTX
type MockMapTreeTXMockRecorder struct {
	mock *MockMapTreeTX
}

// NewMockMapTreeTX creates a new mock instance
func NewMockMapTreeTX(ctrl *gomock.Controller) *MockMapTreeTX {
	mock := &MockMapTreeTX{ctrl: ctrl}
	mock.recorder = &MockMapTreeTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMapTreeTX) EXPECT() *MockMapTreeTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockMapTreeTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockMapTreeTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockMapTreeTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockMapTreeTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// Get mocks base method
func (_m *MockMapTreeTX) Get(_param0 context.Context, _param1 int64, _param2 [][]byte) ([]trillian.MapLeaf, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1, _param2)
	ret0, _ := ret[0].([]trillian.MapLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMapTreeTXMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

// GetMerkleNodes mocks base method
func (_m *MockMapTreeTX) GetMerkleNodes(_param0 context.Context, _param1 int64, _param2 []NodeID) ([]Node, error) {
	ret := _m.ctrl.Call(_m, "GetMerkleNodes", _param0, _param1, _param2)
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleNodes indicates an expected call of GetMerkleNodes
func (_mr *MockMapTreeTXMockRecorder) GetMerkleNodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerkleNodes", arg0, arg1, arg2)
}

// GetSignedMapRoot mocks base method
func (_m *MockMapTreeTX) GetSignedMapRoot(_param0 context.Context, _param1 int64) (trillian.SignedMapRoot, error) {
	ret := _m.ctrl.Call(_m, "GetSignedMapRoot", _param0, _param1)
	ret0, _ := ret[0].(trillian.SignedMapRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedMapRoot indicates an expected call of GetSignedMapRoot
func (_mr *MockMapTreeTXMockRecorder) GetSignedMapRoot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSignedMapRoot", arg0, arg1)
}

// IsOpen mocks base method
func (_m *MockMapTreeTX) IsOpen() bool {
	ret := _m.ctrl.Call(_m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (_mr *MockMapTreeTXMockRecorder) IsOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpen")
}

// LatestSignedMapRoot mocks base method
func (_m *MockMapTreeTX) LatestSignedMapRoot(_param0 context.Context) (trillian.SignedMapRoot, error) {
	ret := _m.ctrl.Call(_m, "LatestSignedMapRoot", _param0)
	ret0, _ := ret[0].(trillian.SignedMapRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSignedMapRoot indicates an expected call of LatestSignedMapRoot
func (_mr *MockMapTreeTXMockRecorder) LatestSignedMapRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestSignedMapRoot", arg0)
}

// ReadRevision mocks base method
func (_m *MockMapTreeTX) ReadRevision() int64 {
	ret := _m.ctrl.Call(_m, "ReadRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ReadRevision indicates an expected call of ReadRevision
func (_mr *MockMapTreeTXMockRecorder) ReadRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadRevision")
}

// Rollback mocks base method
func (_m *MockMapTreeTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockMapTreeTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// Set mocks base method
func (_m *MockMapTreeTX) Set(_param0 context.Context, _param1 []byte, _param2 trillian.MapLeaf) error {
	ret := _m.ctrl.Call(_m, "Set", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (_mr *MockMapTreeTXMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1, arg2)
}

// SetMerkleNodes mocks base method
func (_m *MockMapTreeTX) SetMerkleNodes(_param0 context.Context, _param1 []Node) error {
	ret := _m.ctrl.Call(_m, "SetMerkleNodes", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMerkleNodes indicates an expected call of SetMerkleNodes
func (_mr *MockMapTreeTXMockRecorder) SetMerkleNodes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMerkleNodes", arg0, arg1)
}

// StoreSignedMapRoot mocks base method
func (_m *MockMapTreeTX) StoreSignedMapRoot(_param0 context.Context, _param1 trillian.SignedMapRoot) error {
	ret := _m.ctrl.Call(_m, "StoreSignedMapRoot", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSignedMapRoot indicates an expected call of StoreSignedMapRoot
func (_mr *MockMapTreeTXMockRecorder) StoreSignedMapRoot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoreSignedMapRoot", arg0, arg1)
}

// WriteRevision mocks base method
func (_m *MockMapTreeTX) WriteRevision() int64 {
	ret := _m.ctrl.Call(_m, "WriteRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WriteRevision indicates an expected call of WriteRevision
func (_mr *MockMapTreeTXMockRecorder) WriteRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteRevision")
}

// MockReadOnlyAdminTX is a mock of ReadOnlyAdminTX interface
type MockReadOnlyAdminTX struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyAdminTXMockRecorder
}

// MockReadOnlyAdminTXMockRecorder is the mock recorder for MockReadOnlyAdminTX
type MockReadOnlyAdminTXMockRecorder struct {
	mock *MockReadOnlyAdminTX
}

// NewMockReadOnlyAdminTX creates a new mock instance
func NewMockReadOnlyAdminTX(ctrl *gomock.Controller) *MockReadOnlyAdminTX {
	mock := &MockReadOnlyAdminTX{ctrl: ctrl}
	mock.recorder = &MockReadOnlyAdminTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockReadOnlyAdminTX) EXPECT() *MockReadOnlyAdminTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockReadOnlyAdminTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockReadOnlyAdminTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockReadOnlyAdminTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockReadOnlyAdminTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// GetTree mocks base method
func (_m *MockReadOnlyAdminTX) GetTree(_param0 context.Context, _param1 int64) (*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "GetTree", _param0, _param1)
	ret0, _ := ret[0].(*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree
func (_mr *MockReadOnlyAdminTXMockRecorder) GetTree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTree", arg0, arg1)
}

// IsClosed mocks base method
func (_m *MockReadOnlyAdminTX) IsClosed() bool {
	ret := _m.ctrl.Call(_m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (_mr *MockReadOnlyAdminTXMockRecorder) IsClosed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsClosed")
}

// ListTreeIDs mocks base method
func (_m *MockReadOnlyAdminTX) ListTreeIDs(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "ListTreeIDs", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeIDs indicates an expected call of ListTreeIDs
func (_mr *MockReadOnlyAdminTXMockRecorder) ListTreeIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTreeIDs", arg0)
}

// ListTrees mocks base method
func (_m *MockReadOnlyAdminTX) ListTrees(_param0 context.Context) ([]*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "ListTrees", _param0)
	ret0, _ := ret[0].([]*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrees indicates an expected call of ListTrees
func (_mr *MockReadOnlyAdminTXMockRecorder) ListTrees(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTrees", arg0)
}

// Rollback mocks base method
func (_m *MockReadOnlyAdminTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockReadOnlyAdminTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// MockReadOnlyLogTX is a mock of ReadOnlyLogTX interface
type MockReadOnlyLogTX struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyLogTXMockRecorder
}

// MockReadOnlyLogTXMockRecorder is the mock recorder for MockReadOnlyLogTX
type MockReadOnlyLogTXMockRecorder struct {
	mock *MockReadOnlyLogTX
}

// NewMockReadOnlyLogTX creates a new mock instance
func NewMockReadOnlyLogTX(ctrl *gomock.Controller) *MockReadOnlyLogTX {
	mock := &MockReadOnlyLogTX{ctrl: ctrl}
	mock.recorder = &MockReadOnlyLogTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockReadOnlyLogTX) EXPECT() *MockReadOnlyLogTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockReadOnlyLogTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockReadOnlyLogTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockReadOnlyLogTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockReadOnlyLogTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// GetActiveLogIDs mocks base method
func (_m *MockReadOnlyLogTX) GetActiveLogIDs(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "GetActiveLogIDs", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLogIDs indicates an expected call of GetActiveLogIDs
func (_mr *MockReadOnlyLogTXMockRecorder) GetActiveLogIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveLogIDs", arg0)
}

// GetActiveLogIDsWithPendingWork mocks base method
func (_m *MockReadOnlyLogTX) GetActiveLogIDsWithPendingWork(_param0 context.Context) ([]int64, error) {
	ret := _m.ctrl.Call(_m, "GetActiveLogIDsWithPendingWork", _param0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLogIDsWithPendingWork indicates an expected call of GetActiveLogIDsWithPendingWork
func (_mr *MockReadOnlyLogTXMockRecorder) GetActiveLogIDsWithPendingWork(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveLogIDsWithPendingWork", arg0)
}

// Rollback mocks base method
func (_m *MockReadOnlyLogTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockReadOnlyLogTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// MockReadOnlyLogTreeTX is a mock of ReadOnlyLogTreeTX interface
type MockReadOnlyLogTreeTX struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyLogTreeTXMockRecorder
}

// MockReadOnlyLogTreeTXMockRecorder is the mock recorder for MockReadOnlyLogTreeTX
type MockReadOnlyLogTreeTXMockRecorder struct {
	mock *MockReadOnlyLogTreeTX
}

// NewMockReadOnlyLogTreeTX creates a new mock instance
func NewMockReadOnlyLogTreeTX(ctrl *gomock.Controller) *MockReadOnlyLogTreeTX {
	mock := &MockReadOnlyLogTreeTX{ctrl: ctrl}
	mock.recorder = &MockReadOnlyLogTreeTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockReadOnlyLogTreeTX) EXPECT() *MockReadOnlyLogTreeTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockReadOnlyLogTreeTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockReadOnlyLogTreeTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockReadOnlyLogTreeTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockReadOnlyLogTreeTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// GetLeavesByHash mocks base method
func (_m *MockReadOnlyLogTreeTX) GetLeavesByHash(_param0 context.Context, _param1 [][]byte, _param2 bool) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "GetLeavesByHash", _param0, _param1, _param2)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByHash indicates an expected call of GetLeavesByHash
func (_mr *MockReadOnlyLogTreeTXMockRecorder) GetLeavesByHash(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLeavesByHash", arg0, arg1, arg2)
}

// GetLeavesByIndex mocks base method
func (_m *MockReadOnlyLogTreeTX) GetLeavesByIndex(_param0 context.Context, _param1 []int64) ([]*trillian.LogLeaf, error) {
	ret := _m.ctrl.Call(_m, "GetLeavesByIndex", _param0, _param1)
	ret0, _ := ret[0].([]*trillian.LogLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByIndex indicates an expected call of GetLeavesByIndex
func (_mr *MockReadOnlyLogTreeTXMockRecorder) GetLeavesByIndex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLeavesByIndex", arg0, arg1)
}

// GetMerkleNodes mocks base method
func (_m *MockReadOnlyLogTreeTX) GetMerkleNodes(_param0 context.Context, _param1 int64, _param2 []NodeID) ([]Node, error) {
	ret := _m.ctrl.Call(_m, "GetMerkleNodes", _param0, _param1, _param2)
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleNodes indicates an expected call of GetMerkleNodes
func (_mr *MockReadOnlyLogTreeTXMockRecorder) GetMerkleNodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerkleNodes", arg0, arg1, arg2)
}

// GetSequencedLeafCount mocks base method
func (_m *MockReadOnlyLogTreeTX) GetSequencedLeafCount(_param0 context.Context) (int64, error) {
	ret := _m.ctrl.Call(_m, "GetSequencedLeafCount", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequencedLeafCount indicates an expected call of GetSequencedLeafCount
func (_mr *MockReadOnlyLogTreeTXMockRecorder) GetSequencedLeafCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSequencedLeafCount", arg0)
}

// IsOpen mocks base method
func (_m *MockReadOnlyLogTreeTX) IsOpen() bool {
	ret := _m.ctrl.Call(_m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (_mr *MockReadOnlyLogTreeTXMockRecorder) IsOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpen")
}

// LatestSignedLogRoot mocks base method
func (_m *MockReadOnlyLogTreeTX) LatestSignedLogRoot(_param0 context.Context) (trillian.SignedLogRoot, error) {
	ret := _m.ctrl.Call(_m, "LatestSignedLogRoot", _param0)
	ret0, _ := ret[0].(trillian.SignedLogRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSignedLogRoot indicates an expected call of LatestSignedLogRoot
func (_mr *MockReadOnlyLogTreeTXMockRecorder) LatestSignedLogRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestSignedLogRoot", arg0)
}

// ReadRevision mocks base method
func (_m *MockReadOnlyLogTreeTX) ReadRevision() int64 {
	ret := _m.ctrl.Call(_m, "ReadRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ReadRevision indicates an expected call of ReadRevision
func (_mr *MockReadOnlyLogTreeTXMockRecorder) ReadRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadRevision")
}

// Rollback mocks base method
func (_m *MockReadOnlyLogTreeTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockReadOnlyLogTreeTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// MockReadOnlyMapTreeTX is a mock of ReadOnlyMapTreeTX interface
type MockReadOnlyMapTreeTX struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyMapTreeTXMockRecorder
}

// MockReadOnlyMapTreeTXMockRecorder is the mock recorder for MockReadOnlyMapTreeTX
type MockReadOnlyMapTreeTXMockRecorder struct {
	mock *MockReadOnlyMapTreeTX
}

// NewMockReadOnlyMapTreeTX creates a new mock instance
func NewMockReadOnlyMapTreeTX(ctrl *gomock.Controller) *MockReadOnlyMapTreeTX {
	mock := &MockReadOnlyMapTreeTX{ctrl: ctrl}
	mock.recorder = &MockReadOnlyMapTreeTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockReadOnlyMapTreeTX) EXPECT() *MockReadOnlyMapTreeTXMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockReadOnlyMapTreeTX) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockReadOnlyMapTreeTXMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Commit mocks base method
func (_m *MockReadOnlyMapTreeTX) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockReadOnlyMapTreeTXMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// Get mocks base method
func (_m *MockReadOnlyMapTreeTX) Get(_param0 context.Context, _param1 int64, _param2 [][]byte) ([]trillian.MapLeaf, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1, _param2)
	ret0, _ := ret[0].([]trillian.MapLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockReadOnlyMapTreeTXMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

// GetMerkleNodes mocks base method
func (_m *MockReadOnlyMapTreeTX) GetMerkleNodes(_param0 context.Context, _param1 int64, _param2 []NodeID) ([]Node, error) {
	ret := _m.ctrl.Call(_m, "GetMerkleNodes", _param0, _param1, _param2)
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleNodes indicates an expected call of GetMerkleNodes
func (_mr *MockReadOnlyMapTreeTXMockRecorder) GetMerkleNodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerkleNodes", arg0, arg1, arg2)
}

// GetSignedMapRoot mocks base method
func (_m *MockReadOnlyMapTreeTX) GetSignedMapRoot(_param0 context.Context, _param1 int64) (trillian.SignedMapRoot, error) {
	ret := _m.ctrl.Call(_m, "GetSignedMapRoot", _param0, _param1)
	ret0, _ := ret[0].(trillian.SignedMapRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedMapRoot indicates an expected call of GetSignedMapRoot
func (_mr *MockReadOnlyMapTreeTXMockRecorder) GetSignedMapRoot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSignedMapRoot", arg0, arg1)
}

// IsOpen mocks base method
func (_m *MockReadOnlyMapTreeTX) IsOpen() bool {
	ret := _m.ctrl.Call(_m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (_mr *MockReadOnlyMapTreeTXMockRecorder) IsOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpen")
}

// LatestSignedMapRoot mocks base method
func (_m *MockReadOnlyMapTreeTX) LatestSignedMapRoot(_param0 context.Context) (trillian.SignedMapRoot, error) {
	ret := _m.ctrl.Call(_m, "LatestSignedMapRoot", _param0)
	ret0, _ := ret[0].(trillian.SignedMapRoot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSignedMapRoot indicates an expected call of LatestSignedMapRoot
func (_mr *MockReadOnlyMapTreeTXMockRecorder) LatestSignedMapRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestSignedMapRoot", arg0)
}

// ReadRevision mocks base method
func (_m *MockReadOnlyMapTreeTX) ReadRevision() int64 {
	ret := _m.ctrl.Call(_m, "ReadRevision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ReadRevision indicates an expected call of ReadRevision
func (_mr *MockReadOnlyMapTreeTXMockRecorder) ReadRevision() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadRevision")
}

// Rollback mocks base method
func (_m *MockReadOnlyMapTreeTX) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockReadOnlyMapTreeTXMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}
