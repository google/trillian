// Code generated by protoc-gen-go.
// source: github.com/google/trillian/storage/storage.proto
// DO NOT EDIT!

/*
Package storage is a generated protocol buffer package.

It is generated from these files:
	github.com/google/trillian/storage/storage.proto

It has these top-level messages:
	NodeIDProto
	SubtreeProto
*/
package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeIDProto is the serialized form of NodeID. It's used only for persistence in storage.
// As this is long-term we prefer not to use a Go specific format.
type NodeIDProto struct {
	Path          []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	PrefixLenBits int32  `protobuf:"varint,2,opt,name=prefix_len_bits,json=prefixLenBits" json:"prefix_len_bits,omitempty"`
}

func (m *NodeIDProto) Reset()                    { *m = NodeIDProto{} }
func (m *NodeIDProto) String() string            { return proto.CompactTextString(m) }
func (*NodeIDProto) ProtoMessage()               {}
func (*NodeIDProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// SubtreeProto contains nodes of a subtree.
type SubtreeProto struct {
	// subtree's prefix (must be a multiple of 8 bits)
	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// subtree's depth
	Depth int32 `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
	// map of suffix (within subtree) to node hash
	Nodes map[string][]byte `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SubtreeProto) Reset()                    { *m = SubtreeProto{} }
func (m *SubtreeProto) String() string            { return proto.CompactTextString(m) }
func (*SubtreeProto) ProtoMessage()               {}
func (*SubtreeProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubtreeProto) GetNodes() map[string][]byte {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeIDProto)(nil), "storage.NodeIDProto")
	proto.RegisterType((*SubtreeProto)(nil), "storage.SubtreeProto")
}

func init() { proto.RegisterFile("github.com/google/trillian/storage/storage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xe9, 0x6a, 0x27, 0xde, 0x55, 0x94, 0x20, 0x52, 0x7c, 0x2a, 0x7b, 0x90, 0x3d, 0xb5,
	0xa2, 0x20, 0xc3, 0x47, 0xd1, 0x87, 0x81, 0x88, 0xc4, 0x1f, 0x30, 0x5a, 0x77, 0xed, 0x82, 0x31,
	0x09, 0xc9, 0xad, 0xb8, 0x3f, 0xe5, 0x6f, 0x34, 0x4d, 0x3a, 0xf4, 0x29, 0xf7, 0x9c, 0x5c, 0xce,
	0x77, 0xb8, 0x70, 0xd5, 0x09, 0xda, 0xf6, 0x6d, 0xf5, 0xa6, 0x3f, 0xeb, 0x4e, 0xeb, 0x4e, 0x62,
	0x4d, 0x56, 0x48, 0x29, 0x1a, 0x55, 0x3b, 0xd2, 0xb6, 0xe9, 0x70, 0xff, 0x56, 0xc6, 0x6a, 0xd2,
	0xec, 0x70, 0x94, 0xf3, 0x15, 0xcc, 0x9e, 0xf5, 0x06, 0x57, 0x0f, 0x2f, 0xc1, 0x67, 0x70, 0x60,
	0x1a, 0xda, 0x16, 0x49, 0x99, 0x2c, 0x72, 0x1e, 0x66, 0x76, 0x09, 0x27, 0xc6, 0xe2, 0xbb, 0xf8,
	0x5e, 0x4b, 0x54, 0xeb, 0x56, 0x90, 0x2b, 0x26, 0xfe, 0x3b, 0xe3, 0xc7, 0xd1, 0x7e, 0x42, 0x75,
	0xef, 0xcd, 0xf9, 0x4f, 0x02, 0xf9, 0x6b, 0xdf, 0x92, 0x45, 0x8c, 0x61, 0xe7, 0x30, 0x8d, 0x1b,
	0x63, 0xdc, 0xa8, 0xd8, 0x19, 0x64, 0x1b, 0x34, 0x9e, 0x12, 0x63, 0xa2, 0x60, 0xb7, 0x90, 0x29,
	0xdf, 0xc4, 0x15, 0x69, 0x99, 0x2e, 0x66, 0xd7, 0x65, 0xb5, 0x6f, 0xfc, 0x3f, 0xb3, 0x1a, 0xca,
	0xba, 0x47, 0x45, 0x76, 0xc7, 0xe3, 0xfa, 0xc5, 0x12, 0xe0, 0xcf, 0x64, 0xa7, 0x90, 0x7e, 0xe0,
	0x2e, 0x00, 0x8f, 0xf8, 0x30, 0x0e, 0xb4, 0xaf, 0x46, 0xf6, 0x18, 0x68, 0x39, 0x8f, 0xe2, 0x6e,
	0xb2, 0x4c, 0xda, 0x69, 0xb8, 0xc5, 0xcd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xc5, 0xdb,
	0x1f, 0x3f, 0x01, 0x00, 0x00,
}
