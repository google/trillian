// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package storagepb;

// This file contains protos used only by storage. They are not exported via any of
// our public APIs.

// NodeIDProto is the serialized form of NodeID. It's used only for persistence in storage.
// As this is long-term we prefer not to use a Go specific format.
message NodeIDProto {
  bytes path = 1;
  int32 prefix_len_bits = 2;
}

// SubtreeProto contains nodes of a subtree.
message SubtreeProto {
  // subtree's prefix (must be a multiple of 8 bits)
  bytes prefix = 1;
  // subtree's depth
  int32 depth = 2;

  bytes root_hash = 3;

  // map of suffix (within subtree) to subtree-leaf node hash
  map<string, bytes> leaves = 4;

  // Map of suffix (within subtree) to subtree-internal node hash.
  // This structure is usually used in RAM as a cache, the internal nodes of
  // the subtree are not generally stored. However internal nodes are stored for
  // partially filled log subtrees.
  map<string, bytes> internal_nodes = 5;
  // Used as a crosscheck on the internal node map by recording its expected size after
  // loading and repopulation.
  uint32 internal_node_count = 6;
}

message LogStorageConfig {
  // num_unseq_buckets defines the length of the unsequenced time ring buffer.
  // This value must *never* be reduced for any provisioned tree while there is
  // unsequenced work for it remaining in the queue.
  //
  // This value should be >= 1, and there's probably not much benefit in
  // raising it past about 4 but this is currently unexplored territory.
  int64 num_unseq_buckets = 1;

  // num_merkle_buckets defines the number of individual buckets below each
  // unsequenced ring bucket.
  // This value may be changed at any time (so long as you understand the
  // impact it'll have on integration performace!)
  //
  // This value must lie in the range [1..256]
  int64 num_merkle_buckets = 2;
  // If this is set to false then bucketing is off and the bucket stored will
  // always be zero. Otherwise it's enabled and the rules listed above apply.
  bool enable_buckets = 3;
}