// Code generated by protoc-gen-go.
// source: trillian.proto
// DO NOT EDIT!

package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SignatureAlgorithm int32

const (
	SignatureAlgorithm_ECDSA SignatureAlgorithm = 0
	SignatureAlgorithm_RSA   SignatureAlgorithm = 1
)

var SignatureAlgorithm_name = map[int32]string{
	0: "ECDSA",
	1: "RSA",
}
var SignatureAlgorithm_value = map[string]int32{
	"ECDSA": 0,
	"RSA":   1,
}

func (x SignatureAlgorithm) Enum() *SignatureAlgorithm {
	p := new(SignatureAlgorithm)
	*p = x
	return p
}
func (x SignatureAlgorithm) String() string {
	return proto.EnumName(SignatureAlgorithm_name, int32(x))
}
func (x *SignatureAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SignatureAlgorithm_value, data, "SignatureAlgorithm")
	if err != nil {
		return err
	}
	*x = SignatureAlgorithm(value)
	return nil
}
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type HashAlgorithm int32

const (
	HashAlgorithm_SHA256 HashAlgorithm = 0
)

var HashAlgorithm_name = map[int32]string{
	0: "SHA256",
}
var HashAlgorithm_value = map[string]int32{
	"SHA256": 0,
}

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}
func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}
func (x *HashAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HashAlgorithm_value, data, "HashAlgorithm")
	if err != nil {
		return err
	}
	*x = HashAlgorithm(value)
	return nil
}
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type DigitallySigned struct {
	SignatureAlgorithm *SignatureAlgorithm `protobuf:"varint,1,opt,name=signature_algorithm,enum=trillian.SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	HashAlgorithm      *HashAlgorithm      `protobuf:"varint,2,opt,name=hash_algorithm,enum=trillian.HashAlgorithm" json:"hash_algorithm,omitempty"`
	Signature          []byte              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *DigitallySigned) Reset()                    { *m = DigitallySigned{} }
func (m *DigitallySigned) String() string            { return proto.CompactTextString(m) }
func (*DigitallySigned) ProtoMessage()               {}
func (*DigitallySigned) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DigitallySigned) GetSignatureAlgorithm() SignatureAlgorithm {
	if m != nil && m.SignatureAlgorithm != nil {
		return *m.SignatureAlgorithm
	}
	return SignatureAlgorithm_ECDSA
}

func (m *DigitallySigned) GetHashAlgorithm() HashAlgorithm {
	if m != nil && m.HashAlgorithm != nil {
		return *m.HashAlgorithm
	}
	return HashAlgorithm_SHA256
}

func (m *DigitallySigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignedEntryTimestamp struct {
	TimestampNanos   *int64           `protobuf:"varint,1,opt,name=timestamp_nanos" json:"timestamp_nanos,omitempty"`
	LogId            []byte           `protobuf:"bytes,2,opt,name=log_id" json:"log_id,omitempty"`
	Signature        *DigitallySigned `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SignedEntryTimestamp) Reset()                    { *m = SignedEntryTimestamp{} }
func (m *SignedEntryTimestamp) String() string            { return proto.CompactTextString(m) }
func (*SignedEntryTimestamp) ProtoMessage()               {}
func (*SignedEntryTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SignedEntryTimestamp) GetTimestampNanos() int64 {
	if m != nil && m.TimestampNanos != nil {
		return *m.TimestampNanos
	}
	return 0
}

func (m *SignedEntryTimestamp) GetLogId() []byte {
	if m != nil {
		return m.LogId
	}
	return nil
}

func (m *SignedEntryTimestamp) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignedLogRoot represents a commitment by a Log to a particular tree.
type SignedLogRoot struct {
	// epoch nanoseconds, good until 2500ish
	TimestampNanos *int64 `protobuf:"varint,1,opt,name=timestamp_nanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte `protobuf:"bytes,2,opt,name=root_hash" json:"root_hash,omitempty"`
	// TreeSize is the number of entries in the tree.
	TreeSize *int64 `protobuf:"varint,3,opt,name=tree_size" json:"tree_size,omitempty"`
	// TODO(al): define serialised format for the signature scheme.
	Signature        *DigitallySigned `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	LogId            []byte           `protobuf:"bytes,5,opt,name=log_id" json:"log_id,omitempty"`
	TreeRevision     *int64           `protobuf:"varint,6,opt,name=tree_revision" json:"tree_revision,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SignedLogRoot) Reset()                    { *m = SignedLogRoot{} }
func (m *SignedLogRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedLogRoot) ProtoMessage()               {}
func (*SignedLogRoot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SignedLogRoot) GetTimestampNanos() int64 {
	if m != nil && m.TimestampNanos != nil {
		return *m.TimestampNanos
	}
	return 0
}

func (m *SignedLogRoot) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *SignedLogRoot) GetTreeSize() int64 {
	if m != nil && m.TreeSize != nil {
		return *m.TreeSize
	}
	return 0
}

func (m *SignedLogRoot) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedLogRoot) GetLogId() []byte {
	if m != nil {
		return m.LogId
	}
	return nil
}

func (m *SignedLogRoot) GetTreeRevision() int64 {
	if m != nil && m.TreeRevision != nil {
		return *m.TreeRevision
	}
	return 0
}

// SignedMapRoot represents a commitment by a Map to a particular tree.
type SignedMapRoot struct {
	TimestampNanos *int64 `protobuf:"varint,1,opt,name=timestamp_nanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte `protobuf:"bytes,2,opt,name=root_hash" json:"root_hash,omitempty"`
	// TODO(al) add Metadata e.g. list of Log STHs included under a Map's Signed Root etc.?
	// TODO(al): define serialised format for the signature scheme.
	Signature        *DigitallySigned `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	MapId            []byte           `protobuf:"bytes,4,opt,name=map_id" json:"map_id,omitempty"`
	MapRevision      *int64           `protobuf:"varint,5,opt,name=map_revision" json:"map_revision,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SignedMapRoot) Reset()                    { *m = SignedMapRoot{} }
func (m *SignedMapRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedMapRoot) ProtoMessage()               {}
func (*SignedMapRoot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SignedMapRoot) GetTimestampNanos() int64 {
	if m != nil && m.TimestampNanos != nil {
		return *m.TimestampNanos
	}
	return 0
}

func (m *SignedMapRoot) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *SignedMapRoot) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMapRoot) GetMapId() []byte {
	if m != nil {
		return m.MapId
	}
	return nil
}

func (m *SignedMapRoot) GetMapRevision() int64 {
	if m != nil && m.MapRevision != nil {
		return *m.MapRevision
	}
	return 0
}

func init() {
	proto.RegisterType((*DigitallySigned)(nil), "trillian.DigitallySigned")
	proto.RegisterType((*SignedEntryTimestamp)(nil), "trillian.SignedEntryTimestamp")
	proto.RegisterType((*SignedLogRoot)(nil), "trillian.SignedLogRoot")
	proto.RegisterType((*SignedMapRoot)(nil), "trillian.SignedMapRoot")
	proto.RegisterEnum("trillian.SignatureAlgorithm", SignatureAlgorithm_name, SignatureAlgorithm_value)
	proto.RegisterEnum("trillian.HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
}

func init() { proto.RegisterFile("trillian.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xfa, 0x30,
	0x18, 0xc7, 0xd9, 0x6f, 0xc0, 0x4f, 0x1e, 0x61, 0x60, 0xc5, 0x80, 0xd1, 0x83, 0xd9, 0x89, 0x10,
	0x83, 0x09, 0x89, 0x26, 0x1e, 0x89, 0x90, 0x70, 0xd0, 0x0b, 0xf3, 0xbe, 0x34, 0xa1, 0x19, 0x4d,
	0xba, 0x76, 0x69, 0xab, 0x09, 0xbe, 0x09, 0x7d, 0x0f, 0xbe, 0x51, 0xdb, 0xe2, 0x36, 0x20, 0x1a,
	0xc3, 0xed, 0x79, 0xb6, 0xef, 0x9f, 0x4f, 0xb7, 0x42, 0xa0, 0x25, 0x65, 0x8c, 0x62, 0x3e, 0xca,
	0xa4, 0xd0, 0x02, 0x1d, 0xe5, 0x7b, 0xf8, 0xe1, 0x41, 0x7b, 0x4a, 0x13, 0xaa, 0x31, 0x63, 0xeb,
	0x88, 0x26, 0x9c, 0x2c, 0xd1, 0x3d, 0x9c, 0x2a, 0x33, 0x61, 0xfd, 0x22, 0x49, 0x8c, 0x59, 0x22,
	0x24, 0xd5, 0xab, 0xb4, 0xef, 0x5d, 0x79, 0x83, 0x60, 0x7c, 0x39, 0x2a, 0xb2, 0xa2, 0x5c, 0x34,
	0xc9, 0x35, 0xe8, 0x06, 0x82, 0x15, 0x56, 0xab, 0x2d, 0xd7, 0x3f, 0xe7, 0xea, 0x95, 0xae, 0xb9,
	0x79, 0x5f, 0x1a, 0x4e, 0xa0, 0x51, 0x74, 0xf5, 0x7d, 0xa3, 0x6d, 0x86, 0x29, 0x74, 0x37, 0x20,
	0x33, 0xae, 0xe5, 0xfa, 0x99, 0xa6, 0x44, 0x69, 0x9c, 0x66, 0xa8, 0x07, 0x6d, 0x9d, 0x2f, 0x31,
	0xc7, 0x5c, 0x28, 0x87, 0xe4, 0xa3, 0x00, 0xea, 0x4c, 0x24, 0x31, 0x5d, 0xba, 0xb2, 0x26, 0xba,
	0xde, 0xcf, 0x3c, 0x1e, 0x9f, 0x97, 0xfd, 0x7b, 0xa7, 0x0d, 0x3f, 0x3d, 0x68, 0x6d, 0xc6, 0x47,
	0x91, 0x2c, 0x84, 0xd0, 0xbf, 0x17, 0x19, 0x58, 0x69, 0x04, 0xb1, 0x3d, 0xe2, 0x77, 0x97, 0x79,
	0xa4, 0x25, 0x21, 0xb1, 0xa2, 0x6f, 0x9b, 0x2e, 0x7f, 0xb7, 0xbe, 0xfa, 0x47, 0xfd, 0x16, 0x7c,
	0xcd, 0x05, 0x9e, 0x41, 0xcb, 0x05, 0x4a, 0xf2, 0x4a, 0x15, 0x15, 0xbc, 0x5f, 0xb7, 0xa1, 0xe1,
	0x7b, 0x41, 0xf9, 0x84, 0xb3, 0x83, 0x29, 0x0f, 0xfa, 0x22, 0x16, 0x29, 0xc5, 0x99, 0x45, 0xaa,
	0x3a, 0x77, 0x17, 0x9a, 0x76, 0x2f, 0x88, 0x2c, 0xa8, 0x3f, 0x1c, 0x00, 0xfa, 0xe1, 0x02, 0x34,
	0xa0, 0x36, 0x7b, 0x98, 0x46, 0x93, 0x4e, 0x05, 0xfd, 0x07, 0x7f, 0x61, 0x06, 0x6f, 0x78, 0x01,
	0xad, 0xdd, 0x9f, 0x0e, 0x50, 0x8f, 0xe6, 0x93, 0xf1, 0xed, 0x5d, 0xa7, 0xf2, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x15, 0xd1, 0xc8, 0xf9, 0x9b, 0x02, 0x00, 0x00,
}
