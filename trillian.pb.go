// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trillian.proto

package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keyspb "github.com/google/trillian/crypto/keyspb"
import sigpb "github.com/google/trillian/crypto/sigpb"
import google_protobuf2 "github.com/golang/protobuf/ptypes/any"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LogRootFormat specifies the fields that are covered by the
// SignedLogRoot signature, as well as their ordering and formats.
type LogRootFormat int32

const (
	LogRootFormat_LOG_ROOT_FORMAT_UNKNOWN LogRootFormat = 0
	LogRootFormat_LOG_ROOT_FORMAT_V1      LogRootFormat = 1
)

var LogRootFormat_name = map[int32]string{
	0: "LOG_ROOT_FORMAT_UNKNOWN",
	1: "LOG_ROOT_FORMAT_V1",
}
var LogRootFormat_value = map[string]int32{
	"LOG_ROOT_FORMAT_UNKNOWN": 0,
	"LOG_ROOT_FORMAT_V1":      1,
}

func (x LogRootFormat) String() string {
	return proto.EnumName(LogRootFormat_name, int32(x))
}
func (LogRootFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// MapRootFormat specifies the fields that are covered by the
// SignedMapRoot signature, as well as their ordering and formats.
type MapRootFormat int32

const (
	MapRootFormat_MAP_ROOT_FORMAT_UNKNOWN MapRootFormat = 0
	MapRootFormat_MAP_ROOT_FORMAT_V1      MapRootFormat = 1
)

var MapRootFormat_name = map[int32]string{
	0: "MAP_ROOT_FORMAT_UNKNOWN",
	1: "MAP_ROOT_FORMAT_V1",
}
var MapRootFormat_value = map[string]int32{
	"MAP_ROOT_FORMAT_UNKNOWN": 0,
	"MAP_ROOT_FORMAT_V1":      1,
}

func (x MapRootFormat) String() string {
	return proto.EnumName(MapRootFormat_name, int32(x))
}
func (MapRootFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

// Defines the way empty / node / leaf hashes are constructed incorporating
// preimage protection, which can be application specific.
type HashStrategy int32

const (
	// Hash strategy cannot be determined. Included to enable detection of
	// mismatched proto versions being used. Represents an invalid value.
	HashStrategy_UNKNOWN_HASH_STRATEGY HashStrategy = 0
	// Certificate Transparency strategy: leaf hash prefix = 0x00, node prefix =
	// 0x01, empty hash is digest([]byte{}), as defined in the specification.
	HashStrategy_RFC6962_SHA256 HashStrategy = 1
	// Sparse Merkle Tree strategy:  leaf hash prefix = 0x00, node prefix = 0x01,
	// empty branch is recursively computed from empty leaf nodes.
	// NOT secure in a multi tree environment. For testing only.
	HashStrategy_TEST_MAP_HASHER HashStrategy = 2
	// Append-only log strategy where leaf nodes are defined as the ObjectHash.
	// All other properties are equal to RFC6962_SHA256.
	HashStrategy_OBJECT_RFC6962_SHA256 HashStrategy = 3
	// The CONIKS sparse tree hasher with SHA512_256 as the hash algorithm.
	HashStrategy_CONIKS_SHA512_256 HashStrategy = 4
)

var HashStrategy_name = map[int32]string{
	0: "UNKNOWN_HASH_STRATEGY",
	1: "RFC6962_SHA256",
	2: "TEST_MAP_HASHER",
	3: "OBJECT_RFC6962_SHA256",
	4: "CONIKS_SHA512_256",
}
var HashStrategy_value = map[string]int32{
	"UNKNOWN_HASH_STRATEGY": 0,
	"RFC6962_SHA256":        1,
	"TEST_MAP_HASHER":       2,
	"OBJECT_RFC6962_SHA256": 3,
	"CONIKS_SHA512_256":     4,
}

func (x HashStrategy) String() string {
	return proto.EnumName(HashStrategy_name, int32(x))
}
func (HashStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

// State of the tree.
type TreeState int32

const (
	// Tree state cannot be determined. Included to enable detection of
	// mismatched proto versions being used. Represents an invalid value.
	TreeState_UNKNOWN_TREE_STATE TreeState = 0
	// Active trees are able to respond to both read and write requests.
	TreeState_ACTIVE TreeState = 1
	// Frozen trees are only able to respond to read requests, writing to a frozen
	// tree is forbidden. Trees should not be frozen when there are entries
	// in the queue that have not yet been integrated. See the DRAINING
	// state for this case.
	TreeState_FROZEN TreeState = 2
	// Deprecated in favor of Tree.deleted.
	TreeState_DEPRECATED_SOFT_DELETED TreeState = 3
	// Deprecated in favor of Tree.deleted.
	TreeState_DEPRECATED_HARD_DELETED TreeState = 4
	// A tree that is draining will continue to integrate queued entries.
	// No new entries should be accepted.
	TreeState_DRAINING TreeState = 5
)

var TreeState_name = map[int32]string{
	0: "UNKNOWN_TREE_STATE",
	1: "ACTIVE",
	2: "FROZEN",
	3: "DEPRECATED_SOFT_DELETED",
	4: "DEPRECATED_HARD_DELETED",
	5: "DRAINING",
}
var TreeState_value = map[string]int32{
	"UNKNOWN_TREE_STATE":      0,
	"ACTIVE":                  1,
	"FROZEN":                  2,
	"DEPRECATED_SOFT_DELETED": 3,
	"DEPRECATED_HARD_DELETED": 4,
	"DRAINING":                5,
}

func (x TreeState) String() string {
	return proto.EnumName(TreeState_name, int32(x))
}
func (TreeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

// Type of the tree.
type TreeType int32

const (
	// Tree type cannot be determined. Included to enable detection of mismatched
	// proto versions being used. Represents an invalid value.
	TreeType_UNKNOWN_TREE_TYPE TreeType = 0
	// Tree represents a verifiable log.
	TreeType_LOG TreeType = 1
	// Tree represents a verifiable map.
	TreeType_MAP TreeType = 2
	// Tree represents a verifiable pre-ordered log, i.e., a log whose entries are
	// placed according to sequence numbers assigned outside of Trillian.
	// TODO(pavelkalinnikov): Support this type.
	TreeType_PREORDERED_LOG TreeType = 3
)

var TreeType_name = map[int32]string{
	0: "UNKNOWN_TREE_TYPE",
	1: "LOG",
	2: "MAP",
	3: "PREORDERED_LOG",
}
var TreeType_value = map[string]int32{
	"UNKNOWN_TREE_TYPE": 0,
	"LOG":               1,
	"MAP":               2,
	"PREORDERED_LOG":    3,
}

func (x TreeType) String() string {
	return proto.EnumName(TreeType_name, int32(x))
}
func (TreeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

// Represents a tree, which may be either a verifiable log or map.
// Readonly attributes are assigned at tree creation, after which they may not
// be modified.
//
// Note: Many APIs within the rest of the code require these objects to
// be provided. For safety they should be obtained via Admin API calls and
// not created dynamically.
type Tree struct {
	// ID of the tree.
	// Readonly.
	TreeId int64 `protobuf:"varint,1,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	// State of the tree.
	// Trees are active after creation. At any point the tree may transition
	// between ACTIVE and FROZEN.
	TreeState TreeState `protobuf:"varint,2,opt,name=tree_state,json=treeState,enum=trillian.TreeState" json:"tree_state,omitempty"`
	// Type of the tree.
	// Readonly.
	TreeType TreeType `protobuf:"varint,3,opt,name=tree_type,json=treeType,enum=trillian.TreeType" json:"tree_type,omitempty"`
	// Hash strategy to be used by the tree.
	// Readonly.
	HashStrategy HashStrategy `protobuf:"varint,4,opt,name=hash_strategy,json=hashStrategy,enum=trillian.HashStrategy" json:"hash_strategy,omitempty"`
	// Hash algorithm to be used by the tree.
	// Readonly.
	HashAlgorithm sigpb.DigitallySigned_HashAlgorithm `protobuf:"varint,5,opt,name=hash_algorithm,json=hashAlgorithm,enum=sigpb.DigitallySigned_HashAlgorithm" json:"hash_algorithm,omitempty"`
	// Signature algorithm to be used by the tree.
	// Readonly.
	SignatureAlgorithm sigpb.DigitallySigned_SignatureAlgorithm `protobuf:"varint,6,opt,name=signature_algorithm,json=signatureAlgorithm,enum=sigpb.DigitallySigned_SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	// Display name of the tree.
	// Optional.
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Description of the tree,
	// Optional.
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	// Identifies the private key used for signing tree heads and entry
	// timestamps.
	// This can be any type of message to accommodate different key management
	// systems, e.g. PEM files, HSMs, etc.
	// Private keys are write-only: they're never returned by RPCs.
	// The private_key message can be changed after a tree is created, but the
	// underlying key must remain the same - this is to enable migrating a key
	// from one provider to another.
	PrivateKey *google_protobuf2.Any `protobuf:"bytes,12,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// Storage-specific settings.
	// Varies according to the storage implementation backing Trillian.
	StorageSettings *google_protobuf2.Any `protobuf:"bytes,13,opt,name=storage_settings,json=storageSettings" json:"storage_settings,omitempty"`
	// The public key used for verifying tree heads and entry timestamps.
	// Readonly.
	PublicKey *keyspb.PublicKey `protobuf:"bytes,14,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// Interval after which a new signed root is produced even if there have been
	// no submission.  If zero, this behavior is disabled.
	MaxRootDuration *google_protobuf3.Duration `protobuf:"bytes,15,opt,name=max_root_duration,json=maxRootDuration" json:"max_root_duration,omitempty"`
	// Time of tree creation.
	// Readonly.
	CreateTime *google_protobuf1.Timestamp `protobuf:"bytes,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Time of last tree update.
	// Readonly (automatically assigned on updates).
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// If true, the tree has been deleted.
	// Deleted trees may be undeleted during a certain time window, after which
	// they're permanently deleted (and unrecoverable).
	// Readonly.
	Deleted bool `protobuf:"varint,19,opt,name=deleted" json:"deleted,omitempty"`
	// Time of tree deletion, if any.
	// Readonly.
	DeleteTime *google_protobuf1.Timestamp `protobuf:"bytes,20,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
}

func (m *Tree) Reset()                    { *m = Tree{} }
func (m *Tree) String() string            { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()               {}
func (*Tree) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Tree) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *Tree) GetTreeState() TreeState {
	if m != nil {
		return m.TreeState
	}
	return TreeState_UNKNOWN_TREE_STATE
}

func (m *Tree) GetTreeType() TreeType {
	if m != nil {
		return m.TreeType
	}
	return TreeType_UNKNOWN_TREE_TYPE
}

func (m *Tree) GetHashStrategy() HashStrategy {
	if m != nil {
		return m.HashStrategy
	}
	return HashStrategy_UNKNOWN_HASH_STRATEGY
}

func (m *Tree) GetHashAlgorithm() sigpb.DigitallySigned_HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return sigpb.DigitallySigned_NONE
}

func (m *Tree) GetSignatureAlgorithm() sigpb.DigitallySigned_SignatureAlgorithm {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return sigpb.DigitallySigned_ANONYMOUS
}

func (m *Tree) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Tree) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Tree) GetPrivateKey() *google_protobuf2.Any {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *Tree) GetStorageSettings() *google_protobuf2.Any {
	if m != nil {
		return m.StorageSettings
	}
	return nil
}

func (m *Tree) GetPublicKey() *keyspb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Tree) GetMaxRootDuration() *google_protobuf3.Duration {
	if m != nil {
		return m.MaxRootDuration
	}
	return nil
}

func (m *Tree) GetCreateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Tree) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Tree) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Tree) GetDeleteTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeleteTime
	}
	return nil
}

type SignedEntryTimestamp struct {
	TimestampNanos int64                  `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	LogId          int64                  `protobuf:"varint,2,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Signature      *sigpb.DigitallySigned `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedEntryTimestamp) Reset()                    { *m = SignedEntryTimestamp{} }
func (m *SignedEntryTimestamp) String() string            { return proto.CompactTextString(m) }
func (*SignedEntryTimestamp) ProtoMessage()               {}
func (*SignedEntryTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SignedEntryTimestamp) GetTimestampNanos() int64 {
	if m != nil {
		return m.TimestampNanos
	}
	return 0
}

func (m *SignedEntryTimestamp) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *SignedEntryTimestamp) GetSignature() *sigpb.DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignedLogRoot represents a commitment by a Log to a particular tree.
type SignedLogRoot struct {
	// epoch nanoseconds, good until 2500ish
	TimestampNanos int64  `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// TreeSize is the number of entries in the tree.
	TreeSize     int64                  `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	Signature    *sigpb.DigitallySigned `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	TreeRevision int64                  `protobuf:"varint,6,opt,name=tree_revision,json=treeRevision" json:"tree_revision,omitempty"`
	// key_hint is a hint to identify the public key for signature verification.
	// key_hint is not authenticated and may be incorrect or missing, in which
	// case all known public keys may be used to verify the signature.
	// When directly communicating with a Trillian gRPC server, the key_hint will
	// typically contain the LogID encoded as a big-endian 64-bit integer;
	// however, in other contexts the key_hint is likely to have different
	// contents (e.g. it could be a GUID, a URL + TreeID, or it could be
	// derived from the public key itself).
	KeyHint []byte `protobuf:"bytes,7,opt,name=key_hint,json=keyHint,proto3" json:"key_hint,omitempty"`
}

func (m *SignedLogRoot) Reset()                    { *m = SignedLogRoot{} }
func (m *SignedLogRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedLogRoot) ProtoMessage()               {}
func (*SignedLogRoot) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SignedLogRoot) GetTimestampNanos() int64 {
	if m != nil {
		return m.TimestampNanos
	}
	return 0
}

func (m *SignedLogRoot) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *SignedLogRoot) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *SignedLogRoot) GetSignature() *sigpb.DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedLogRoot) GetTreeRevision() int64 {
	if m != nil {
		return m.TreeRevision
	}
	return 0
}

func (m *SignedLogRoot) GetKeyHint() []byte {
	if m != nil {
		return m.KeyHint
	}
	return nil
}

// SignedMapRoot represents a commitment by a Map to a particular tree.
type SignedMapRoot struct {
	TimestampNanos int64  `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// TODO(al): define serialized format for the signature scheme.
	Signature   *sigpb.DigitallySigned `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	MapRevision int64                  `protobuf:"varint,6,opt,name=map_revision,json=mapRevision" json:"map_revision,omitempty"`
	Metadata    []byte                 `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SignedMapRoot) Reset()                    { *m = SignedMapRoot{} }
func (m *SignedMapRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedMapRoot) ProtoMessage()               {}
func (*SignedMapRoot) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *SignedMapRoot) GetTimestampNanos() int64 {
	if m != nil {
		return m.TimestampNanos
	}
	return 0
}

func (m *SignedMapRoot) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *SignedMapRoot) GetSignature() *sigpb.DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMapRoot) GetMapRevision() int64 {
	if m != nil {
		return m.MapRevision
	}
	return 0
}

func (m *SignedMapRoot) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Tree)(nil), "trillian.Tree")
	proto.RegisterType((*SignedEntryTimestamp)(nil), "trillian.SignedEntryTimestamp")
	proto.RegisterType((*SignedLogRoot)(nil), "trillian.SignedLogRoot")
	proto.RegisterType((*SignedMapRoot)(nil), "trillian.SignedMapRoot")
	proto.RegisterEnum("trillian.LogRootFormat", LogRootFormat_name, LogRootFormat_value)
	proto.RegisterEnum("trillian.MapRootFormat", MapRootFormat_name, MapRootFormat_value)
	proto.RegisterEnum("trillian.HashStrategy", HashStrategy_name, HashStrategy_value)
	proto.RegisterEnum("trillian.TreeState", TreeState_name, TreeState_value)
	proto.RegisterEnum("trillian.TreeType", TreeType_name, TreeType_value)
}

func init() { proto.RegisterFile("trillian.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x0e, 0x25, 0x5a, 0xa2, 0x46, 0x0f, 0xd3, 0xeb, 0x3c, 0x68, 0x05, 0x68, 0x14, 0xb7, 0x40,
	0xdd, 0x1c, 0xe4, 0x46, 0x6d, 0x0c, 0x14, 0x39, 0x14, 0xb4, 0x45, 0x5b, 0x92, 0x6d, 0x49, 0x58,
	0xb2, 0x29, 0xe2, 0x0b, 0xb1, 0x92, 0xb6, 0x14, 0x61, 0xf1, 0x01, 0x72, 0x15, 0x84, 0x39, 0xf7,
	0x52, 0xb4, 0x3f, 0xb1, 0xbf, 0xa1, 0xbf, 0xa1, 0xd8, 0xe5, 0xc3, 0xb6, 0xdc, 0x34, 0x41, 0xd1,
	0x8b, 0xbd, 0x33, 0xdf, 0x83, 0x33, 0xdc, 0xd9, 0x15, 0xa1, 0xc5, 0x22, 0x77, 0xb5, 0x72, 0x89,
	0xdf, 0x0d, 0xa3, 0x80, 0x05, 0x48, 0xc9, 0xe3, 0x76, 0x7b, 0x1e, 0x25, 0x21, 0x0b, 0x0e, 0xaf,
	0x69, 0x12, 0x87, 0xb3, 0xec, 0x5f, 0xca, 0x6a, 0x6b, 0x19, 0x16, 0xbb, 0x4e, 0x38, 0x4b, 0xff,
	0x66, 0xc8, 0x9e, 0x13, 0x04, 0xce, 0x8a, 0x1e, 0x8a, 0x68, 0xb6, 0xfe, 0xe5, 0x90, 0xf8, 0x49,
	0x06, 0x7d, 0xb1, 0x09, 0x2d, 0xd6, 0x11, 0x61, 0x6e, 0x90, 0x3d, 0xba, 0xfd, 0x6c, 0x13, 0x67,
	0xae, 0x47, 0x63, 0x46, 0xbc, 0x30, 0x25, 0xec, 0xff, 0x56, 0x05, 0xd9, 0x8a, 0x28, 0x45, 0x4f,
	0xa0, 0xca, 0x22, 0x4a, 0x6d, 0x77, 0xa1, 0x49, 0x1d, 0xe9, 0xa0, 0x8c, 0x2b, 0x3c, 0x1c, 0x2e,
	0x50, 0x0f, 0x40, 0x00, 0x31, 0x23, 0x8c, 0x6a, 0xa5, 0x8e, 0x74, 0xd0, 0xea, 0xed, 0x76, 0x8b,
	0x16, 0xb9, 0xd8, 0xe4, 0x10, 0xae, 0xb1, 0x7c, 0x89, 0x0e, 0x41, 0x04, 0x36, 0x4b, 0x42, 0xaa,
	0x95, 0x85, 0x04, 0xdd, 0x95, 0x58, 0x49, 0x48, 0xb1, 0xc2, 0xb2, 0x15, 0x7a, 0x0d, 0xcd, 0x25,
	0x89, 0x97, 0x76, 0xcc, 0x22, 0xc2, 0xa8, 0x93, 0x68, 0xb2, 0x10, 0x3d, 0xbe, 0x11, 0x0d, 0x48,
	0xbc, 0x34, 0x33, 0x14, 0x37, 0x96, 0xb7, 0x22, 0x74, 0x0e, 0x2d, 0x21, 0x26, 0x2b, 0x27, 0x88,
	0x5c, 0xb6, 0xf4, 0xb4, 0x2d, 0xa1, 0xfe, 0xaa, 0x9b, 0xbe, 0xc5, 0xbe, 0xeb, 0xb8, 0x8c, 0xac,
	0x56, 0x89, 0xe9, 0x3a, 0x3e, 0x5d, 0x08, 0x2b, 0x3d, 0xe7, 0x62, 0xf1, 0xe0, 0x22, 0x44, 0x57,
	0xb0, 0x1b, 0xbb, 0x8e, 0x4f, 0xd8, 0x3a, 0xa2, 0xb7, 0x1c, 0x2b, 0xc2, 0xf1, 0x9b, 0x8f, 0x38,
	0x9a, 0xb9, 0xe2, 0xc6, 0x16, 0xc5, 0xf7, 0x72, 0xe8, 0x39, 0x34, 0x16, 0x6e, 0x1c, 0xae, 0x48,
	0x62, 0xfb, 0xc4, 0xa3, 0x9a, 0xd2, 0x91, 0x0e, 0x6a, 0xb8, 0x9e, 0xe5, 0xc6, 0xc4, 0xa3, 0xa8,
	0x03, 0xf5, 0x05, 0x8d, 0xe7, 0x91, 0x1b, 0xf2, 0x5d, 0xd4, 0x6a, 0x19, 0xe3, 0x26, 0x85, 0x5e,
	0x41, 0x3d, 0x8c, 0xdc, 0x77, 0x84, 0x51, 0xfb, 0x9a, 0x26, 0x5a, 0xa3, 0x23, 0x1d, 0xd4, 0x7b,
	0x0f, 0xbb, 0xe9, 0x46, 0x77, 0xf3, 0x8d, 0xee, 0xea, 0x7e, 0x82, 0x21, 0x23, 0x9e, 0xd3, 0x04,
	0xfd, 0x08, 0x6a, 0xcc, 0x82, 0x88, 0x38, 0xd4, 0x8e, 0x29, 0x63, 0xae, 0xef, 0xc4, 0x5a, 0xf3,
	0x5f, 0xb4, 0xdb, 0x19, 0xdb, 0xcc, 0xc8, 0xe8, 0x5b, 0x80, 0x70, 0x3d, 0x5b, 0xb9, 0x73, 0xf1,
	0xd8, 0x96, 0x90, 0xee, 0x74, 0xb3, 0x11, 0x9e, 0x0a, 0xe4, 0x9c, 0x26, 0xb8, 0x16, 0xe6, 0x4b,
	0x64, 0xc0, 0x8e, 0x47, 0xde, 0xdb, 0x51, 0x10, 0x30, 0x3b, 0x9f, 0x4b, 0x6d, 0x5b, 0x08, 0xf7,
	0xee, 0x3d, 0xb3, 0x9f, 0x11, 0xf0, 0xb6, 0x47, 0xde, 0xe3, 0x20, 0x60, 0x79, 0x02, 0xbd, 0x86,
	0xfa, 0x3c, 0xa2, 0xbc, 0x5f, 0x3e, 0xbc, 0x9a, 0x2a, 0x0c, 0xda, 0xf7, 0x0c, 0xac, 0x7c, 0xb2,
	0x31, 0xa4, 0x74, 0x9e, 0xe0, 0xe2, 0x75, 0xb8, 0x28, 0xc4, 0x3b, 0x9f, 0x16, 0xa7, 0x74, 0x21,
	0xd6, 0xa0, 0xba, 0xa0, 0x2b, 0xca, 0xe8, 0x42, 0xdb, 0xed, 0x48, 0x07, 0x0a, 0xce, 0x43, 0x6e,
	0x9b, 0x2e, 0x53, 0xdb, 0x87, 0x9f, 0xb6, 0x4d, 0xe9, 0x3c, 0x31, 0x92, 0x15, 0xa4, 0xee, 0x8e,
	0x64, 0xa5, 0xaa, 0x2a, 0x23, 0x59, 0x01, 0xb5, 0x3e, 0x92, 0x95, 0xba, 0xda, 0xd8, 0xff, 0x43,
	0x82, 0x87, 0xe9, 0x40, 0x19, 0x3e, 0x8b, 0x92, 0x42, 0x8c, 0xbe, 0x86, 0xed, 0xe2, 0xdc, 0xda,
	0x3e, 0xf1, 0x83, 0x38, 0x3b, 0xa3, 0xad, 0x22, 0x3d, 0xe6, 0x59, 0xf4, 0x08, 0x2a, 0xab, 0xc0,
	0xe1, 0x67, 0xb8, 0x24, 0xf0, 0xad, 0x55, 0xe0, 0x0c, 0x17, 0xe8, 0x7b, 0xa8, 0x15, 0xd3, 0x28,
	0x8e, 0x63, 0xbd, 0xf7, 0xf8, 0x9f, 0x27, 0x19, 0xdf, 0x10, 0xf7, 0xff, 0x92, 0xa0, 0x99, 0x66,
	0x2f, 0x02, 0x87, 0xef, 0xc8, 0xe7, 0xd7, 0xf1, 0x14, 0x6a, 0x62, 0xd7, 0xf9, 0xd1, 0x12, 0xa5,
	0x34, 0xb0, 0xc2, 0x13, 0xfc, 0xe4, 0x71, 0x30, 0xbd, 0x50, 0xdc, 0x0f, 0x69, 0x35, 0xe5, 0xf4,
	0x22, 0x30, 0xdd, 0x0f, 0xf4, 0x6e, 0xa9, 0xf2, 0x67, 0x96, 0x8a, 0xbe, 0x84, 0xa6, 0xb0, 0x8c,
	0xe8, 0x3b, 0x37, 0xe6, 0x53, 0x56, 0x11, 0xb6, 0x0d, 0x9e, 0xc4, 0x59, 0x0e, 0xed, 0x81, 0x72,
	0x4d, 0x13, 0x7b, 0xe9, 0xfa, 0x4c, 0xab, 0x8a, 0x9a, 0xaa, 0xd7, 0x34, 0x19, 0xb8, 0x3e, 0x1b,
	0xc9, 0xca, 0x96, 0x5a, 0xd9, 0xff, 0xb3, 0x68, 0xf8, 0x92, 0x84, 0xff, 0x63, 0xc3, 0xff, 0xad,
	0xa7, 0xe7, 0xd0, 0xf0, 0x48, 0xb8, 0xd9, 0x52, 0xdd, 0x23, 0x61, 0xd1, 0x51, 0x1b, 0x14, 0x8f,
	0x32, 0xb2, 0x20, 0x8c, 0x88, 0xbb, 0xa4, 0x81, 0x8b, 0x78, 0x24, 0x2b, 0x65, 0x55, 0x4e, 0x1b,
	0x4b, 0x47, 0xed, 0x45, 0x1f, 0x9a, 0xd9, 0x46, 0x9e, 0x06, 0x91, 0x47, 0x18, 0x7a, 0x0a, 0x4f,
	0x2e, 0x26, 0x67, 0x36, 0x9e, 0x4c, 0x2c, 0xfb, 0x74, 0x82, 0x2f, 0x75, 0xcb, 0xfe, 0x69, 0x7c,
	0x3e, 0x9e, 0xfc, 0x3c, 0x56, 0x1f, 0xa0, 0xc7, 0x80, 0x36, 0xc1, 0x37, 0x2f, 0x55, 0x89, 0xbb,
	0x64, 0x6f, 0xe7, 0xc6, 0xe5, 0x52, 0x9f, 0x7e, 0xdc, 0x65, 0x13, 0x14, 0x2e, 0xbf, 0x4a, 0xd0,
	0xb8, 0x7d, 0xa3, 0xa3, 0x3d, 0x78, 0x94, 0xa9, 0xec, 0x81, 0x6e, 0x0e, 0x6c, 0xd3, 0xc2, 0xba,
	0x65, 0x9c, 0xbd, 0x55, 0x1f, 0x20, 0x04, 0x2d, 0x7c, 0x7a, 0x72, 0xf4, 0xc3, 0x51, 0xcf, 0x36,
	0x07, 0x7a, 0xef, 0xd5, 0x91, 0x2a, 0xa1, 0x5d, 0xd8, 0xb6, 0x0c, 0xd3, 0xb2, 0xb9, 0x39, 0xe7,
	0x1b, 0x58, 0x2d, 0x71, 0x8f, 0xc9, 0xf1, 0xc8, 0x38, 0xb1, 0xec, 0x0d, 0x7e, 0x19, 0x3d, 0x82,
	0x9d, 0x93, 0xc9, 0x78, 0x78, 0x6e, 0xf2, 0xd4, 0xab, 0x97, 0x3d, 0x9b, 0xa7, 0xe5, 0x17, 0xbf,
	0x4b, 0x50, 0x2b, 0x7e, 0xc0, 0x78, 0xb1, 0x79, 0x0d, 0x16, 0x36, 0x0c, 0xdb, 0xb4, 0x74, 0xcb,
	0x50, 0x1f, 0x20, 0x80, 0x8a, 0x7e, 0x62, 0x0d, 0xdf, 0x18, 0xaa, 0xc4, 0xd7, 0xa7, 0x78, 0x72,
	0x65, 0x8c, 0xd5, 0x12, 0x7a, 0x06, 0x4f, 0xfa, 0xc6, 0x14, 0x1b, 0x27, 0xba, 0x65, 0xf4, 0x6d,
	0x73, 0x72, 0x6a, 0xd9, 0x7d, 0xe3, 0xc2, 0xb0, 0x8c, 0xbe, 0x5a, 0x6e, 0x97, 0x14, 0x69, 0x83,
	0x30, 0xd0, 0x71, 0xbf, 0x20, 0xc8, 0x82, 0xd0, 0x00, 0xa5, 0x8f, 0xf5, 0xe1, 0x78, 0x38, 0x3e,
	0x53, 0xb7, 0x5e, 0x9c, 0x81, 0x92, 0xff, 0x34, 0xf2, 0x82, 0xef, 0xd4, 0x62, 0xbd, 0x9d, 0xf2,
	0x52, 0xaa, 0x50, 0xbe, 0x98, 0x9c, 0xa9, 0x12, 0x5f, 0x5c, 0xea, 0x53, 0xb5, 0xc4, 0xdf, 0xce,
	0x14, 0x1b, 0x13, 0xdc, 0x37, 0xb0, 0xd1, 0xb7, 0x39, 0x58, 0x3e, 0x1e, 0xc0, 0xde, 0x3c, 0xf0,
	0xf2, 0xdb, 0xe8, 0xee, 0xd7, 0xc8, 0x71, 0xd3, 0xca, 0xe2, 0x29, 0x0f, 0xa7, 0xd2, 0x55, 0xdb,
	0x71, 0xd9, 0x72, 0x3d, 0xeb, 0xce, 0x03, 0xef, 0x30, 0xfb, 0x5c, 0xc8, 0x25, 0xb3, 0x8a, 0xd0,
	0x7c, 0xf7, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xe5, 0x43, 0xae, 0xd3, 0x08, 0x00, 0x00,
}
