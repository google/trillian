// Code generated by protoc-gen-go.
// source: github.com/google/trillian/trillian.proto
// DO NOT EDIT!

package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This defines the way empty / node / leaf hashes are constructed incorporating
// preimage protection, which can be application specific.
type TreeHasherPreimageType int32

const (
	// For Certificate transparency leaf hash prefix = 0x00, node prefix = 0x01, empty hash
	// is digest([]byte{}) as defined in the specification
	TreeHasherPreimageType_RFC_6962_PREIMAGE TreeHasherPreimageType = 0
)

var TreeHasherPreimageType_name = map[int32]string{
	0: "RFC_6962_PREIMAGE",
}
var TreeHasherPreimageType_value = map[string]int32{
	"RFC_6962_PREIMAGE": 0,
}

func (x TreeHasherPreimageType) String() string {
	return proto.EnumName(TreeHasherPreimageType_name, int32(x))
}
func (TreeHasherPreimageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SignatureAlgorithm int32

const (
	SignatureAlgorithm_ECDSA SignatureAlgorithm = 0
	SignatureAlgorithm_RSA   SignatureAlgorithm = 1
)

var SignatureAlgorithm_name = map[int32]string{
	0: "ECDSA",
	1: "RSA",
}
var SignatureAlgorithm_value = map[string]int32{
	"ECDSA": 0,
	"RSA":   1,
}

func (x SignatureAlgorithm) String() string {
	return proto.EnumName(SignatureAlgorithm_name, int32(x))
}
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type HashAlgorithm int32

const (
	HashAlgorithm_SHA256 HashAlgorithm = 0
)

var HashAlgorithm_name = map[int32]string{
	0: "SHA256",
}
var HashAlgorithm_value = map[string]int32{
	"SHA256": 0,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type DigitallySigned struct {
	SignatureAlgorithm SignatureAlgorithm `protobuf:"varint,1,opt,name=signature_algorithm,json=signatureAlgorithm,enum=trillian.SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	HashAlgorithm      HashAlgorithm      `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,enum=trillian.HashAlgorithm" json:"hash_algorithm,omitempty"`
	Signature          []byte             `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DigitallySigned) Reset()                    { *m = DigitallySigned{} }
func (m *DigitallySigned) String() string            { return proto.CompactTextString(m) }
func (*DigitallySigned) ProtoMessage()               {}
func (*DigitallySigned) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SignedEntryTimestamp struct {
	TimestampNanos int64            `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	LogId          []byte           `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Signature      *DigitallySigned `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedEntryTimestamp) Reset()                    { *m = SignedEntryTimestamp{} }
func (m *SignedEntryTimestamp) String() string            { return proto.CompactTextString(m) }
func (*SignedEntryTimestamp) ProtoMessage()               {}
func (*SignedEntryTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SignedEntryTimestamp) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignedLogRoot represents a commitment by a Log to a particular tree.
type SignedLogRoot struct {
	// epoch nanoseconds, good until 2500ish
	TimestampNanos int64  `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// TreeSize is the number of entries in the tree.
	TreeSize int64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	// TODO(al): define serialised format for the signature scheme.
	Signature    *DigitallySigned `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	LogId        []byte           `protobuf:"bytes,5,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	TreeRevision int64            `protobuf:"varint,6,opt,name=tree_revision,json=treeRevision" json:"tree_revision,omitempty"`
}

func (m *SignedLogRoot) Reset()                    { *m = SignedLogRoot{} }
func (m *SignedLogRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedLogRoot) ProtoMessage()               {}
func (*SignedLogRoot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SignedLogRoot) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

type MapperMetadata struct {
	SourceLogId                  []byte `protobuf:"bytes,1,opt,name=source_log_id,json=sourceLogId,proto3" json:"source_log_id,omitempty"`
	HighestFullyCompletedSeq     int64  `protobuf:"varint,2,opt,name=highest_fully_completed_seq,json=highestFullyCompletedSeq" json:"highest_fully_completed_seq,omitempty"`
	HighestPartiallyCompletedSeq int64  `protobuf:"varint,3,opt,name=highest_partially_completed_seq,json=highestPartiallyCompletedSeq" json:"highest_partially_completed_seq,omitempty"`
}

func (m *MapperMetadata) Reset()                    { *m = MapperMetadata{} }
func (m *MapperMetadata) String() string            { return proto.CompactTextString(m) }
func (*MapperMetadata) ProtoMessage()               {}
func (*MapperMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// SignedMapRoot represents a commitment by a Map to a particular tree.
type SignedMapRoot struct {
	TimestampNanos int64           `protobuf:"varint,1,opt,name=timestamp_nanos,json=timestampNanos" json:"timestamp_nanos,omitempty"`
	RootHash       []byte          `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Metadata       *MapperMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	// TODO(al): define serialised format for the signature scheme.
	Signature   *DigitallySigned `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	MapId       []byte           `protobuf:"bytes,5,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	MapRevision int64            `protobuf:"varint,6,opt,name=map_revision,json=mapRevision" json:"map_revision,omitempty"`
}

func (m *SignedMapRoot) Reset()                    { *m = SignedMapRoot{} }
func (m *SignedMapRoot) String() string            { return proto.CompactTextString(m) }
func (*SignedMapRoot) ProtoMessage()               {}
func (*SignedMapRoot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SignedMapRoot) GetMetadata() *MapperMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SignedMapRoot) GetSignature() *DigitallySigned {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*DigitallySigned)(nil), "trillian.DigitallySigned")
	proto.RegisterType((*SignedEntryTimestamp)(nil), "trillian.SignedEntryTimestamp")
	proto.RegisterType((*SignedLogRoot)(nil), "trillian.SignedLogRoot")
	proto.RegisterType((*MapperMetadata)(nil), "trillian.MapperMetadata")
	proto.RegisterType((*SignedMapRoot)(nil), "trillian.SignedMapRoot")
	proto.RegisterEnum("trillian.TreeHasherPreimageType", TreeHasherPreimageType_name, TreeHasherPreimageType_value)
	proto.RegisterEnum("trillian.SignatureAlgorithm", SignatureAlgorithm_name, SignatureAlgorithm_value)
	proto.RegisterEnum("trillian.HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
}

func init() { proto.RegisterFile("github.com/google/trillian/trillian.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xdd, 0x8a, 0x20, 0x5c, 0x3e, 0x16, 0xc7, 0x2f, 0x0c, 0x24, 0x2a, 0x3e, 0xb8, 0xf2, 0x00,
	0x09, 0x2a, 0xc6, 0x07, 0x4d, 0x08, 0xcb, 0xba, 0x9b, 0x2c, 0x86, 0x4c, 0x79, 0x9f, 0xcc, 0x2e,
	0x63, 0x3b, 0x49, 0xdb, 0xe9, 0x4e, 0x07, 0x13, 0xfc, 0x13, 0xfe, 0x1f, 0x1f, 0xfc, 0x3b, 0xfe,
	0x0b, 0xe3, 0x4c, 0x69, 0x4b, 0x81, 0x97, 0x4d, 0xf4, 0x6d, 0xee, 0xe9, 0xb9, 0x67, 0xce, 0xbd,
	0xa7, 0x2d, 0xbc, 0x76, 0xb8, 0x72, 0x57, 0x57, 0xfd, 0x6b, 0xe1, 0x0f, 0x1c, 0x21, 0x1c, 0x8f,
	0x0d, 0x94, 0xe4, 0x9e, 0xc7, 0x69, 0x90, 0x1d, 0xfa, 0xa1, 0x14, 0x4a, 0xa0, 0x72, 0x5a, 0x77,
	0x7f, 0x59, 0x70, 0x7c, 0xca, 0x75, 0x27, 0xf5, 0xbc, 0xb5, 0xcd, 0x9d, 0x80, 0x2d, 0xd1, 0x0c,
	0x1e, 0x44, 0xfa, 0x44, 0xd5, 0x4a, 0x32, 0x42, 0x3d, 0x47, 0x48, 0x2d, 0xec, 0xb7, 0xac, 0xe7,
	0xd6, 0x49, 0x63, 0xd8, 0xe9, 0x67, 0x5a, 0x76, 0x4a, 0x1a, 0xa7, 0x1c, 0x8c, 0xa2, 0x03, 0x0c,
	0x7d, 0x82, 0x86, 0x4b, 0x23, 0x37, 0xa7, 0x74, 0x27, 0x56, 0x7a, 0xb2, 0x55, 0x3a, 0xd7, 0xcf,
	0xb7, 0x22, 0x75, 0x37, 0x5f, 0xa2, 0x0e, 0x54, 0x32, 0xd5, 0x56, 0x41, 0xb7, 0xd6, 0xf0, 0x16,
	0xe8, 0xfe, 0xb0, 0xe0, 0xe1, 0xc6, 0xf7, 0x34, 0x50, 0x72, 0xbd, 0xe0, 0x3e, 0x8b, 0x14, 0xf5,
	0x43, 0xf4, 0x0a, 0x8e, 0x55, 0x5a, 0x90, 0x80, 0x06, 0x22, 0x8a, 0x27, 0x28, 0xe0, 0x46, 0x06,
	0x7f, 0x31, 0x28, 0x7a, 0x04, 0x25, 0x4f, 0x38, 0x84, 0x2f, 0x63, 0x5f, 0x35, 0x5c, 0xd4, 0xd5,
	0xc5, 0x12, 0xbd, 0xdf, 0xbf, 0xb6, 0x3a, 0x7c, 0xba, 0x75, 0xbc, 0xb7, 0xb3, 0xbc, 0xa3, 0xdf,
	0x16, 0xd4, 0x37, 0xe8, 0xa5, 0x70, 0xb0, 0x10, 0xea, 0xf6, 0x56, 0xda, 0x50, 0x91, 0xba, 0x81,
	0x98, 0x05, 0x24, 0x6e, 0xca, 0x06, 0x30, 0xfb, 0x31, 0x0f, 0x95, 0x64, 0x8c, 0x44, 0xfc, 0xfb,
	0xc6, 0x50, 0x01, 0x97, 0x0d, 0x60, 0xeb, 0x7a, 0xd7, 0xed, 0xdd, 0xdb, 0xbb, 0xcd, 0x4d, 0x5f,
	0xcc, 0x4f, 0xff, 0x12, 0xea, 0xf1, 0x65, 0x92, 0x7d, 0xe3, 0x11, 0x17, 0x41, 0xab, 0x14, 0x5f,
	0x58, 0x33, 0x20, 0x4e, 0xb0, 0xee, 0x4f, 0x0b, 0x1a, 0x33, 0x1a, 0x86, 0x4c, 0xce, 0x98, 0xa2,
	0x4b, 0xaa, 0x28, 0xea, 0x42, 0x3d, 0x12, 0x2b, 0x79, 0xcd, 0x48, 0xa2, 0x6a, 0xc5, 0xaa, 0xd5,
	0x0d, 0x78, 0x19, 0x6b, 0x7f, 0x84, 0xb6, 0xcb, 0x1d, 0x57, 0x0f, 0x4e, 0xbe, 0xae, 0xb4, 0x29,
	0xa2, 0xdf, 0xd8, 0xd0, 0x63, 0x8a, 0x2d, 0x49, 0xc4, 0x6e, 0xe2, 0xb9, 0x0b, 0xb8, 0x95, 0x50,
	0xce, 0x0c, 0x63, 0x92, 0x12, 0x6c, 0x76, 0x83, 0xa6, 0xf0, 0x2c, 0x6d, 0x0f, 0xa9, 0x54, 0x9c,
	0x1e, 0x4a, 0x6c, 0xb6, 0xd3, 0x49, 0x68, 0xf3, 0x94, 0x95, 0x97, 0xe9, 0xfe, 0xc9, 0x62, 0xd2,
	0x23, 0xfc, 0xc7, 0x98, 0xde, 0x42, 0xd9, 0x4f, 0xb6, 0x91, 0xbc, 0x36, 0xad, 0x6d, 0x10, 0xbb,
	0xdb, 0xc2, 0x19, 0xf3, 0x9f, 0xf2, 0xf3, 0x69, 0x98, 0xcb, 0x4f, 0x57, 0x7a, 0xc7, 0x2f, 0xa0,
	0x66, 0xe0, 0xbd, 0xf8, 0xaa, 0x1a, 0x4b, 0xd3, 0xeb, 0x0d, 0xe0, 0xf1, 0x42, 0xa7, 0x69, 0x4c,
	0x33, 0x39, 0x97, 0x8c, 0xfb, 0xd4, 0x61, 0x8b, 0x75, 0x68, 0x34, 0xef, 0xe3, 0xb3, 0x09, 0x19,
	0x7d, 0x18, 0x0d, 0xc9, 0x1c, 0x4f, 0x2f, 0x66, 0xe3, 0xcf, 0xd3, 0xe6, 0x51, 0xef, 0x04, 0xd0,
	0xe1, 0x27, 0x8f, 0x2a, 0x50, 0x9c, 0x4e, 0x4e, 0xed, 0x71, 0xf3, 0x08, 0xdd, 0x83, 0x02, 0xd6,
	0x07, 0xab, 0xd7, 0x86, 0xfa, 0xce, 0x27, 0x8d, 0x00, 0x4a, 0xf6, 0xf9, 0x78, 0xf8, 0x6e, 0xd4,
	0x3c, 0xba, 0x2a, 0xc5, 0xff, 0xa0, 0x37, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x69, 0x4c, 0x6d,
	0xe8, 0xb0, 0x04, 0x00, 0x00,
}
