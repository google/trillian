// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/trillian/quota (interfaces: Manager)

// Package quota is a generated GoMock package.
package quota

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetTokens mocks base method
func (m *MockManager) GetTokens(arg0 context.Context, arg1 int, arg2 []Spec) error {
	ret := m.ctrl.Call(m, "GetTokens", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTokens indicates an expected call of GetTokens
func (mr *MockManagerMockRecorder) GetTokens(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockManager)(nil).GetTokens), arg0, arg1, arg2)
}

// GetUser mocks base method
func (m *MockManager) GetUser(arg0 context.Context, arg1 interface{}) string {
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser
func (mr *MockManagerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManager)(nil).GetUser), arg0, arg1)
}

// PeekTokens mocks base method
func (m *MockManager) PeekTokens(arg0 context.Context, arg1 []Spec) (map[Spec]int, error) {
	ret := m.ctrl.Call(m, "PeekTokens", arg0, arg1)
	ret0, _ := ret[0].(map[Spec]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeekTokens indicates an expected call of PeekTokens
func (mr *MockManagerMockRecorder) PeekTokens(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekTokens", reflect.TypeOf((*MockManager)(nil).PeekTokens), arg0, arg1)
}

// PutTokens mocks base method
func (m *MockManager) PutTokens(arg0 context.Context, arg1 int, arg2 []Spec) error {
	ret := m.ctrl.Call(m, "PutTokens", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTokens indicates an expected call of PutTokens
func (mr *MockManagerMockRecorder) PutTokens(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTokens", reflect.TypeOf((*MockManager)(nil).PutTokens), arg0, arg1, arg2)
}

// ResetQuota mocks base method
func (m *MockManager) ResetQuota(arg0 context.Context, arg1 []Spec) error {
	ret := m.ctrl.Call(m, "ResetQuota", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetQuota indicates an expected call of ResetQuota
func (mr *MockManagerMockRecorder) ResetQuota(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetQuota", reflect.TypeOf((*MockManager)(nil).ResetQuota), arg0, arg1)
}
