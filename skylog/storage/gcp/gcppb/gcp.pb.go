// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gcp.proto

package gcppb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BuildJob is a Merke tree building job. It instructs workers to build a
// subtree covering leaves of the [begin, end) range for the specified tree.
type BuildJob struct {
	// The tree ID to build a subtree of.
	TreeId int64 `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	// The beginning of the leaves range (inclusive).
	Begin uint64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	// The ending of the leaves range (exclusive).
	End uint64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// The tree sharding scheme that the build worker should use. Since builders
	// are stateless it is more efficient to pass it in from the master rather
	// than fetch it from storage on each job invocation.
	TreeSharding *TreeSharding `protobuf:"bytes,4,opt,name=tree_sharding,json=treeSharding,proto3" json:"tree_sharding,omitempty"`
	// The sequence sharding scheme that the build worker should use. It is
	// provided for the same reason as the tree sharding field.
	SeqSharding          *SequenceSharding `protobuf:"bytes,5,opt,name=seq_sharding,json=seqSharding,proto3" json:"seq_sharding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BuildJob) Reset()         { *m = BuildJob{} }
func (m *BuildJob) String() string { return proto.CompactTextString(m) }
func (*BuildJob) ProtoMessage()    {}
func (*BuildJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f553190b5184fe, []int{0}
}

func (m *BuildJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildJob.Unmarshal(m, b)
}
func (m *BuildJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildJob.Marshal(b, m, deterministic)
}
func (m *BuildJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildJob.Merge(m, src)
}
func (m *BuildJob) XXX_Size() int {
	return xxx_messageInfo_BuildJob.Size(m)
}
func (m *BuildJob) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildJob.DiscardUnknown(m)
}

var xxx_messageInfo_BuildJob proto.InternalMessageInfo

func (m *BuildJob) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *BuildJob) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *BuildJob) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *BuildJob) GetTreeSharding() *TreeSharding {
	if m != nil {
		return m.TreeSharding
	}
	return nil
}

func (m *BuildJob) GetSeqSharding() *SequenceSharding {
	if m != nil {
		return m.SeqSharding
	}
	return nil
}

// TreeSharding describes the tree nodes sharding scheme.
//
// The specified number of lower tree levels are split into the specified number
// of shards, where each shard stores a periodic sub-structure of perfect
// subtrees. There is one extra shard covering the upper tree levels.
//
// See the tree storage comments for more details.
type TreeSharding struct {
	Levels               uint32   `protobuf:"varint,1,opt,name=levels,proto3" json:"levels,omitempty"`
	Shards               uint32   `protobuf:"varint,2,opt,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeSharding) Reset()         { *m = TreeSharding{} }
func (m *TreeSharding) String() string { return proto.CompactTextString(m) }
func (*TreeSharding) ProtoMessage()    {}
func (*TreeSharding) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f553190b5184fe, []int{1}
}

func (m *TreeSharding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeSharding.Unmarshal(m, b)
}
func (m *TreeSharding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeSharding.Marshal(b, m, deterministic)
}
func (m *TreeSharding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeSharding.Merge(m, src)
}
func (m *TreeSharding) XXX_Size() int {
	return xxx_messageInfo_TreeSharding.Size(m)
}
func (m *TreeSharding) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeSharding.DiscardUnknown(m)
}

var xxx_messageInfo_TreeSharding proto.InternalMessageInfo

func (m *TreeSharding) GetLevels() uint32 {
	if m != nil {
		return m.Levels
	}
	return 0
}

func (m *TreeSharding) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

// SequenceSharding describes the sequenced log entries sharding scheme.
//
// The sequence is split into the specified number of shards, where each shard
// stores a periodic sub-sequence consisting of stripes of the specified size.
//
// See the sequence storage comments for more details.
type SequenceSharding struct {
	Shards               uint32   `protobuf:"varint,1,opt,name=shards,proto3" json:"shards,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequenceSharding) Reset()         { *m = SequenceSharding{} }
func (m *SequenceSharding) String() string { return proto.CompactTextString(m) }
func (*SequenceSharding) ProtoMessage()    {}
func (*SequenceSharding) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f553190b5184fe, []int{2}
}

func (m *SequenceSharding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceSharding.Unmarshal(m, b)
}
func (m *SequenceSharding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceSharding.Marshal(b, m, deterministic)
}
func (m *SequenceSharding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceSharding.Merge(m, src)
}
func (m *SequenceSharding) XXX_Size() int {
	return xxx_messageInfo_SequenceSharding.Size(m)
}
func (m *SequenceSharding) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceSharding.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceSharding proto.InternalMessageInfo

func (m *SequenceSharding) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *SequenceSharding) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*BuildJob)(nil), "gcppb.BuildJob")
	proto.RegisterType((*TreeSharding)(nil), "gcppb.TreeSharding")
	proto.RegisterType((*SequenceSharding)(nil), "gcppb.SequenceSharding")
}

func init() { proto.RegisterFile("gcp.proto", fileDescriptor_b1f553190b5184fe) }

var fileDescriptor_b1f553190b5184fe = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x89, 0xfd, 0xa3, 0xce, 0xb6, 0xb0, 0x44, 0x71, 0x7b, 0x2c, 0x3d, 0xf5, 0xd4, 0x80,
	0x8b, 0x20, 0x1e, 0xf6, 0xb0, 0x37, 0x3d, 0x76, 0x3d, 0x79, 0x91, 0xfe, 0x19, 0xb2, 0xc1, 0xd8,
	0xb4, 0x49, 0x2a, 0xe8, 0xb7, 0xf3, 0x9b, 0x49, 0x63, 0x65, 0x8b, 0xb7, 0xf9, 0x4d, 0xe6, 0xbd,
	0xe1, 0x65, 0xe0, 0x92, 0x37, 0x7d, 0xd1, 0x6b, 0x65, 0x15, 0x0d, 0x78, 0xd3, 0xf7, 0x75, 0xf6,
	0x4d, 0xe0, 0x62, 0x3f, 0x0a, 0xd9, 0x3e, 0xa9, 0x9a, 0x6e, 0xe0, 0xdc, 0x6a, 0xc4, 0x57, 0xd1,
	0x26, 0x24, 0x25, 0xb9, 0x57, 0x86, 0x13, 0x3e, 0xb6, 0xf4, 0x1a, 0x82, 0x1a, 0xb9, 0xe8, 0x92,
	0xb3, 0x94, 0xe4, 0x7e, 0xf9, 0x0b, 0x74, 0x0d, 0x1e, 0x76, 0x6d, 0xe2, 0xb9, 0xde, 0x54, 0xd2,
	0x7b, 0x88, 0x9d, 0x81, 0x39, 0x56, 0xba, 0x15, 0x1d, 0x4f, 0xfc, 0x94, 0xe4, 0xab, 0xdb, 0xab,
	0xc2, 0x2d, 0x2b, 0x9e, 0x35, 0xe2, 0x61, 0x7e, 0x2a, 0x23, 0xbb, 0x20, 0xfa, 0x00, 0x91, 0xc1,
	0xe1, 0x24, 0x0c, 0x9c, 0x70, 0x33, 0x0b, 0x0f, 0x38, 0x8c, 0xd8, 0x35, 0x27, 0xf1, 0xca, 0xe0,
	0xf0, 0x07, 0xd9, 0x0e, 0xa2, 0xa5, 0x33, 0xbd, 0x81, 0x50, 0xe2, 0x07, 0x4a, 0xe3, 0x52, 0xc4,
	0xe5, 0x4c, 0x53, 0xdf, 0xf9, 0x1b, 0x17, 0x23, 0x2e, 0x67, 0xca, 0x76, 0xb0, 0xfe, 0xbf, 0x60,
	0x31, 0x4b, 0x96, 0xb3, 0x94, 0x82, 0x6f, 0xc4, 0x17, 0xce, 0x1f, 0xe1, 0xea, 0xfd, 0xdd, 0xcb,
	0x96, 0x0b, 0x7b, 0x1c, 0xeb, 0xa2, 0x51, 0xef, 0x8c, 0x2b, 0xc5, 0x25, 0x32, 0xab, 0x85, 0x94,
	0xa2, 0xea, 0x98, 0x79, 0xfb, 0x94, 0x8a, 0x33, 0x63, 0x95, 0xae, 0x38, 0x32, 0xde, 0xf4, 0xcc,
	0x85, 0xaa, 0x43, 0x77, 0x88, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xf6, 0x7c, 0xff,
	0x95, 0x01, 0x00, 0x00,
}
