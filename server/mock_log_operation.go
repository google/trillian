// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/trillian/server (interfaces: LogOperation)

package server

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogOperation is a mock of LogOperation interface
type MockLogOperation struct {
	ctrl     *gomock.Controller
	recorder *MockLogOperationMockRecorder
}

// MockLogOperationMockRecorder is the mock recorder for MockLogOperation
type MockLogOperationMockRecorder struct {
	mock *MockLogOperation
}

// NewMockLogOperation creates a new mock instance
func NewMockLogOperation(ctrl *gomock.Controller) *MockLogOperation {
	mock := &MockLogOperation{ctrl: ctrl}
	mock.recorder = &MockLogOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogOperation) EXPECT() *MockLogOperationMockRecorder {
	return _m.recorder
}

// ExecutePass mocks base method
func (_m *MockLogOperation) ExecutePass(_param0 context.Context, _param1 int64, _param2 *LogOperationInfo) (int, error) {
	ret := _m.ctrl.Call(_m, "ExecutePass", _param0, _param1, _param2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePass indicates an expected call of ExecutePass
func (_mr *MockLogOperationMockRecorder) ExecutePass(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExecutePass", reflect.TypeOf((*MockLogOperation)(nil).ExecutePass), arg0, arg1, arg2)
}

// Name mocks base method
func (_m *MockLogOperation) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockLogOperationMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockLogOperation)(nil).Name))
}
