// Code generated by protoc-gen-go.
// source: trillian_api.proto
// DO NOT EDIT!

/*
Package trillian is a generated protocol buffer package.

It is generated from these files:
	trillian_api.proto
	trillian.proto

It has these top-level messages:
	TrillianApiStatus
	LogLeaf
	Node
	Proof
	QueueLeavesRequest
	QueueLeavesResponse
	GetInclusionProofRequest
	GetInclusionProofResponse
	GetInclusionProofByHashRequest
	GetInclusionProofByHashResponse
	GetConsistencyProofRequest
	GetConsistencyProofResponse
	GetLeavesByHashRequest
	GetLeavesByHashResponse
	GetLeavesByIndexRequest
	GetLeavesByIndexResponse
	GetSequencedLeafCountRequest
	GetSequencedLeafCountResponse
	GetLatestSignedLogRootRequest
	GetLatestSignedLogRootResponse
	GetEntryAndProofRequest
	GetEntryAndProofResponse
	MapLeaf
	KeyValue
	KeyValueInclusion
	GetMapLeavesRequest
	GetMapLeavesResponse
	SetMapLeavesRequest
	SetMapLeavesResponse
	GetSignedMapRootRequest
	GetSignedMapRootResponse
	DigitallySigned
	SignedEntryTimestamp
	SignedLogRoot
	MapperMetadata
	SignedMapRoot
*/
package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TrillianApiStatusCode is an application level status code
type TrillianApiStatusCode int32

const (
	TrillianApiStatusCode_OK    TrillianApiStatusCode = 0
	TrillianApiStatusCode_ERROR TrillianApiStatusCode = 1
)

var TrillianApiStatusCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var TrillianApiStatusCode_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x TrillianApiStatusCode) String() string {
	return proto.EnumName(TrillianApiStatusCode_name, int32(x))
}
func (TrillianApiStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// All operations return a TrillianApiStatus.
// TODO(Martin2112): Most of the operations are not fully defined yet. They will be implemented soon
type TrillianApiStatus struct {
	// The status code indicates the overall result of the operation.
	StatusCode TrillianApiStatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,enum=trillian.TrillianApiStatusCode" json:"status_code,omitempty"`
	// Applications should not make assumptions about the contents of description. They
	// should use status_code only when making error handling decisions.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *TrillianApiStatus) Reset()                    { *m = TrillianApiStatus{} }
func (m *TrillianApiStatus) String() string            { return proto.CompactTextString(m) }
func (*TrillianApiStatus) ProtoMessage()               {}
func (*TrillianApiStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TrillianApiStatus) GetStatusCode() TrillianApiStatusCode {
	if m != nil {
		return m.StatusCode
	}
	return TrillianApiStatusCode_OK
}

func (m *TrillianApiStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type LogLeaf struct {
	// merkle_leaf_hash is over leaf data and optional extra_data.
	MerkleLeafHash []byte `protobuf:"bytes,1,opt,name=merkle_leaf_hash,json=merkleLeafHash,proto3" json:"merkle_leaf_hash,omitempty"`
	// leaf_value contains arbitrary data.
	LeafValue []byte `protobuf:"bytes,2,opt,name=leaf_value,json=leafValue,proto3" json:"leaf_value,omitempty"`
	// extra_data is optional metadata. e.g. a timestamp.
	ExtraData []byte `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// leaf_index is optional. Trillian will assign the next available index when unset.
	// TODO: remove this into separate AddSequencedLeaves API.
	LeafIndex int64 `protobuf:"varint,4,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	// leaf_value_hash is over leaf_value to support deduping.
	LeafValueHash []byte `protobuf:"bytes,5,opt,name=leaf_value_hash,json=leafValueHash,proto3" json:"leaf_value_hash,omitempty"`
}

func (m *LogLeaf) Reset()                    { *m = LogLeaf{} }
func (m *LogLeaf) String() string            { return proto.CompactTextString(m) }
func (*LogLeaf) ProtoMessage()               {}
func (*LogLeaf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogLeaf) GetMerkleLeafHash() []byte {
	if m != nil {
		return m.MerkleLeafHash
	}
	return nil
}

func (m *LogLeaf) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *LogLeaf) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *LogLeaf) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *LogLeaf) GetLeafValueHash() []byte {
	if m != nil {
		return m.LeafValueHash
	}
	return nil
}

type Node struct {
	NodeId       []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeHash     []byte `protobuf:"bytes,2,opt,name=node_hash,json=nodeHash,proto3" json:"node_hash,omitempty"`
	NodeRevision int64  `protobuf:"varint,3,opt,name=node_revision,json=nodeRevision" json:"node_revision,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Node) GetNodeHash() []byte {
	if m != nil {
		return m.NodeHash
	}
	return nil
}

func (m *Node) GetNodeRevision() int64 {
	if m != nil {
		return m.NodeRevision
	}
	return 0
}

type Proof struct {
	LeafIndex int64   `protobuf:"varint,1,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	ProofNode []*Node `protobuf:"bytes,2,rep,name=proof_node,json=proofNode" json:"proof_node,omitempty"`
}

func (m *Proof) Reset()                    { *m = Proof{} }
func (m *Proof) String() string            { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()               {}
func (*Proof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Proof) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *Proof) GetProofNode() []*Node {
	if m != nil {
		return m.ProofNode
	}
	return nil
}

type QueueLeavesRequest struct {
	LogId  int64      `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Leaves []*LogLeaf `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *QueueLeavesRequest) Reset()                    { *m = QueueLeavesRequest{} }
func (m *QueueLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueLeavesRequest) ProtoMessage()               {}
func (*QueueLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueueLeavesRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *QueueLeavesRequest) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

// TODO(Martin2112): This will eventually contain the signed timestamps and stuff that we return for
// the queued leaves
type QueueLeavesResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *QueueLeavesResponse) Reset()                    { *m = QueueLeavesResponse{} }
func (m *QueueLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueLeavesResponse) ProtoMessage()               {}
func (*QueueLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueueLeavesResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetInclusionProofRequest struct {
	LogId     int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex int64 `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	TreeSize  int64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *GetInclusionProofRequest) Reset()                    { *m = GetInclusionProofRequest{} }
func (m *GetInclusionProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofRequest) ProtoMessage()               {}
func (*GetInclusionProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetInclusionProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetInclusionProofRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *GetInclusionProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type GetInclusionProofResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Proof  *Proof             `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetInclusionProofResponse) Reset()                    { *m = GetInclusionProofResponse{} }
func (m *GetInclusionProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofResponse) ProtoMessage()               {}
func (*GetInclusionProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetInclusionProofResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetInclusionProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetInclusionProofByHashRequest struct {
	LogId           int64  `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafHash        []byte `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	TreeSize        int64  `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	OrderBySequence bool   `protobuf:"varint,4,opt,name=order_by_sequence,json=orderBySequence" json:"order_by_sequence,omitempty"`
}

func (m *GetInclusionProofByHashRequest) Reset()                    { *m = GetInclusionProofByHashRequest{} }
func (m *GetInclusionProofByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofByHashRequest) ProtoMessage()               {}
func (*GetInclusionProofByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetInclusionProofByHashRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetInclusionProofByHashRequest) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *GetInclusionProofByHashRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *GetInclusionProofByHashRequest) GetOrderBySequence() bool {
	if m != nil {
		return m.OrderBySequence
	}
	return false
}

type GetInclusionProofByHashResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Logs can potentially contain leaves with duplicate hashes so it's possible
	// for this to return multiple proofs.
	Proof []*Proof `protobuf:"bytes,2,rep,name=proof" json:"proof,omitempty"`
}

func (m *GetInclusionProofByHashResponse) Reset()                    { *m = GetInclusionProofByHashResponse{} }
func (m *GetInclusionProofByHashResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInclusionProofByHashResponse) ProtoMessage()               {}
func (*GetInclusionProofByHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetInclusionProofByHashResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetInclusionProofByHashResponse) GetProof() []*Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetConsistencyProofRequest struct {
	LogId          int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	FirstTreeSize  int64 `protobuf:"varint,2,opt,name=first_tree_size,json=firstTreeSize" json:"first_tree_size,omitempty"`
	SecondTreeSize int64 `protobuf:"varint,3,opt,name=second_tree_size,json=secondTreeSize" json:"second_tree_size,omitempty"`
}

func (m *GetConsistencyProofRequest) Reset()                    { *m = GetConsistencyProofRequest{} }
func (m *GetConsistencyProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofRequest) ProtoMessage()               {}
func (*GetConsistencyProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetConsistencyProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetConsistencyProofRequest) GetFirstTreeSize() int64 {
	if m != nil {
		return m.FirstTreeSize
	}
	return 0
}

func (m *GetConsistencyProofRequest) GetSecondTreeSize() int64 {
	if m != nil {
		return m.SecondTreeSize
	}
	return 0
}

type GetConsistencyProofResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Proof  *Proof             `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetConsistencyProofResponse) Reset()                    { *m = GetConsistencyProofResponse{} }
func (m *GetConsistencyProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConsistencyProofResponse) ProtoMessage()               {}
func (*GetConsistencyProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetConsistencyProofResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetConsistencyProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetLeavesByHashRequest struct {
	LogId           int64    `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafHash        [][]byte `protobuf:"bytes,2,rep,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	OrderBySequence bool     `protobuf:"varint,3,opt,name=order_by_sequence,json=orderBySequence" json:"order_by_sequence,omitempty"`
}

func (m *GetLeavesByHashRequest) Reset()                    { *m = GetLeavesByHashRequest{} }
func (m *GetLeavesByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByHashRequest) ProtoMessage()               {}
func (*GetLeavesByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetLeavesByHashRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetLeavesByHashRequest) GetLeafHash() [][]byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *GetLeavesByHashRequest) GetOrderBySequence() bool {
	if m != nil {
		return m.OrderBySequence
	}
	return false
}

type GetLeavesByHashResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Leaves []*LogLeaf         `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *GetLeavesByHashResponse) Reset()                    { *m = GetLeavesByHashResponse{} }
func (m *GetLeavesByHashResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByHashResponse) ProtoMessage()               {}
func (*GetLeavesByHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetLeavesByHashResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetLeavesByHashResponse) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type GetLeavesByIndexRequest struct {
	LogId     int64   `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex []int64 `protobuf:"varint,2,rep,packed,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
}

func (m *GetLeavesByIndexRequest) Reset()                    { *m = GetLeavesByIndexRequest{} }
func (m *GetLeavesByIndexRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByIndexRequest) ProtoMessage()               {}
func (*GetLeavesByIndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetLeavesByIndexRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetLeavesByIndexRequest) GetLeafIndex() []int64 {
	if m != nil {
		return m.LeafIndex
	}
	return nil
}

type GetLeavesByIndexResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Leaves []*LogLeaf         `protobuf:"bytes,2,rep,name=leaves" json:"leaves,omitempty"`
}

func (m *GetLeavesByIndexResponse) Reset()                    { *m = GetLeavesByIndexResponse{} }
func (m *GetLeavesByIndexResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLeavesByIndexResponse) ProtoMessage()               {}
func (*GetLeavesByIndexResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetLeavesByIndexResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetLeavesByIndexResponse) GetLeaves() []*LogLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type GetSequencedLeafCountRequest struct {
	LogId int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *GetSequencedLeafCountRequest) Reset()                    { *m = GetSequencedLeafCountRequest{} }
func (m *GetSequencedLeafCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSequencedLeafCountRequest) ProtoMessage()               {}
func (*GetSequencedLeafCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSequencedLeafCountRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

type GetSequencedLeafCountResponse struct {
	Status    *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	LeafCount int64              `protobuf:"varint,2,opt,name=leaf_count,json=leafCount" json:"leaf_count,omitempty"`
}

func (m *GetSequencedLeafCountResponse) Reset()                    { *m = GetSequencedLeafCountResponse{} }
func (m *GetSequencedLeafCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSequencedLeafCountResponse) ProtoMessage()               {}
func (*GetSequencedLeafCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetSequencedLeafCountResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetSequencedLeafCountResponse) GetLeafCount() int64 {
	if m != nil {
		return m.LeafCount
	}
	return 0
}

type GetLatestSignedLogRootRequest struct {
	LogId int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *GetLatestSignedLogRootRequest) Reset()                    { *m = GetLatestSignedLogRootRequest{} }
func (m *GetLatestSignedLogRootRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSignedLogRootRequest) ProtoMessage()               {}
func (*GetLatestSignedLogRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetLatestSignedLogRootRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

type GetLatestSignedLogRootResponse struct {
	Status        *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	SignedLogRoot *SignedLogRoot     `protobuf:"bytes,2,opt,name=signed_log_root,json=signedLogRoot" json:"signed_log_root,omitempty"`
}

func (m *GetLatestSignedLogRootResponse) Reset()                    { *m = GetLatestSignedLogRootResponse{} }
func (m *GetLatestSignedLogRootResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSignedLogRootResponse) ProtoMessage()               {}
func (*GetLatestSignedLogRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetLatestSignedLogRootResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetLatestSignedLogRootResponse) GetSignedLogRoot() *SignedLogRoot {
	if m != nil {
		return m.SignedLogRoot
	}
	return nil
}

type GetEntryAndProofRequest struct {
	LogId     int64 `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	LeafIndex int64 `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	TreeSize  int64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *GetEntryAndProofRequest) Reset()                    { *m = GetEntryAndProofRequest{} }
func (m *GetEntryAndProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryAndProofRequest) ProtoMessage()               {}
func (*GetEntryAndProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetEntryAndProofRequest) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *GetEntryAndProofRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *GetEntryAndProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type GetEntryAndProofResponse struct {
	Status *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Proof  *Proof             `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
	Leaf   *LogLeaf           `protobuf:"bytes,3,opt,name=leaf" json:"leaf,omitempty"`
}

func (m *GetEntryAndProofResponse) Reset()                    { *m = GetEntryAndProofResponse{} }
func (m *GetEntryAndProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryAndProofResponse) ProtoMessage()               {}
func (*GetEntryAndProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetEntryAndProofResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetEntryAndProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *GetEntryAndProofResponse) GetLeaf() *LogLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

// MapLeaf represents the data behind Map leaves.
type MapLeaf struct {
	// key_hash is the hash of the key for this leaf.
	KeyHash []byte `protobuf:"bytes,1,opt,name=key_hash,json=keyHash,proto3" json:"key_hash,omitempty"`
	// leaf_hash is the tree hash of leaf_value.
	LeafHash []byte `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	// leaf_value is the data the tree commits to.
	LeafValue []byte `protobuf:"bytes,3,opt,name=leaf_value,json=leafValue,proto3" json:"leaf_value,omitempty"`
	// extra_data holds related contextual data, but is not covered by any hash.
	ExtraData []byte `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *MapLeaf) Reset()                    { *m = MapLeaf{} }
func (m *MapLeaf) String() string            { return proto.CompactTextString(m) }
func (*MapLeaf) ProtoMessage()               {}
func (*MapLeaf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MapLeaf) GetKeyHash() []byte {
	if m != nil {
		return m.KeyHash
	}
	return nil
}

func (m *MapLeaf) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MapLeaf) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *MapLeaf) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

type KeyValue struct {
	Key   []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *MapLeaf `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() *MapLeaf {
	if m != nil {
		return m.Value
	}
	return nil
}

type KeyValueInclusion struct {
	KeyValue  *KeyValue `protobuf:"bytes,1,opt,name=key_value,json=keyValue" json:"key_value,omitempty"`
	Inclusion [][]byte  `protobuf:"bytes,2,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
}

func (m *KeyValueInclusion) Reset()                    { *m = KeyValueInclusion{} }
func (m *KeyValueInclusion) String() string            { return proto.CompactTextString(m) }
func (*KeyValueInclusion) ProtoMessage()               {}
func (*KeyValueInclusion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *KeyValueInclusion) GetKeyValue() *KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *KeyValueInclusion) GetInclusion() [][]byte {
	if m != nil {
		return m.Inclusion
	}
	return nil
}

type GetMapLeavesRequest struct {
	MapId    int64    `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	Key      [][]byte `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	Revision int64    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *GetMapLeavesRequest) Reset()                    { *m = GetMapLeavesRequest{} }
func (m *GetMapLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMapLeavesRequest) ProtoMessage()               {}
func (*GetMapLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeavesRequest) GetKey() [][]byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetMapLeavesRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type GetMapLeavesResponse struct {
	Status   *TrillianApiStatus   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	KeyValue []*KeyValueInclusion `protobuf:"bytes,2,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
	MapRoot  *SignedMapRoot       `protobuf:"bytes,3,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *GetMapLeavesResponse) Reset()                    { *m = GetMapLeavesResponse{} }
func (m *GetMapLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMapLeavesResponse) ProtoMessage()               {}
func (*GetMapLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetMapLeavesResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetMapLeavesResponse) GetKeyValue() []*KeyValueInclusion {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *GetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type SetMapLeavesRequest struct {
	MapId      int64           `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	KeyValue   []*KeyValue     `protobuf:"bytes,2,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
	MapperData *MapperMetadata `protobuf:"bytes,3,opt,name=mapper_data,json=mapperData" json:"mapper_data,omitempty"`
}

func (m *SetMapLeavesRequest) Reset()                    { *m = SetMapLeavesRequest{} }
func (m *SetMapLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMapLeavesRequest) ProtoMessage()               {}
func (*SetMapLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *SetMapLeavesRequest) GetKeyValue() []*KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *SetMapLeavesRequest) GetMapperData() *MapperMetadata {
	if m != nil {
		return m.MapperData
	}
	return nil
}

type SetMapLeavesResponse struct {
	Status  *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	MapRoot *SignedMapRoot     `protobuf:"bytes,2,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *SetMapLeavesResponse) Reset()                    { *m = SetMapLeavesResponse{} }
func (m *SetMapLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMapLeavesResponse) ProtoMessage()               {}
func (*SetMapLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SetMapLeavesResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type GetSignedMapRootRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
}

func (m *GetSignedMapRootRequest) Reset()                    { *m = GetSignedMapRootRequest{} }
func (m *GetSignedMapRootRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSignedMapRootRequest) ProtoMessage()               {}
func (*GetSignedMapRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetSignedMapRootRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

type GetSignedMapRootResponse struct {
	Status  *TrillianApiStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	MapRoot *SignedMapRoot     `protobuf:"bytes,2,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *GetSignedMapRootResponse) Reset()                    { *m = GetSignedMapRootResponse{} }
func (m *GetSignedMapRootResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSignedMapRootResponse) ProtoMessage()               {}
func (*GetSignedMapRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetSignedMapRootResponse) GetStatus() *TrillianApiStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetSignedMapRootResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*TrillianApiStatus)(nil), "trillian.TrillianApiStatus")
	proto.RegisterType((*LogLeaf)(nil), "trillian.LogLeaf")
	proto.RegisterType((*Node)(nil), "trillian.Node")
	proto.RegisterType((*Proof)(nil), "trillian.Proof")
	proto.RegisterType((*QueueLeavesRequest)(nil), "trillian.QueueLeavesRequest")
	proto.RegisterType((*QueueLeavesResponse)(nil), "trillian.QueueLeavesResponse")
	proto.RegisterType((*GetInclusionProofRequest)(nil), "trillian.GetInclusionProofRequest")
	proto.RegisterType((*GetInclusionProofResponse)(nil), "trillian.GetInclusionProofResponse")
	proto.RegisterType((*GetInclusionProofByHashRequest)(nil), "trillian.GetInclusionProofByHashRequest")
	proto.RegisterType((*GetInclusionProofByHashResponse)(nil), "trillian.GetInclusionProofByHashResponse")
	proto.RegisterType((*GetConsistencyProofRequest)(nil), "trillian.GetConsistencyProofRequest")
	proto.RegisterType((*GetConsistencyProofResponse)(nil), "trillian.GetConsistencyProofResponse")
	proto.RegisterType((*GetLeavesByHashRequest)(nil), "trillian.GetLeavesByHashRequest")
	proto.RegisterType((*GetLeavesByHashResponse)(nil), "trillian.GetLeavesByHashResponse")
	proto.RegisterType((*GetLeavesByIndexRequest)(nil), "trillian.GetLeavesByIndexRequest")
	proto.RegisterType((*GetLeavesByIndexResponse)(nil), "trillian.GetLeavesByIndexResponse")
	proto.RegisterType((*GetSequencedLeafCountRequest)(nil), "trillian.GetSequencedLeafCountRequest")
	proto.RegisterType((*GetSequencedLeafCountResponse)(nil), "trillian.GetSequencedLeafCountResponse")
	proto.RegisterType((*GetLatestSignedLogRootRequest)(nil), "trillian.GetLatestSignedLogRootRequest")
	proto.RegisterType((*GetLatestSignedLogRootResponse)(nil), "trillian.GetLatestSignedLogRootResponse")
	proto.RegisterType((*GetEntryAndProofRequest)(nil), "trillian.GetEntryAndProofRequest")
	proto.RegisterType((*GetEntryAndProofResponse)(nil), "trillian.GetEntryAndProofResponse")
	proto.RegisterType((*MapLeaf)(nil), "trillian.MapLeaf")
	proto.RegisterType((*KeyValue)(nil), "trillian.KeyValue")
	proto.RegisterType((*KeyValueInclusion)(nil), "trillian.KeyValueInclusion")
	proto.RegisterType((*GetMapLeavesRequest)(nil), "trillian.GetMapLeavesRequest")
	proto.RegisterType((*GetMapLeavesResponse)(nil), "trillian.GetMapLeavesResponse")
	proto.RegisterType((*SetMapLeavesRequest)(nil), "trillian.SetMapLeavesRequest")
	proto.RegisterType((*SetMapLeavesResponse)(nil), "trillian.SetMapLeavesResponse")
	proto.RegisterType((*GetSignedMapRootRequest)(nil), "trillian.GetSignedMapRootRequest")
	proto.RegisterType((*GetSignedMapRootResponse)(nil), "trillian.GetSignedMapRootResponse")
	proto.RegisterEnum("trillian.TrillianApiStatusCode", TrillianApiStatusCode_name, TrillianApiStatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrillianLog service

type TrillianLogClient interface {
	// Corresponds to the LeafQueuer API
	QueueLeaves(ctx context.Context, in *QueueLeavesRequest, opts ...grpc.CallOption) (*QueueLeavesResponse, error)
	// No direct equivalent at the storage level
	GetInclusionProof(ctx context.Context, in *GetInclusionProofRequest, opts ...grpc.CallOption) (*GetInclusionProofResponse, error)
	GetInclusionProofByHash(ctx context.Context, in *GetInclusionProofByHashRequest, opts ...grpc.CallOption) (*GetInclusionProofByHashResponse, error)
	GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error)
	// Corresponds to the LogRootReader API
	GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error)
	// Corresponds to the LeafReader API
	GetSequencedLeafCount(ctx context.Context, in *GetSequencedLeafCountRequest, opts ...grpc.CallOption) (*GetSequencedLeafCountResponse, error)
	GetLeavesByIndex(ctx context.Context, in *GetLeavesByIndexRequest, opts ...grpc.CallOption) (*GetLeavesByIndexResponse, error)
	GetLeavesByHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error)
	GetLeavesByLeafValueHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error)
	GetEntryAndProof(ctx context.Context, in *GetEntryAndProofRequest, opts ...grpc.CallOption) (*GetEntryAndProofResponse, error)
}

type trillianLogClient struct {
	cc *grpc.ClientConn
}

func NewTrillianLogClient(cc *grpc.ClientConn) TrillianLogClient {
	return &trillianLogClient{cc}
}

func (c *trillianLogClient) QueueLeaves(ctx context.Context, in *QueueLeavesRequest, opts ...grpc.CallOption) (*QueueLeavesResponse, error) {
	out := new(QueueLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/QueueLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetInclusionProof(ctx context.Context, in *GetInclusionProofRequest, opts ...grpc.CallOption) (*GetInclusionProofResponse, error) {
	out := new(GetInclusionProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetInclusionProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetInclusionProofByHash(ctx context.Context, in *GetInclusionProofByHashRequest, opts ...grpc.CallOption) (*GetInclusionProofByHashResponse, error) {
	out := new(GetInclusionProofByHashResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetInclusionProofByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*GetConsistencyProofResponse, error) {
	out := new(GetConsistencyProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetConsistencyProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error) {
	out := new(GetLatestSignedLogRootResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLatestSignedLogRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetSequencedLeafCount(ctx context.Context, in *GetSequencedLeafCountRequest, opts ...grpc.CallOption) (*GetSequencedLeafCountResponse, error) {
	out := new(GetSequencedLeafCountResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetSequencedLeafCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByIndex(ctx context.Context, in *GetLeavesByIndexRequest, opts ...grpc.CallOption) (*GetLeavesByIndexResponse, error) {
	out := new(GetLeavesByIndexResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error) {
	out := new(GetLeavesByHashResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetLeavesByLeafValueHash(ctx context.Context, in *GetLeavesByHashRequest, opts ...grpc.CallOption) (*GetLeavesByHashResponse, error) {
	out := new(GetLeavesByHashResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetLeavesByLeafValueHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianLogClient) GetEntryAndProof(ctx context.Context, in *GetEntryAndProofRequest, opts ...grpc.CallOption) (*GetEntryAndProofResponse, error) {
	out := new(GetEntryAndProofResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianLog/GetEntryAndProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrillianLog service

type TrillianLogServer interface {
	// Corresponds to the LeafQueuer API
	QueueLeaves(context.Context, *QueueLeavesRequest) (*QueueLeavesResponse, error)
	// No direct equivalent at the storage level
	GetInclusionProof(context.Context, *GetInclusionProofRequest) (*GetInclusionProofResponse, error)
	GetInclusionProofByHash(context.Context, *GetInclusionProofByHashRequest) (*GetInclusionProofByHashResponse, error)
	GetConsistencyProof(context.Context, *GetConsistencyProofRequest) (*GetConsistencyProofResponse, error)
	// Corresponds to the LogRootReader API
	GetLatestSignedLogRoot(context.Context, *GetLatestSignedLogRootRequest) (*GetLatestSignedLogRootResponse, error)
	// Corresponds to the LeafReader API
	GetSequencedLeafCount(context.Context, *GetSequencedLeafCountRequest) (*GetSequencedLeafCountResponse, error)
	GetLeavesByIndex(context.Context, *GetLeavesByIndexRequest) (*GetLeavesByIndexResponse, error)
	GetLeavesByHash(context.Context, *GetLeavesByHashRequest) (*GetLeavesByHashResponse, error)
	GetLeavesByLeafValueHash(context.Context, *GetLeavesByHashRequest) (*GetLeavesByHashResponse, error)
	GetEntryAndProof(context.Context, *GetEntryAndProofRequest) (*GetEntryAndProofResponse, error)
}

func RegisterTrillianLogServer(s *grpc.Server, srv TrillianLogServer) {
	s.RegisterService(&_TrillianLog_serviceDesc, srv)
}

func _TrillianLog_QueueLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).QueueLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/QueueLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).QueueLeaves(ctx, req.(*QueueLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetInclusionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInclusionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetInclusionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetInclusionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetInclusionProof(ctx, req.(*GetInclusionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetInclusionProofByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInclusionProofByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetInclusionProofByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetInclusionProofByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetInclusionProofByHash(ctx, req.(*GetInclusionProofByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetConsistencyProof(ctx, req.(*GetConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLatestSignedLogRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSignedLogRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLatestSignedLogRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLatestSignedLogRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLatestSignedLogRoot(ctx, req.(*GetLatestSignedLogRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetSequencedLeafCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSequencedLeafCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetSequencedLeafCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetSequencedLeafCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetSequencedLeafCount(ctx, req.(*GetSequencedLeafCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByIndex(ctx, req.(*GetLeavesByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByHash(ctx, req.(*GetLeavesByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetLeavesByLeafValueHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavesByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetLeavesByLeafValueHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetLeavesByLeafValueHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetLeavesByLeafValueHash(ctx, req.(*GetLeavesByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianLog_GetEntryAndProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryAndProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianLogServer).GetEntryAndProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianLog/GetEntryAndProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianLogServer).GetEntryAndProof(ctx, req.(*GetEntryAndProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianLog",
	HandlerType: (*TrillianLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueLeaves",
			Handler:    _TrillianLog_QueueLeaves_Handler,
		},
		{
			MethodName: "GetInclusionProof",
			Handler:    _TrillianLog_GetInclusionProof_Handler,
		},
		{
			MethodName: "GetInclusionProofByHash",
			Handler:    _TrillianLog_GetInclusionProofByHash_Handler,
		},
		{
			MethodName: "GetConsistencyProof",
			Handler:    _TrillianLog_GetConsistencyProof_Handler,
		},
		{
			MethodName: "GetLatestSignedLogRoot",
			Handler:    _TrillianLog_GetLatestSignedLogRoot_Handler,
		},
		{
			MethodName: "GetSequencedLeafCount",
			Handler:    _TrillianLog_GetSequencedLeafCount_Handler,
		},
		{
			MethodName: "GetLeavesByIndex",
			Handler:    _TrillianLog_GetLeavesByIndex_Handler,
		},
		{
			MethodName: "GetLeavesByHash",
			Handler:    _TrillianLog_GetLeavesByHash_Handler,
		},
		{
			MethodName: "GetLeavesByLeafValueHash",
			Handler:    _TrillianLog_GetLeavesByLeafValueHash_Handler,
		},
		{
			MethodName: "GetEntryAndProof",
			Handler:    _TrillianLog_GetEntryAndProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_api.proto",
}

// Client API for TrillianMap service

type TrillianMapClient interface {
	GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error)
	SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error)
}

type trillianMapClient struct {
	cc *grpc.ClientConn
}

func NewTrillianMapClient(cc *grpc.ClientConn) TrillianMapClient {
	return &trillianMapClient{cc}
}

func (c *trillianMapClient) GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error) {
	out := new(GetMapLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/GetLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error) {
	out := new(SetMapLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/SetLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error) {
	out := new(GetSignedMapRootResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/GetSignedMapRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrillianMap service

type TrillianMapServer interface {
	GetLeaves(context.Context, *GetMapLeavesRequest) (*GetMapLeavesResponse, error)
	SetLeaves(context.Context, *SetMapLeavesRequest) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(context.Context, *GetSignedMapRootRequest) (*GetSignedMapRootResponse, error)
}

func RegisterTrillianMapServer(s *grpc.Server, srv TrillianMapServer) {
	s.RegisterService(&_TrillianMap_serviceDesc, srv)
}

func _TrillianMap_GetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeaves(ctx, req.(*GetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_SetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).SetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/SetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).SetLeaves(ctx, req.(*SetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetSignedMapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedMapRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetSignedMapRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, req.(*GetSignedMapRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianMap",
	HandlerType: (*TrillianMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaves",
			Handler:    _TrillianMap_GetLeaves_Handler,
		},
		{
			MethodName: "SetLeaves",
			Handler:    _TrillianMap_SetLeaves_Handler,
		},
		{
			MethodName: "GetSignedMapRoot",
			Handler:    _TrillianMap_GetSignedMapRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_api.proto",
}

func init() { proto.RegisterFile("trillian_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x45, 0xeb, 0x34, 0x8a, 0x2d, 0x79, 0x93, 0xfc, 0x51, 0xa4, 0x38, 0x51, 0x36, 0x7f,
	0x12, 0x25, 0x40, 0x9d, 0x42, 0x41, 0x8b, 0xf6, 0xaa, 0x8d, 0xd3, 0xc0, 0x75, 0x23, 0x37, 0x2e,
	0x95, 0x06, 0x45, 0x0b, 0x94, 0xa0, 0xc5, 0xb5, 0xcc, 0x9a, 0xe2, 0xb2, 0x24, 0xe5, 0x58, 0x06,
	0x8a, 0x5c, 0x14, 0xed, 0x23, 0x14, 0xbd, 0xc9, 0x7b, 0xb4, 0x0f, 0xd4, 0xf7, 0x28, 0x76, 0x97,
	0x67, 0x51, 0x94, 0x53, 0x3b, 0xbe, 0xa3, 0xe6, 0xf0, 0xcd, 0xcc, 0xc7, 0xd9, 0xd9, 0xa1, 0x00,
	0x79, 0x8e, 0x61, 0x9a, 0x86, 0x66, 0xa9, 0x9a, 0x6d, 0x6c, 0xd8, 0x0e, 0xf5, 0x28, 0xaa, 0x04,
	0xb2, 0xd6, 0x6a, 0xf0, 0x24, 0x34, 0xf8, 0x35, 0xac, 0xbd, 0xf4, 0x25, 0x4f, 0x6c, 0x63, 0xe0,
	0x69, 0xde, 0xc4, 0x45, 0x9f, 0x43, 0xcd, 0xe5, 0x4f, 0xea, 0x90, 0xea, 0xa4, 0x29, 0x75, 0xa4,
	0xee, 0x6a, 0xef, 0xd6, 0x46, 0xe8, 0x3a, 0xe3, 0xf1, 0x94, 0xea, 0x44, 0x01, 0x37, 0x7c, 0x46,
	0x1d, 0xa8, 0xe9, 0xc4, 0x1d, 0x3a, 0x86, 0xed, 0x19, 0xd4, 0x6a, 0x16, 0x3a, 0x52, 0xb7, 0xaa,
	0xc4, 0x45, 0xf8, 0x2f, 0x09, 0xca, 0x7d, 0x3a, 0xea, 0x13, 0x6d, 0x1f, 0x75, 0xa1, 0x31, 0x26,
	0xce, 0xa1, 0x49, 0x54, 0x93, 0x68, 0xfb, 0xea, 0x81, 0xe6, 0x1e, 0xf0, 0xa0, 0x97, 0x94, 0x55,
	0x21, 0x67, 0x56, 0x5f, 0x6a, 0xee, 0x01, 0x5a, 0x07, 0xe0, 0x26, 0x47, 0x9a, 0x39, 0x21, 0x1c,
	0xf6, 0x92, 0x52, 0x65, 0x92, 0x57, 0x4c, 0xc0, 0xd4, 0xe4, 0xd8, 0x73, 0x34, 0x55, 0xd7, 0x3c,
	0xad, 0x29, 0x0b, 0x35, 0x97, 0x7c, 0xa1, 0x79, 0x5a, 0xe8, 0x6d, 0x58, 0x3a, 0x39, 0x6e, 0x2e,
	0x77, 0xa4, 0xae, 0x2c, 0xbc, 0xb7, 0x99, 0x00, 0xdd, 0x83, 0x7a, 0x04, 0x2e, 0xb2, 0x28, 0x72,
	0x88, 0x95, 0x30, 0x02, 0x4b, 0x02, 0x6b, 0xb0, 0xfc, 0x35, 0x2b, 0xf2, 0x1a, 0x94, 0x2d, 0xaa,
	0x13, 0xd5, 0xd0, 0xfd, 0x6c, 0x4b, 0xec, 0xe7, 0xb6, 0x8e, 0xda, 0x50, 0xe5, 0x0a, 0x0e, 0x21,
	0x92, 0xac, 0x30, 0x01, 0x2f, 0xe1, 0x0e, 0xac, 0x70, 0xa5, 0x43, 0x8e, 0x0c, 0x97, 0x91, 0x23,
	0xf3, 0x3c, 0x2e, 0x31, 0xa1, 0xe2, 0xcb, 0xf0, 0xb7, 0x50, 0xdc, 0x75, 0x28, 0xdd, 0x4f, 0xa5,
	0x2c, 0xa5, 0x53, 0xfe, 0x00, 0xc0, 0x66, 0x76, 0x2a, 0xf3, 0x6e, 0x16, 0x3a, 0x72, 0xb7, 0xd6,
	0x5b, 0x8d, 0x5e, 0x14, 0x4b, 0x53, 0xa9, 0x72, 0x0b, 0xf6, 0x88, 0x5f, 0x01, 0xfa, 0x66, 0x42,
	0x26, 0x8c, 0xcf, 0x23, 0xe2, 0x2a, 0xe4, 0xe7, 0x09, 0x71, 0x3d, 0x74, 0x15, 0x4a, 0x26, 0x1d,
	0x05, 0x65, 0xc8, 0x4a, 0xd1, 0xa4, 0xa3, 0x6d, 0x1d, 0x3d, 0x80, 0x92, 0xc9, 0xed, 0x7c, 0xdc,
	0xb5, 0x08, 0xd7, 0x7f, 0x71, 0x8a, 0x6f, 0x80, 0xbf, 0x82, 0xcb, 0x09, 0x5c, 0xd7, 0xa6, 0x96,
	0x4b, 0xd0, 0x63, 0x28, 0x89, 0x9e, 0xe0, 0xc0, 0xb5, 0x5e, 0x3b, 0xa7, 0x85, 0x14, 0xdf, 0x14,
	0x8f, 0xa1, 0xb9, 0x45, 0xbc, 0x6d, 0x6b, 0x68, 0x4e, 0x18, 0x15, 0x9c, 0x86, 0x05, 0x99, 0x26,
	0x49, 0x2a, 0xa4, 0x49, 0x6a, 0x43, 0xd5, 0x73, 0x08, 0x51, 0x5d, 0xe3, 0x84, 0xf8, 0x6c, 0x57,
	0x98, 0x60, 0x60, 0x9c, 0x10, 0xfc, 0x1a, 0xae, 0x67, 0x84, 0x3b, 0x43, 0x01, 0xe8, 0x2e, 0x14,
	0x39, 0xe3, 0x3c, 0x91, 0x5a, 0xaf, 0x1e, 0xf9, 0x08, 0x70, 0xa1, 0xc5, 0x6f, 0x25, 0xb8, 0x39,
	0x13, 0x79, 0x73, 0xca, 0x7a, 0x64, 0x41, 0xb9, 0x6d, 0xa8, 0x46, 0xe7, 0xc4, 0x6f, 0x2f, 0x33,
	0x38, 0x21, 0x79, 0xc5, 0xa2, 0x87, 0xb0, 0x46, 0x1d, 0x9d, 0x38, 0xea, 0xde, 0x54, 0x75, 0x59,
	0x10, 0x6b, 0x48, 0xf8, 0x39, 0xa8, 0x28, 0x75, 0xae, 0xd8, 0x9c, 0x0e, 0x7c, 0x31, 0xfe, 0x05,
	0x6e, 0xcd, 0x4d, 0xef, 0x9c, 0xe8, 0x91, 0x73, 0xe8, 0xf9, 0x4d, 0x82, 0xd6, 0x16, 0xf1, 0x9e,
	0x52, 0xcb, 0x35, 0x5c, 0x8f, 0x58, 0xc3, 0xe9, 0x69, 0x3a, 0xe1, 0x1e, 0xd4, 0xf7, 0x0d, 0xc7,
	0xf5, 0xd4, 0x88, 0x03, 0xd1, 0x0e, 0x2b, 0x5c, 0xfc, 0x32, 0x20, 0xa2, 0x0b, 0x0d, 0x97, 0x0c,
	0xa9, 0xa5, 0xab, 0x69, 0xb2, 0x56, 0x85, 0x3c, 0xb0, 0xc4, 0x53, 0x68, 0x67, 0xa6, 0x71, 0x01,
	0x1d, 0x72, 0x0c, 0xff, 0xdb, 0x22, 0x9e, 0x38, 0x53, 0xff, 0xa5, 0x31, 0xe4, 0x44, 0x63, 0x64,
	0xbe, 0x7b, 0x39, 0xfb, 0xdd, 0x4f, 0xe1, 0xda, 0x4c, 0xe4, 0xb3, 0x14, 0xfc, 0x0e, 0xa3, 0xe4,
	0x45, 0x22, 0x34, 0x3f, 0xc0, 0xef, 0x78, 0xfa, 0xe5, 0xc4, 0xe9, 0xc7, 0x27, 0x7c, 0x9e, 0xa4,
	0x00, 0x2f, 0xa8, 0x98, 0x8f, 0xe0, 0xc6, 0x16, 0xf1, 0x02, 0x5a, 0x75, 0xa6, 0x7b, 0x4a, 0x27,
	0x96, 0x97, 0x5f, 0x11, 0x76, 0x61, 0x7d, 0x8e, 0xdb, 0x59, 0xf2, 0x0e, 0x78, 0x1a, 0x32, 0xa8,
	0xf8, 0x94, 0xe4, 0xd8, 0xf8, 0x63, 0x1e, 0xb4, 0xaf, 0x79, 0xc4, 0xf5, 0x06, 0xc6, 0xc8, 0x22,
	0x7a, 0x9f, 0x8e, 0x14, 0x4a, 0x17, 0x25, 0xfb, 0x87, 0x98, 0x63, 0x99, 0x8e, 0x67, 0x49, 0xf7,
	0x33, 0xa8, 0xbb, 0x1c, 0x4d, 0x65, 0x51, 0x1d, 0x4a, 0x3d, 0xff, 0xb8, 0x5c, 0x8b, 0xbc, 0x93,
	0xe1, 0x56, 0xdc, 0xf8, 0x4f, 0x6c, 0xf2, 0x4e, 0x7a, 0x66, 0x79, 0xce, 0xf4, 0x89, 0xa5, 0xbf,
	0xef, 0x7b, 0xe4, 0xad, 0xc4, 0xfb, 0x2c, 0x15, 0xee, 0xfd, 0x4f, 0x09, 0x74, 0x17, 0x96, 0x59,
	0x8a, 0x3c, 0xa1, 0xcc, 0x66, 0xe4, 0x6a, 0xfc, 0x06, 0xca, 0x3b, 0x9a, 0xcd, 0xd7, 0xad, 0xeb,
	0x50, 0x39, 0x24, 0xd3, 0xf8, 0x9a, 0x55, 0x3e, 0x24, 0xd3, 0xe0, 0xf6, 0x98, 0x7f, 0xb5, 0x24,
	0x97, 0x2f, 0x39, 0x7f, 0xf9, 0x5a, 0x4e, 0x2d, 0x5f, 0xf8, 0x19, 0x54, 0x9e, 0x93, 0xa9, 0x30,
	0x6d, 0x80, 0x7c, 0x48, 0xa6, 0x7e, 0x70, 0xf6, 0x88, 0xee, 0x43, 0x31, 0xda, 0xe9, 0x12, 0x65,
	0xf8, 0x59, 0x2b, 0x42, 0x8f, 0xf7, 0x60, 0x2d, 0x80, 0x09, 0xef, 0x26, 0xf4, 0x08, 0xaa, 0xac,
	0x22, 0x81, 0x20, 0x28, 0x46, 0x11, 0x42, 0x60, 0xaf, 0xb0, 0xb2, 0x45, 0x02, 0x37, 0xa0, 0x6a,
	0x04, 0xde, 0xfe, 0xa4, 0x8c, 0x04, 0xf8, 0x7b, 0xb8, 0xbc, 0x45, 0x3c, 0x11, 0x38, 0xb9, 0x27,
	0x8d, 0x35, 0x3b, 0xd6, 0x35, 0x63, 0xcd, 0xde, 0xd6, 0x83, 0x62, 0x04, 0x0a, 0x2f, 0xa6, 0x05,
	0x95, 0xd4, 0x76, 0x17, 0xfe, 0xc6, 0x7f, 0x4b, 0x70, 0x25, 0x09, 0x7e, 0x96, 0x1e, 0xf9, 0x24,
	0x5e, 0xb8, 0x18, 0x47, 0xed, 0xd9, 0xc2, 0x43, 0xa2, 0x62, 0x0c, 0xf4, 0xa0, 0xc2, 0x8a, 0xe1,
	0xe7, 0x4a, 0xce, 0x3e, 0x57, 0x3b, 0x9a, 0xcd, 0xcf, 0x55, 0x79, 0x2c, 0x1e, 0xf0, 0x9f, 0x12,
	0x5c, 0x1e, 0x9c, 0x9e, 0x98, 0x47, 0xb3, 0xc9, 0xe5, 0xbf, 0x95, 0x4f, 0xa1, 0x36, 0xd6, 0x6c,
	0x9b, 0x38, 0xd1, 0xfe, 0x5e, 0xeb, 0x35, 0x13, 0xad, 0x60, 0x13, 0x67, 0x87, 0x78, 0x1a, 0xd3,
	0x2b, 0x20, 0x8c, 0x79, 0x77, 0xbd, 0x81, 0x2b, 0x83, 0x73, 0x63, 0x35, 0xce, 0x4d, 0xe1, 0x94,
	0xdc, 0x7c, 0xc8, 0xa7, 0x4d, 0x52, 0x99, 0x4b, 0x0f, 0xfe, 0x55, 0x4c, 0x8c, 0x94, 0xcb, 0x05,
	0xe7, 0xfd, 0xf0, 0x21, 0x5c, 0xcd, 0xfc, 0x9c, 0x43, 0x25, 0x28, 0xbc, 0x78, 0xde, 0x58, 0x42,
	0x55, 0x28, 0x3e, 0x53, 0x94, 0x17, 0x4a, 0x43, 0xea, 0xfd, 0x53, 0x86, 0x5a, 0x60, 0xdc, 0xa7,
	0x23, 0xd4, 0x87, 0x5a, 0x6c, 0xed, 0x47, 0x37, 0xa2, 0x60, 0xb3, 0x5f, 0x19, 0xad, 0xf5, 0x39,
	0x5a, 0x51, 0x30, 0x5e, 0x42, 0x3f, 0xc2, 0xda, 0xcc, 0xc2, 0x89, 0x70, 0xe4, 0x35, 0xef, 0xab,
	0xa0, 0x75, 0x27, 0xd7, 0x26, 0xc4, 0xb7, 0xf9, 0x1b, 0xca, 0x5a, 0x68, 0x51, 0x37, 0x07, 0x21,
	0xb1, 0x79, 0xb5, 0x1e, 0x9c, 0xc2, 0x32, 0x8c, 0xa8, 0xf3, 0x39, 0x92, 0xde, 0x1d, 0xd1, 0xff,
	0x13, 0x18, 0x73, 0x36, 0xdc, 0xd6, 0xdd, 0x05, 0x56, 0x61, 0x94, 0xb1, 0x58, 0x13, 0x67, 0xef,
	0x5f, 0x74, 0x3f, 0x01, 0x31, 0xff, 0x6a, 0x6f, 0x75, 0x17, 0x1b, 0x86, 0xe1, 0x7e, 0x82, 0xab,
	0x99, 0xcb, 0x09, 0xba, 0x97, 0x00, 0x99, 0xbb, 0xf4, 0xb4, 0xee, 0x2f, 0xb4, 0x0b, 0x63, 0xfd,
	0x00, 0x8d, 0xf4, 0xee, 0x86, 0x6e, 0x27, 0x73, 0xcd, 0x58, 0x14, 0x5b, 0x38, 0xcf, 0x24, 0x04,
	0xff, 0x0e, 0xea, 0xa9, 0x25, 0x17, 0x75, 0x32, 0x1d, 0xe3, 0xef, 0xff, 0x76, 0x8e, 0x45, 0x88,
	0xac, 0x25, 0x56, 0xce, 0x7e, 0xfc, 0xcf, 0x83, 0xf3, 0x0a, 0x21, 0x98, 0x49, 0x6c, 0x1b, 0x29,
	0x66, 0xb2, 0x16, 0x9f, 0x14, 0x33, 0x99, 0xcb, 0x0a, 0x5e, 0xea, 0xfd, 0x5e, 0x88, 0xce, 0xf9,
	0x8e, 0x66, 0xa3, 0x3e, 0x54, 0xc3, 0x4c, 0xd0, 0x7a, 0x02, 0x22, 0x7d, 0x17, 0xb4, 0x6e, 0xce,
	0x53, 0x87, 0xa9, 0xf7, 0xa1, 0x3a, 0xc8, 0x42, 0x1b, 0xe4, 0xa3, 0x0d, 0xb2, 0xd1, 0x04, 0x11,
	0x89, 0xe1, 0x96, 0x22, 0x22, 0x6b, 0x26, 0xa7, 0x88, 0xc8, 0x9c, 0xc1, 0x78, 0x69, 0xf3, 0x11,
	0x5c, 0x1f, 0xd2, 0xf1, 0xc6, 0x88, 0xd2, 0x91, 0x49, 0x36, 0x92, 0x7f, 0x9d, 0x6d, 0x36, 0x62,
	0x73, 0x73, 0x97, 0x49, 0x76, 0xa5, 0xbd, 0x12, 0x57, 0x3d, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0x38, 0xc1, 0xf5, 0x85, 0x13, 0x00, 0x00,
}
