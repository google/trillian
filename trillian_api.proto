syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.google.trillian.proto";
option java_outer_classname = "TrillianApiProto";

package trillian;

import "github.com/google/trillian/trillian.proto";

// TrillianApiStatusCode is an application level status code
enum TrillianApiStatusCode {
    OK = 0;
    ERROR = 1;
}

// All operations return a TrillianApiStatus.
// TODO(Martin2112): Most of the operations are not fully defined yet. They will be implemented soon
message TrillianApiStatus {
    // The status code indicates the overall result of the operation.
    TrillianApiStatusCode status_code = 1;
    // Applications should not make assumptions about the contents of description. They
    // should use status_code only when making error handling decisions.
    string description = 2;
}

message LeafProto {
    bytes leaf_hash = 1;
    bytes leaf_data = 2;
    bytes extra_data = 3;
    int64 leaf_index = 4;
}

message NodeProto {
    bytes node_id = 1;
    bytes node_hash = 2;
    int64 node_revision = 3;
}

message ProofProto {
    int64 leaf_index = 1;
    repeated NodeProto proof_node = 2;
}

message QueueLeavesRequest {
    int64 log_id = 1;
    repeated LeafProto leaves = 2;
}

// TODO(Martin2112): This will eventually contain the signed timestamps and stuff that we return for
// the queued leaves
message QueueLeavesResponse {
    TrillianApiStatus status = 1;
}

message GetInclusionProofRequest {
    int64 log_id = 1;
    int64 leaf_index = 2;
    int64 tree_size = 3;
}

message GetInclusionProofResponse {
    TrillianApiStatus status = 1;
    ProofProto proof = 2;
}

message GetInclusionProofByHashRequest {
    int64 log_id = 1;
    bytes leaf_hash = 2;
    int64 tree_size = 3;
    bool order_by_sequence = 4;
}

message GetInclusionProofByHashResponse {
    TrillianApiStatus status = 1;
    // Logs can potentially contain leaves with duplicate hashes so it's possible
    // for this to return multiple proofs.
    repeated ProofProto proof = 2;
}

message GetConsistencyProofRequest {
    int64 log_id = 1;
    int64 first_tree_size = 2;
    int64 second_tree_size = 3;
}

message GetConsistencyProofResponse {
    TrillianApiStatus status = 1;
    ProofProto proof = 2;
}

message GetLeavesByHashRequest {
    int64 log_id = 1;
    repeated bytes leaf_hash = 2;
    bool order_by_sequence = 3;
}

message GetLeavesByHashResponse {
    TrillianApiStatus status = 1;
    repeated LeafProto leaves = 2;
}

message GetLeavesByIndexRequest {
    int64 log_id = 1;
    repeated int64 leaf_index = 2;
}

message GetLeavesByIndexResponse {
    TrillianApiStatus status = 1;
    repeated LeafProto leaves = 2;
}

message GetSequencedLeafCountRequest {
    int64 log_id = 1;
}

message GetSequencedLeafCountResponse {
    TrillianApiStatus status = 1;
}

message GetLatestSignedLogRootRequest {
    int64 log_id = 1;
}

message GetLatestSignedLogRootResponse {
    TrillianApiStatus status = 1;
    SignedLogRoot signed_log_root = 2;
}

message GetEntryAndProofRequest {
    int64 log_id = 1;
    int64 leaf_index = 2;
    int64 tree_size = 3;
}

message GetEntryAndProofResponse {
    TrillianApiStatus status = 1;
    ProofProto proof = 2;
    LeafProto leaf = 3;
}

// TrillianLog defines a service that can provide access to a Verifiable Log as defined in the
// Verifiable Data Structures paper. It provides direct access to a subset of storage APIs
// (for handling reads) and provides Log level ones such as being able to obtain proofs.
// Clients cannot directly modify the log data via this API.
service TrillianLog {
    // Corresponds to the LeafQueuer API
    rpc QueueLeaves (QueueLeavesRequest) returns (QueueLeavesResponse) {
    }

    // No direct equivalent at the storage level
    rpc GetInclusionProof (GetInclusionProofRequest) returns (GetInclusionProofResponse) {
    }
    rpc GetInclusionProofByHash (GetInclusionProofByHashRequest) returns (GetInclusionProofByHashResponse) {
    }
    rpc GetConsistencyProof (GetConsistencyProofRequest) returns (GetConsistencyProofResponse) {
    }

    // Corresponds to the LogRootReader API
    rpc GetLatestSignedLogRoot (GetLatestSignedLogRootRequest) returns (GetLatestSignedLogRootResponse) {
    }

    // Corresponds to the LeafReader API
    rpc GetSequencedLeafCount (GetSequencedLeafCountRequest) returns (GetSequencedLeafCountResponse) {
    }
    rpc GetLeavesByIndex (GetLeavesByIndexRequest) returns (GetLeavesByIndexResponse) {
    }
    rpc GetLeavesByHash (GetLeavesByHashRequest) returns (GetLeavesByHashResponse) {
    }
    rpc GetEntryAndProof (GetEntryAndProofRequest) returns (GetEntryAndProofResponse) {
    }
}

// MapLeaf represents the data behind Map leaves.
message MapLeaf {
  // leaf_hash is the tree hash of leaf_value.
  bytes leaf_hash = 1;
  // leaf_value is the data the tree commits to.
  bytes leaf_value = 2;
  // extra_data holds related contextual data, but is not covered by any hash.
  bytes extra_data = 3;
}

message KeyValue {
  bytes key = 1;
  MapLeaf value = 2;
}

message KeyValueInclusion {
  KeyValue key_value = 1;
  repeated bytes inclusion = 2;
}

message GetMapLeavesRequest {
  int64 map_id = 1;
  repeated bytes key = 2;
  int64 revision = 3;
}

message GetMapLeavesResponse {
  TrillianApiStatus status = 1;
  repeated KeyValueInclusion key_value = 2;
  SignedMapRoot map_root = 3;
}

message SetMapLeavesRequest {
  int64 map_id = 1;
  repeated KeyValue key_value = 2;
  SignedLogRoot includes_entries_to = 3;
}

message SetMapLeavesResponse {
  TrillianApiStatus status = 1;
  SignedMapRoot map_root = 2;
}

message GetSignedMapRootRequest {
  int64 map_id = 1;
}

message GetSignedMapRootResponse {
  TrillianApiStatus status = 1;
  SignedMapRoot map_root = 2;
}

// TrillianMap defines a service which provides access to a Verifiable Map as
// defined in the Verifiable Data Structures paper.
service TrillianMap {
  rpc GetLeaves(GetMapLeavesRequest) returns(GetMapLeavesResponse) {}
  rpc SetLeaves(SetMapLeavesRequest) returns(SetMapLeavesResponse) {}
  rpc GetSignedMapRoot(GetSignedMapRootRequest) returns(GetSignedMapRootResponse) {}
}
