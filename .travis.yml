sudo: true  # Only to move mysql onto ramdisk.
os: linux
dist: xenial
language: go
go: "1.13.x"
go_import_path: github.com/google/trillian

cache:
  directories:
    - "$HOME/google-cloud-sdk/"
    - "$HOME/gopath/pkg/mod"

matrix:
  fast_finish: true

jobs:
  include:
    - name: "build"
      before_install: true # This step is empty.
      install: true
      before_script: true
      script: go build ./...
    - name: "coverage"
      before_install: true
      install: true
      before_script: true
      script: go test -covermode=atomic -coverprofile=coverage.txt ./...
      after_success: bash <(curl -s https://codecov.io/bash)
    - name: "generate"
      before_install: true
      install:
      - mkdir ../protoc
      - |
        (
          cd ../protoc
          wget "https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-${TRAVIS_OS_NAME}-x86_64.zip"
          unzip "protoc-3.5.1-${TRAVIS_OS_NAME}-x86_64.zip"
        )
      - export PATH="$(pwd)/../protoc/bin:$PATH"
      - git clone --depth=1 https://github.com/googleapis/googleapis.git "$GOPATH/src/github.com/googleapis/googleapis"
      - go install github.com/golang/protobuf/proto
      - go install github.com/golang/mock/mockgen
      - go install golang.org/x/tools/cmd/stringer
      - go install github.com/golang/protobuf/protoc-gen-go
      - go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
      - go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc
      before_script: true
      script: 
      - go generate ./...
      - |
        # Check re-generation didn't change anything. Skip protoc-generated files
        # because protoc is not deterministic when generating file descriptors.
        # Skip go.mod and go.sum because testing may add indirect dependencies
        # that would be trimmed by 'go mod tidy'
        echo "Checking that generated files are the same as checked-in versions."
        git diff --exit-code -- ':!*.pb.go' ':!*_string.go' ':!go.*'
    - name: "lint"
      before_install: true
      install:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint
      - go install github.com/uber/prototool/cmd/prototool
      - git clone --depth=1 https://github.com/googleapis/googleapis.git "$GOPATH/src/github.com/googleapis/googleapis"
      before_script: true
      script:
      - golangci-lint run --deadline=8m
      - prototool lint
      - ./scripts/check_license.sh $(find . -name '*.go' | grep -v mock_ | grep -v .pb.go | grep -v .pb.gw.go | grep -v _string.go | tr '\n' ' ')
    - name: "bazel"
      install:
      - |
        BAZEL_VERSION='0.29.1'
        URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
        wget -O install.sh ${URL}
        chmod +x install.sh
        ./install.sh --user
        rm -f install.sh
      script: bazel --batch build //:*
    - name: "docker"
      script: 
      - |
        # TODO(RJPercival): Make docker-compose integration test work when PKCS#11
        # support is enabled. This requires running softhsm in a Docker container.
        # See https://github.com/rolandshoemaker/docker-hsm for an example.
      - ./integration/docker_compose_integration_test.sh
    - name: "CT Integration"
      script:
       - TRILLIAN_DIR=$(pwd)
       - git clone --depth=1 https://github.com/google/certificate-transparency-go.git "$GOPATH/src/github.com/google/certificate-transparency-go"
       - pushd "$GOPATH/src/github.com/google/certificate-transparency-go"
       - echo "replace github.com/google/trillian => $TRILLIAN_DIR" >> go.mod
       - chmod +x ./trillian/integration/integration_test.sh
       - ./trillian/integration/integration_test.sh
       - popd
    - name: "presubmit"
      env: GOFLAGS='-race' GO_TEST_TIMEOUT=20m
      script: ./scripts/presubmit.sh --no-linters --no-generate
    - name: "presubmit (batched_queue)"
      env: GOFLAGS='-race --tags=batched_queue' GO_TEST_TIMEOUT=20m
      script: ./scripts/presubmit.sh --no-linters --no-generate
    - name: "presubmit (pkcs11)"
      env: GOFLAGS='-race --tags=pkcs11' GO_TEST_TIMEOUT=20m
      script: ./scripts/presubmit.sh --no-linters --no-generate
    - name: "integration"
      env: GO_TEST_TIMEOUT=20m
      script: ./integration/integration_test.sh && HAMMER_OPTS="--operations=150" ./integration/maphammer.sh 3
    - name: "integration (etcd)"
      env: GOFLAGS='-race' ETCD_DIR="${GOPATH}/bin" GO_TEST_TIMEOUT=20m
      install: go install go.etcd.io/etcd go.etcd.io/etcd/etcdctl
      script: ./integration/integration_test.sh && HAMMER_OPTS="--operations=50" ./integration/maphammer.sh 3
    - name: "integration (batched_queue)"
      env: GOFLAGS='-race --tags=batched_queue' GO_TEST_TIMEOUT=20m
      script: ./integration/integration_test.sh && HAMMER_OPTS="--operations=50" ./integration/maphammer.sh 3
    - name: "integration (pkcs11)"
      env: GOFLAGS='-race --tags=pkcs11' GO_TEST_TIMEOUT=20m
      install:
       - sudo apt-get update
       - sudo apt-get install -y softhsm
      script: ./integration/integration_test.sh && HAMMER_OPTS="--operations=50" ./integration/maphammer.sh 3
    - name: "integration (mariaDB)"
      addons:
        mariadb: '10.3'
      env: GO_TEST_TIMEOUT=20m
      script:
        - mysql -u root -e 'SHOW VARIABLES LIKE "%version%";'
        - ./integration/integration_test.sh && HAMMER_OPTS="--operations=50" ./integration/maphammer.sh 3

services:
  - docker
  - postgresql
  - mysql

before_install:
  - sudo service mysql stop
  - |
    if [[ "$TRAVIS_SUDO" == "true" ]]; then
      echo "Moving MySQL data to ramdisk..."
      sudo mkdir /mnt/ramdisk
      sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk
      sudo mv /var/lib/mysql /mnt/ramdisk
      sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql
    else
     echo "MySQL data staying on disk because sudo unavailable."
    fi
  - sudo service mysql start

before_script:
  - ./scripts/resetdb.sh --force
  - ./scripts/mysqlconnlimit.sh --force
  - ./scripts/postgres_resetdb.sh --force
