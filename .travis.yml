sudo: true  # Only to move mysql onto ramdisk.

language: go

addons:
  apt:
    packages:
      - softhsm

cache:
  directories:
    - "$HOME/google-cloud-sdk/"

os:
  - linux

go:
  - 1.9.x

env:
  -
  - GCE_CI=true
  - TRILLIAN_SQL_DRIVER=mysql WITH_COVERAGE=true
  - GOFLAGS='-race' TRILLIAN_SQL_DRIVER=mysql
  - GOFLAGS='-race --tags batched_queue' TRILLIAN_SQL_DRIVER=mysql
  - GOFLAGS='-race' TRILLIAN_SQL_DRIVER=mysql WITH_ETCD=true
  - GOFLAGS='-race --tags pkcs11' TRILLIAN_SQL_DRIVER=mysql WITH_PKCS11=true

matrix:
  fast_finish: true

services:
  - mysql
  - docker

install:
  - |
    if [ ! -d "$HOME/gopath/src/github.com/google" ]; then
      mkdir -p "$HOME/gopath/src/github.com/google"
      ln -s "$TRAVIS_BUILD_DIR" "$HOME/gopath/src/github.com/google/trillian"
    fi
  - mkdir ../protoc
  - |
    (
      cd ../protoc
      wget "https://github.com/google/protobuf/releases/download/v3.2.0/protoc-3.2.0-${TRAVIS_OS_NAME}-x86_64.zip"
      unzip "protoc-3.2.0-${TRAVIS_OS_NAME}-x86_64.zip"
    )
  - export PATH="$(pwd)/../protoc/bin:$PATH"
  # googleapis is not Go code, but it's required for .pb.go regeneration because of API dependencies.
  - git clone --depth=1 https://github.com/googleapis/googleapis.git "$GOPATH/src/github.com/googleapis/googleapis"
  - go get ${GOFLAGS} -d -t ./...
  - go get github.com/golang/protobuf/proto
  - go get github.com/golang/protobuf/protoc-gen-go
  - go get golang.org/x/tools/cmd/stringer
  - go get github.com/google/certificate-transparency-go
  - go get -d -t github.com/google/certificate-transparency-go/...
  - go install github.com/golang/{mock/mockgen,protobuf/protoc-gen-go}
  - go get github.com/alecthomas/gometalinter
  - gometalinter --install
  # install vendored protoc-gen-grpc-gateway binary
  - go install ./vendor/github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
  # install vendored etcd binary
  - go install ./vendor/github.com/coreos/etcd/cmd/etcd
  - go install ./vendor/github.com/coreos/etcd/cmd/etcdctl


before_script:
  - |
    if [[ "$TRAVIS_SUDO" == "true" ]]; then
      echo "Moving MySQL data to ramdisk..."
      sudo mkdir /mnt/ramdisk
      sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk
      sudo stop mysql
      sudo mv /var/lib/mysql /mnt/ramdisk
      sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql
      sudo start mysql
    else
     echo "MySQL data staying on disk because sudo unavailable."
    fi
  - yes | ./scripts/resetdb.sh

script:
  - set -e
  - cd "$HOME/gopath/src/github.com/google/trillian"
  - export GO_TEST_TIMEOUT=20m
  - # ./scripts/presubmit.sh ${WITH_COVERAGE:+--coverage}
  - |
      # Check re-generation didn't change anything
      # Skip protoc-generated files (.pb.go) because protoc is not deterministic
      # when generating file descriptors.
      status=$(git status --porcelain | grep -v .pb.go | grep -v _string.go | grep -v coverage.txt) || :
      if [[ -n ${status} ]]; then
        echo "Regenerated files differ from checked-in versions: ${status}"
        git status
        git diff
        exit 1
      fi
  - |
      if [[ "${WITH_ETCD}" == "true" ]]; then
        export ETCD_DIR="${GOPATH}/bin"
      fi
  - |
      if [[ "${TRILLIAN_SQL_DRIVER}" == 'mysql' ]]; then
        ./integration/integration_test.sh
        cd "$HOME/gopath/src/github.com/google/certificate-transparency-go"
        ./trillian/integration/integration_test.sh
        cd $HOME/gopath/src/github.com/google/trillian
        HAMMER_OPTS="--operations=50" ./integration/maphammer.sh 3
      fi
  - gcloud version || true
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  # Add gcloud to $PATH
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - gcloud version
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  - chmod +x ./kubectl
  - sudo mv ./kubectl /usr/local/bin/kubectl
  - echo ${GCLOUD_SERVICE_KEY_CI} | wc -c
  - echo ${GCLOUD_SERVICE_KEY_CI} | base64 --decode -i > ${HOME}/gcloud-service-key.json
  - ls -l ${HOME}/gc*
  - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
  - rm ${HOME}/gcloud-service-key.json
  - . scripts/deploy_gce_ci.sh
  - set +e


after_success:
  - |
      if [[ -f /tmp/coverage.txt ]]; then
        cp /tmp/coverage.txt .
        bash <(curl -s https://codecov.io/bash)
      fi

