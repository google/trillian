// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sigpb.proto

/*
Package sigpb is a generated protocol buffer package.

It is generated from these files:
	sigpb.proto

It has these top-level messages:
	DigitallySigned
*/
package sigpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HashAlgorithm defines the approved methods for object hashing.
//
// Supported hash algorithms. The numbering space is the same as for TLS,
// given in RFC 5246 s7.4.1.4.1 and at:
// http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-18
type DigitallySigned_HashAlgorithm int32

const (
	// No hash algorithm is used.
	DigitallySigned_NONE DigitallySigned_HashAlgorithm = 0
	// SHA256 is used.
	DigitallySigned_SHA256 DigitallySigned_HashAlgorithm = 4
)

var DigitallySigned_HashAlgorithm_name = map[int32]string{
	0: "NONE",
	4: "SHA256",
}
var DigitallySigned_HashAlgorithm_value = map[string]int32{
	"NONE":   0,
	"SHA256": 4,
}

func (x DigitallySigned_HashAlgorithm) String() string {
	return proto.EnumName(DigitallySigned_HashAlgorithm_name, int32(x))
}
func (DigitallySigned_HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

// SignatureAlgorithm defines the algorithm used to sign the object.
//
// Supported signature algorithms. The numbering space is the same as for TLS,
// given in RFC 5246 s7.4.1.4.1 and at:
// http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-16
type DigitallySigned_SignatureAlgorithm int32

const (
	// Anonymous signature scheme.
	DigitallySigned_ANONYMOUS DigitallySigned_SignatureAlgorithm = 0
	// RSA signature scheme.
	DigitallySigned_RSA DigitallySigned_SignatureAlgorithm = 1
	// ECDSA signature scheme.
	DigitallySigned_ECDSA DigitallySigned_SignatureAlgorithm = 3
)

var DigitallySigned_SignatureAlgorithm_name = map[int32]string{
	0: "ANONYMOUS",
	1: "RSA",
	3: "ECDSA",
}
var DigitallySigned_SignatureAlgorithm_value = map[string]int32{
	"ANONYMOUS": 0,
	"RSA":       1,
	"ECDSA":     3,
}

func (x DigitallySigned_SignatureAlgorithm) String() string {
	return proto.EnumName(DigitallySigned_SignatureAlgorithm_name, int32(x))
}
func (DigitallySigned_SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

// SignatureCipherSuite defines the set of algorithms used for signing.
type DigitallySigned_SignatureCipherSuite int32

const (
	// Signature and hash algorithm are unknown / not set.
	DigitallySigned_UNKNOWN_CIPHER_SUITE DigitallySigned_SignatureCipherSuite = 0
	// RSA with SHA256.
	DigitallySigned_RSA_SHA256 DigitallySigned_SignatureCipherSuite = 1
	// ECDSA with SHA256.
	DigitallySigned_ECDSA_SHA256 DigitallySigned_SignatureCipherSuite = 2
)

var DigitallySigned_SignatureCipherSuite_name = map[int32]string{
	0: "UNKNOWN_CIPHER_SUITE",
	1: "RSA_SHA256",
	2: "ECDSA_SHA256",
}
var DigitallySigned_SignatureCipherSuite_value = map[string]int32{
	"UNKNOWN_CIPHER_SUITE": 0,
	"RSA_SHA256":           1,
	"ECDSA_SHA256":         2,
}

func (x DigitallySigned_SignatureCipherSuite) String() string {
	return proto.EnumName(DigitallySigned_SignatureCipherSuite_name, int32(x))
}
func (DigitallySigned_SignatureCipherSuite) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2}
}

// Protocol buffer encoding of the TLS DigitallySigned type, from RFC 5246 ยง4.7.
type DigitallySigned struct {
	// hash_algorithm contains the hash algorithm used.
	// TODO(gdbelvin): deprecate
	HashAlgorithm DigitallySigned_HashAlgorithm `protobuf:"varint,1,opt,name=hash_algorithm,json=hashAlgorithm,enum=sigpb.DigitallySigned_HashAlgorithm" json:"hash_algorithm,omitempty"`
	// sig_algorithm contains the signing algorithm used.
	// TODO(gdbelvin): deprecate
	SignatureAlgorithm DigitallySigned_SignatureAlgorithm `protobuf:"varint,2,opt,name=signature_algorithm,json=signatureAlgorithm,enum=sigpb.DigitallySigned_SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	// cipher_suite contains the combination of ciphers used for this signature.
	CipherSuite DigitallySigned_SignatureCipherSuite `protobuf:"varint,4,opt,name=cipher_suite,json=cipherSuite,enum=sigpb.DigitallySigned_SignatureCipherSuite" json:"cipher_suite,omitempty"`
	// signature contains the object signature.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DigitallySigned) Reset()                    { *m = DigitallySigned{} }
func (m *DigitallySigned) String() string            { return proto.CompactTextString(m) }
func (*DigitallySigned) ProtoMessage()               {}
func (*DigitallySigned) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DigitallySigned) GetHashAlgorithm() DigitallySigned_HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return DigitallySigned_NONE
}

func (m *DigitallySigned) GetSignatureAlgorithm() DigitallySigned_SignatureAlgorithm {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return DigitallySigned_ANONYMOUS
}

func (m *DigitallySigned) GetCipherSuite() DigitallySigned_SignatureCipherSuite {
	if m != nil {
		return m.CipherSuite
	}
	return DigitallySigned_UNKNOWN_CIPHER_SUITE
}

func (m *DigitallySigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*DigitallySigned)(nil), "sigpb.DigitallySigned")
	proto.RegisterEnum("sigpb.DigitallySigned_HashAlgorithm", DigitallySigned_HashAlgorithm_name, DigitallySigned_HashAlgorithm_value)
	proto.RegisterEnum("sigpb.DigitallySigned_SignatureAlgorithm", DigitallySigned_SignatureAlgorithm_name, DigitallySigned_SignatureAlgorithm_value)
	proto.RegisterEnum("sigpb.DigitallySigned_SignatureCipherSuite", DigitallySigned_SignatureCipherSuite_name, DigitallySigned_SignatureCipherSuite_value)
}

func init() { proto.RegisterFile("sigpb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4f, 0xc2, 0x40,
	0x14, 0xc4, 0x29, 0x05, 0x94, 0xc7, 0x1f, 0x37, 0x4f, 0x0e, 0x3d, 0x78, 0x20, 0x8d, 0x26, 0x18,
	0x13, 0x0e, 0x18, 0xf5, 0xbc, 0x01, 0x12, 0x08, 0x71, 0x6b, 0x76, 0x25, 0x46, 0x2f, 0x4d, 0xc1,
	0xa6, 0xbb, 0x09, 0xd2, 0xa6, 0x5b, 0x0e, 0x7e, 0x57, 0x3f, 0x8c, 0x61, 0xb5, 0x16, 0x45, 0xe3,
	0x71, 0x26, 0x6f, 0x7e, 0x33, 0x9b, 0x85, 0x86, 0x56, 0x51, 0xb2, 0xe8, 0x27, 0x69, 0x9c, 0xc5,
	0x58, 0x35, 0xc2, 0x7d, 0xb3, 0xe1, 0x68, 0xa4, 0x22, 0x95, 0x05, 0xab, 0xd5, 0xab, 0x50, 0xd1,
	0x3a, 0x7c, 0xc6, 0x19, 0xb4, 0x65, 0xa0, 0xa5, 0x1f, 0xac, 0xa2, 0x38, 0x55, 0x99, 0x7c, 0x71,
	0xac, 0xae, 0xd5, 0x6b, 0x0f, 0x4e, 0xfb, 0x1f, 0x80, 0x1f, 0xf7, 0xfd, 0x49, 0xa0, 0x25, 0xcd,
	0x6f, 0x79, 0x4b, 0xee, 0x4a, 0x7c, 0x82, 0x63, 0xad, 0xa2, 0x75, 0x90, 0x6d, 0xd2, 0x70, 0x87,
	0x58, 0x36, 0xc4, 0xf3, 0x3f, 0x88, 0x22, 0x4f, 0x14, 0x58, 0xd4, 0x7b, 0x1e, 0x32, 0x68, 0x2e,
	0x55, 0x22, 0xc3, 0xd4, 0xd7, 0x1b, 0x95, 0x85, 0x4e, 0xc5, 0x40, 0x2f, 0xfe, 0x83, 0x0e, 0x4d,
	0x46, 0x6c, 0x23, 0xbc, 0xb1, 0x2c, 0x04, 0x9e, 0x40, 0xfd, 0xab, 0xc5, 0xb1, 0xbb, 0x56, 0xaf,
	0xc9, 0x0b, 0xc3, 0x3d, 0x83, 0xd6, 0xb7, 0x97, 0xe2, 0x21, 0x54, 0x98, 0xc7, 0xc6, 0xa4, 0x84,
	0x00, 0x35, 0x31, 0xa1, 0x83, 0xab, 0x6b, 0x52, 0x71, 0x6f, 0x00, 0xf7, 0xe7, 0x63, 0x0b, 0xea,
	0x94, 0x79, 0xec, 0xf1, 0xd6, 0x9b, 0x0b, 0x52, 0xc2, 0x03, 0xb0, 0xb9, 0xa0, 0xc4, 0xc2, 0x3a,
	0x54, 0xc7, 0xc3, 0x91, 0xa0, 0xc4, 0x76, 0x39, 0x74, 0x7e, 0x9b, 0x88, 0x0e, 0x74, 0xe6, 0x6c,
	0xc6, 0xbc, 0x07, 0xe6, 0x0f, 0xa7, 0x77, 0x93, 0x31, 0xf7, 0xc5, 0x7c, 0x7a, 0xbf, 0xad, 0x6d,
	0x03, 0x70, 0x41, 0xfd, 0xcf, 0x6a, 0x0b, 0x09, 0x34, 0x0d, 0x2c, 0x77, 0xca, 0x8b, 0x9a, 0xf9,
	0xec, 0xcb, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x53, 0xfb, 0x18, 0xfb, 0x01, 0x00, 0x00,
}
