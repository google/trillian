// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/google/trillian/crypto/keys (interfaces: Generator)

package keys

import (
	context "context"
	crypto "crypto"
	gomock "github.com/golang/mock/gomock"
	trillian "github.com/google/trillian"
)

// Mock of Generator interface
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *_MockGeneratorRecorder
}

// Recorder for MockGenerator (not exported)
type _MockGeneratorRecorder struct {
	mock *MockGenerator
}

func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &_MockGeneratorRecorder{mock}
	return mock
}

func (_m *MockGenerator) EXPECT() *_MockGeneratorRecorder {
	return _m.recorder
}

func (_m *MockGenerator) Generate(_param0 context.Context, _param1 *trillian.Tree) (*trillian.Tree, error) {
	ret := _m.ctrl.Call(_m, "Generate", _param0, _param1)
	ret0, _ := ret[0].(*trillian.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGeneratorRecorder) Generate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Generate", arg0, arg1)
}

func (_m *MockGenerator) NewSigner(_param0 context.Context, _param1 *trillian.Tree) (crypto.Signer, error) {
	ret := _m.ctrl.Call(_m, "NewSigner", _param0, _param1)
	ret0, _ := ret[0].(crypto.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGeneratorRecorder) NewSigner(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSigner", arg0, arg1)
}
