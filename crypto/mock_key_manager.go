// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/google/trillian/crypto (interfaces: PrivateKeyManager)

package crypto

import (
	crypto "crypto"
	gomock "github.com/golang/mock/gomock"
	sigpb "github.com/google/trillian/crypto/sigpb"
)

// Mock of PrivateKeyManager interface
type MockPrivateKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockPrivateKeyManagerRecorder
}

// Recorder for MockPrivateKeyManager (not exported)
type _MockPrivateKeyManagerRecorder struct {
	mock *MockPrivateKeyManager
}

func NewMockPrivateKeyManager(ctrl *gomock.Controller) *MockPrivateKeyManager {
	mock := &MockPrivateKeyManager{ctrl: ctrl}
	mock.recorder = &_MockPrivateKeyManagerRecorder{mock}
	return mock
}

func (_m *MockPrivateKeyManager) EXPECT() *_MockPrivateKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockPrivateKeyManager) HashAlgorithm() crypto.Hash {
	ret := _m.ctrl.Call(_m, "HashAlgorithm")
	ret0, _ := ret[0].(crypto.Hash)
	return ret0
}

func (_mr *_MockPrivateKeyManagerRecorder) HashAlgorithm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HashAlgorithm")
}

func (_m *MockPrivateKeyManager) PublicKey() crypto.PublicKey {
	ret := _m.ctrl.Call(_m, "PublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

func (_mr *_MockPrivateKeyManagerRecorder) PublicKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicKey")
}

func (_m *MockPrivateKeyManager) SignatureAlgorithm() sigpb.DigitallySigned_SignatureAlgorithm {
	ret := _m.ctrl.Call(_m, "SignatureAlgorithm")
	ret0, _ := ret[0].(sigpb.DigitallySigned_SignatureAlgorithm)
	return ret0
}

func (_mr *_MockPrivateKeyManagerRecorder) SignatureAlgorithm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignatureAlgorithm")
}

func (_m *MockPrivateKeyManager) Signer() crypto.Signer {
	ret := _m.ctrl.Call(_m, "Signer")
	ret0, _ := ret[0].(crypto.Signer)
	return ret0
}

func (_mr *_MockPrivateKeyManagerRecorder) Signer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Signer")
}
