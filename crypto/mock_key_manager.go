// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/google/trillian/crypto (interfaces: KeyManager)

package crypto

import (
	crypto "crypto"
	gomock "github.com/golang/mock/gomock"
	trillian "github.com/google/trillian"
)

// Mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyManagerRecorder
}

// Recorder for MockKeyManager (not exported)
type _MockKeyManagerRecorder struct {
	mock *MockKeyManager
}

func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &_MockKeyManagerRecorder{mock}
	return mock
}

func (_m *MockKeyManager) EXPECT() *_MockKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockKeyManager) GetPublicKey() (crypto.PublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetPublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetPublicKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPublicKey")
}

func (_m *MockKeyManager) GetRawPublicKey() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetRawPublicKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetRawPublicKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRawPublicKey")
}

func (_m *MockKeyManager) HashAlgorithm() trillian.HashAlgorithm {
	ret := _m.ctrl.Call(_m, "HashAlgorithm")
	ret0, _ := ret[0].(trillian.HashAlgorithm)
	return ret0
}

func (_mr *_MockKeyManagerRecorder) HashAlgorithm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HashAlgorithm")
}

func (_m *MockKeyManager) SignatureAlgorithm() trillian.SignatureAlgorithm {
	ret := _m.ctrl.Call(_m, "SignatureAlgorithm")
	ret0, _ := ret[0].(trillian.SignatureAlgorithm)
	return ret0
}

func (_mr *_MockKeyManagerRecorder) SignatureAlgorithm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignatureAlgorithm")
}

func (_m *MockKeyManager) Signer() (crypto.Signer, error) {
	ret := _m.ctrl.Call(_m, "Signer")
	ret0, _ := ret[0].(crypto.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) Signer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Signer")
}
