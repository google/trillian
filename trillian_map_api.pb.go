// Code generated by protoc-gen-go.
// source: trillian_map_api.proto
// DO NOT EDIT!

package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MapLeaf represents the data behind Map leaves.
type MapLeaf struct {
	// index is the location of this leaf.
	// All indexes for a given Map must contain a constant number of bits.
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// leaf_hash is the tree hash of leaf_value.
	LeafHash []byte `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	// leaf_value is the data the tree commits to.
	LeafValue []byte `protobuf:"bytes,3,opt,name=leaf_value,json=leafValue,proto3" json:"leaf_value,omitempty"`
	// extra_data holds related contextual data, but is not covered by any hash.
	ExtraData []byte `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *MapLeaf) Reset()                    { *m = MapLeaf{} }
func (m *MapLeaf) String() string            { return proto.CompactTextString(m) }
func (*MapLeaf) ProtoMessage()               {}
func (*MapLeaf) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MapLeaf) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MapLeaf) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MapLeaf) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *MapLeaf) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

type IndexValue struct {
	// TODO(gbelvin): RemoveIndex value in favor of using the index inside MapLeaf.
	Index []byte   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Value *MapLeaf `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *IndexValue) Reset()                    { *m = IndexValue{} }
func (m *IndexValue) String() string            { return proto.CompactTextString(m) }
func (*IndexValue) ProtoMessage()               {}
func (*IndexValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *IndexValue) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *IndexValue) GetValue() *MapLeaf {
	if m != nil {
		return m.Value
	}
	return nil
}

type MapLeafInclusion struct {
	Leaf      *MapLeaf `protobuf:"bytes,1,opt,name=leaf" json:"leaf,omitempty"`
	Inclusion [][]byte `protobuf:"bytes,2,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
}

func (m *MapLeafInclusion) Reset()                    { *m = MapLeafInclusion{} }
func (m *MapLeafInclusion) String() string            { return proto.CompactTextString(m) }
func (*MapLeafInclusion) ProtoMessage()               {}
func (*MapLeafInclusion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MapLeafInclusion) GetLeaf() *MapLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *MapLeafInclusion) GetInclusion() [][]byte {
	if m != nil {
		return m.Inclusion
	}
	return nil
}

type GetMapLeavesRequest struct {
	MapId    int64    `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	Index    [][]byte `protobuf:"bytes,2,rep,name=index,proto3" json:"index,omitempty"`
	Revision int64    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *GetMapLeavesRequest) Reset()                    { *m = GetMapLeavesRequest{} }
func (m *GetMapLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMapLeavesRequest) ProtoMessage()               {}
func (*GetMapLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeavesRequest) GetIndex() [][]byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *GetMapLeavesRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type GetMapLeavesResponse struct {
	MapLeafInclusion []*MapLeafInclusion `protobuf:"bytes,2,rep,name=map_leaf_inclusion,json=mapLeafInclusion" json:"map_leaf_inclusion,omitempty"`
	MapRoot          *SignedMapRoot      `protobuf:"bytes,3,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *GetMapLeavesResponse) Reset()                    { *m = GetMapLeavesResponse{} }
func (m *GetMapLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMapLeavesResponse) ProtoMessage()               {}
func (*GetMapLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetMapLeavesResponse) GetMapLeafInclusion() []*MapLeafInclusion {
	if m != nil {
		return m.MapLeafInclusion
	}
	return nil
}

func (m *GetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type SetMapLeavesRequest struct {
	MapId      int64           `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	IndexValue []*IndexValue   `protobuf:"bytes,2,rep,name=index_value,json=indexValue" json:"index_value,omitempty"`
	MapperData *MapperMetadata `protobuf:"bytes,3,opt,name=mapper_data,json=mapperData" json:"mapper_data,omitempty"`
}

func (m *SetMapLeavesRequest) Reset()                    { *m = SetMapLeavesRequest{} }
func (m *SetMapLeavesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMapLeavesRequest) ProtoMessage()               {}
func (*SetMapLeavesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *SetMapLeavesRequest) GetIndexValue() []*IndexValue {
	if m != nil {
		return m.IndexValue
	}
	return nil
}

func (m *SetMapLeavesRequest) GetMapperData() *MapperMetadata {
	if m != nil {
		return m.MapperData
	}
	return nil
}

type SetMapLeavesResponse struct {
	MapRoot *SignedMapRoot `protobuf:"bytes,2,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *SetMapLeavesResponse) Reset()                    { *m = SetMapLeavesResponse{} }
func (m *SetMapLeavesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMapLeavesResponse) ProtoMessage()               {}
func (*SetMapLeavesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *SetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type GetSignedMapRootRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
}

func (m *GetSignedMapRootRequest) Reset()                    { *m = GetSignedMapRootRequest{} }
func (m *GetSignedMapRootRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSignedMapRootRequest) ProtoMessage()               {}
func (*GetSignedMapRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetSignedMapRootRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

type GetSignedMapRootResponse struct {
	MapRoot *SignedMapRoot `protobuf:"bytes,2,opt,name=map_root,json=mapRoot" json:"map_root,omitempty"`
}

func (m *GetSignedMapRootResponse) Reset()                    { *m = GetSignedMapRootResponse{} }
func (m *GetSignedMapRootResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSignedMapRootResponse) ProtoMessage()               {}
func (*GetSignedMapRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetSignedMapRootResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*MapLeaf)(nil), "trillian.MapLeaf")
	proto.RegisterType((*IndexValue)(nil), "trillian.IndexValue")
	proto.RegisterType((*MapLeafInclusion)(nil), "trillian.MapLeafInclusion")
	proto.RegisterType((*GetMapLeavesRequest)(nil), "trillian.GetMapLeavesRequest")
	proto.RegisterType((*GetMapLeavesResponse)(nil), "trillian.GetMapLeavesResponse")
	proto.RegisterType((*SetMapLeavesRequest)(nil), "trillian.SetMapLeavesRequest")
	proto.RegisterType((*SetMapLeavesResponse)(nil), "trillian.SetMapLeavesResponse")
	proto.RegisterType((*GetSignedMapRootRequest)(nil), "trillian.GetSignedMapRootRequest")
	proto.RegisterType((*GetSignedMapRootResponse)(nil), "trillian.GetSignedMapRootResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrillianMap service

type TrillianMapClient interface {
	GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error)
	SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error)
}

type trillianMapClient struct {
	cc *grpc.ClientConn
}

func NewTrillianMapClient(cc *grpc.ClientConn) TrillianMapClient {
	return &trillianMapClient{cc}
}

func (c *trillianMapClient) GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error) {
	out := new(GetMapLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/GetLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error) {
	out := new(SetMapLeavesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/SetLeaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error) {
	out := new(GetSignedMapRootResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianMap/GetSignedMapRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrillianMap service

type TrillianMapServer interface {
	GetLeaves(context.Context, *GetMapLeavesRequest) (*GetMapLeavesResponse, error)
	SetLeaves(context.Context, *SetMapLeavesRequest) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(context.Context, *GetSignedMapRootRequest) (*GetSignedMapRootResponse, error)
}

func RegisterTrillianMapServer(s *grpc.Server, srv TrillianMapServer) {
	s.RegisterService(&_TrillianMap_serviceDesc, srv)
}

func _TrillianMap_GetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeaves(ctx, req.(*GetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_SetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).SetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/SetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).SetLeaves(ctx, req.(*SetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetSignedMapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedMapRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetSignedMapRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, req.(*GetSignedMapRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianMap",
	HandlerType: (*TrillianMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaves",
			Handler:    _TrillianMap_GetLeaves_Handler,
		},
		{
			MethodName: "SetLeaves",
			Handler:    _TrillianMap_SetLeaves_Handler,
		},
		{
			MethodName: "GetSignedMapRoot",
			Handler:    _TrillianMap_GetSignedMapRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_map_api.proto",
}

func init() { proto.RegisterFile("trillian_map_api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x6e, 0xd3, 0x3c,
	0x14, 0xff, 0xd2, 0xae, 0x5b, 0x7b, 0xf2, 0x09, 0x15, 0xaf, 0xb0, 0x10, 0x18, 0x1a, 0x91, 0x10,
	0x5c, 0x15, 0x14, 0xc4, 0x05, 0x97, 0x4c, 0x48, 0x5d, 0x61, 0x45, 0x93, 0x83, 0xe0, 0x02, 0x89,
	0xe8, 0xb0, 0x78, 0xad, 0xa5, 0x24, 0x36, 0x89, 0x5b, 0x4d, 0x3c, 0x00, 0x4f, 0xc0, 0x35, 0xcf,
	0x8a, 0x6c, 0x37, 0x0d, 0xd9, 0x42, 0x35, 0x71, 0x17, 0x9f, 0xdf, 0x39, 0xbf, 0x3f, 0xc7, 0x56,
	0xe0, 0xae, 0x2a, 0x78, 0x9a, 0x72, 0xcc, 0xe3, 0x0c, 0x65, 0x8c, 0x92, 0x8f, 0x65, 0x21, 0x94,
	0x20, 0xfd, 0xaa, 0xee, 0xdf, 0xaa, 0xbe, 0x2c, 0x12, 0x7c, 0x87, 0xbd, 0x19, 0xca, 0x53, 0x86,
	0x17, 0x64, 0x04, 0x3d, 0x9e, 0x27, 0xec, 0xd2, 0x73, 0x8e, 0x9c, 0xa7, 0xff, 0x53, 0x7b, 0x20,
	0xf7, 0x61, 0x90, 0x32, 0xbc, 0x88, 0x17, 0x58, 0x2e, 0xbc, 0x8e, 0x41, 0xfa, 0xba, 0x70, 0x82,
	0xe5, 0x82, 0x1c, 0x02, 0x18, 0x70, 0x85, 0xe9, 0x92, 0x79, 0x5d, 0x83, 0x9a, 0xf6, 0x8f, 0xba,
	0xa0, 0x61, 0x76, 0xa9, 0x0a, 0x8c, 0x13, 0x54, 0xe8, 0xed, 0x58, 0xd8, 0x54, 0xde, 0xa0, 0xc2,
	0xe0, 0x1d, 0xc0, 0x54, 0x6b, 0xd8, 0xe6, 0x76, 0xf9, 0x27, 0xd0, 0xb3, 0xe4, 0x5a, 0xda, 0x0d,
	0x6f, 0x8f, 0x37, 0xfe, 0xd7, 0xb6, 0xa9, 0xc5, 0x83, 0x4f, 0x30, 0x5c, 0x57, 0xa6, 0xf9, 0x79,
	0xba, 0x2c, 0xb9, 0xc8, 0xc9, 0x63, 0xd8, 0xd1, 0x66, 0x0c, 0x63, 0xeb, 0xac, 0x81, 0xc9, 0x03,
	0x18, 0xf0, 0x6a, 0xc6, 0xeb, 0x1c, 0x75, 0xb5, 0xcb, 0x4d, 0x21, 0xf8, 0x02, 0xfb, 0x13, 0xa6,
	0xec, 0xc4, 0x8a, 0x95, 0x94, 0x7d, 0x5b, 0xb2, 0x52, 0x91, 0x3b, 0xb0, 0xab, 0x77, 0xcc, 0x13,
	0xc3, 0xde, 0xa5, 0xbd, 0x0c, 0xe5, 0x34, 0xa9, 0x53, 0x58, 0x9e, 0x75, 0x0a, 0x1f, 0xfa, 0x05,
	0x5b, 0x71, 0x23, 0xd0, 0x35, 0xed, 0x9b, 0x73, 0xf0, 0xd3, 0x81, 0x51, 0x53, 0xa0, 0x94, 0x22,
	0x2f, 0x19, 0x39, 0x01, 0xa2, 0x15, 0xcc, 0x82, 0x9b, 0xfe, 0xdc, 0xd0, 0xbf, 0x96, 0x65, 0x93,
	0x9a, 0x0e, 0xb3, 0xab, 0x7b, 0x08, 0xa1, 0xaf, 0x99, 0x0a, 0x21, 0x94, 0x91, 0x77, 0xc3, 0x83,
	0x7a, 0x3e, 0xe2, 0xf3, 0x9c, 0x25, 0x33, 0x94, 0x54, 0x08, 0x45, 0xf7, 0x32, 0xfb, 0x11, 0xfc,
	0x72, 0x60, 0x3f, 0xba, 0x79, 0xee, 0x97, 0xe0, 0x9a, 0xa8, 0x71, 0x75, 0x5b, 0xda, 0xe5, 0xa8,
	0x56, 0xa9, 0x2f, 0x9a, 0x02, 0xaf, 0x2f, 0xfd, 0x15, 0xb8, 0x19, 0x4a, 0xc9, 0x0a, 0xfb, 0x44,
	0xac, 0x39, 0xaf, 0x11, 0x4e, 0xb2, 0x62, 0xc6, 0x14, 0x6a, 0x9c, 0x82, 0x6d, 0x36, 0xaf, 0xe7,
	0x2d, 0x8c, 0xa2, 0xb6, 0xb5, 0xfd, 0x19, 0xb6, 0x73, 0xc3, 0xb0, 0xcf, 0xe1, 0x60, 0xc2, 0x54,
	0x13, 0xdc, 0x9a, 0x37, 0x78, 0x0f, 0xde, 0xf5, 0x89, 0x7f, 0x77, 0x10, 0xfe, 0xe8, 0x80, 0xfb,
	0x61, 0xdd, 0x33, 0x43, 0x49, 0x4e, 0x61, 0x30, 0x61, 0xca, 0x46, 0x23, 0x87, 0xf5, 0x78, 0xcb,
	0x53, 0xf4, 0x1f, 0xfe, 0x0d, 0xb6, 0x7e, 0x82, 0xff, 0x34, 0x5b, 0xd4, 0xc6, 0x16, 0x6d, 0x67,
	0x8b, 0xda, 0xd9, 0x3e, 0xc3, 0xf0, 0x6a, 0x76, 0xf2, 0xa8, 0xe1, 0xa1, 0x6d, 0x93, 0x7e, 0xb0,
	0xad, 0xa5, 0x22, 0x3f, 0x7e, 0x06, 0xf7, 0xce, 0x45, 0x36, 0x9e, 0x0b, 0x31, 0x4f, 0xd9, 0xb8,
	0xf9, 0xb7, 0x3a, 0x1e, 0x56, 0x2b, 0x7a, 0x2d, 0xf9, 0x99, 0xae, 0x9c, 0x39, 0x5f, 0x77, 0x0d,
	0xf4, 0xe2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x3f, 0x69, 0xce, 0xfc, 0x04, 0x00, 0x00,
}
