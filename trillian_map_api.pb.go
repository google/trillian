// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trillian_map_api.proto

package trillian

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MapLeaf represents the data behind Map leaves.
type MapLeaf struct {
	// index is the location of this leaf.
	// All indexes for a given Map must contain a constant number of bits.
	// These are not numeric indices. Note that this is typically derived using a
	// hash and thus the length of all indices in the map will match the number
	// of bits in the hash function.
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// leaf_hash is the tree hash of leaf_value.  This does not need to be set
	// on SetMapLeavesRequest; the server will fill it in.
	// For an empty leaf (len(leaf_value)==0), there may be two possible values
	// for this hash:
	//  - If the leaf has never been set, it counts as an empty subtree and
	//    a nil value is used.
	//  - If the leaf has been explicitly set to a zero-length entry, it no
	//    longer counts as empty and the value of hasher.HashLeaf(index, nil)
	//    will be used.
	LeafHash []byte `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	// leaf_value is the data the tree commits to.
	LeafValue []byte `protobuf:"bytes,3,opt,name=leaf_value,json=leafValue,proto3" json:"leaf_value,omitempty"`
	// extra_data holds related contextual data, but is not covered by any hash.
	ExtraData            []byte   `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapLeaf) Reset()         { *m = MapLeaf{} }
func (m *MapLeaf) String() string { return proto.CompactTextString(m) }
func (*MapLeaf) ProtoMessage()    {}
func (*MapLeaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{0}
}

func (m *MapLeaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapLeaf.Unmarshal(m, b)
}
func (m *MapLeaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapLeaf.Marshal(b, m, deterministic)
}
func (m *MapLeaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLeaf.Merge(m, src)
}
func (m *MapLeaf) XXX_Size() int {
	return xxx_messageInfo_MapLeaf.Size(m)
}
func (m *MapLeaf) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLeaf.DiscardUnknown(m)
}

var xxx_messageInfo_MapLeaf proto.InternalMessageInfo

func (m *MapLeaf) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MapLeaf) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MapLeaf) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *MapLeaf) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

type MapLeaves struct {
	Leaves               []*MapLeaf `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MapLeaves) Reset()         { *m = MapLeaves{} }
func (m *MapLeaves) String() string { return proto.CompactTextString(m) }
func (*MapLeaves) ProtoMessage()    {}
func (*MapLeaves) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{1}
}

func (m *MapLeaves) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapLeaves.Unmarshal(m, b)
}
func (m *MapLeaves) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapLeaves.Marshal(b, m, deterministic)
}
func (m *MapLeaves) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLeaves.Merge(m, src)
}
func (m *MapLeaves) XXX_Size() int {
	return xxx_messageInfo_MapLeaves.Size(m)
}
func (m *MapLeaves) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLeaves.DiscardUnknown(m)
}

var xxx_messageInfo_MapLeaves proto.InternalMessageInfo

func (m *MapLeaves) GetLeaves() []*MapLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type MapLeafInclusion struct {
	Leaf *MapLeaf `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	// inclusion holds the inclusion proof for this leaf in the map root. It
	// holds one entry for each level of the tree; combining each of these in
	// turn with the leaf's hash (according to the tree's hash strategy)
	// reproduces the root hash.  A nil entry for a particular level indicates
	// that the node in question has an empty subtree beneath it (and so its
	// associated hash value is hasher.HashEmpty(index, height) rather than
	// hasher.HashChildren(l_hash, r_hash)).
	Inclusion            [][]byte `protobuf:"bytes,2,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapLeafInclusion) Reset()         { *m = MapLeafInclusion{} }
func (m *MapLeafInclusion) String() string { return proto.CompactTextString(m) }
func (*MapLeafInclusion) ProtoMessage()    {}
func (*MapLeafInclusion) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{2}
}

func (m *MapLeafInclusion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapLeafInclusion.Unmarshal(m, b)
}
func (m *MapLeafInclusion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapLeafInclusion.Marshal(b, m, deterministic)
}
func (m *MapLeafInclusion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLeafInclusion.Merge(m, src)
}
func (m *MapLeafInclusion) XXX_Size() int {
	return xxx_messageInfo_MapLeafInclusion.Size(m)
}
func (m *MapLeafInclusion) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLeafInclusion.DiscardUnknown(m)
}

var xxx_messageInfo_MapLeafInclusion proto.InternalMessageInfo

func (m *MapLeafInclusion) GetLeaf() *MapLeaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *MapLeafInclusion) GetInclusion() [][]byte {
	if m != nil {
		return m.Inclusion
	}
	return nil
}

type GetMapLeavesRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Index                [][]byte `protobuf:"bytes,2,rep,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapLeavesRequest) Reset()         { *m = GetMapLeavesRequest{} }
func (m *GetMapLeavesRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapLeavesRequest) ProtoMessage()    {}
func (*GetMapLeavesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{3}
}

func (m *GetMapLeavesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeavesRequest.Unmarshal(m, b)
}
func (m *GetMapLeavesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeavesRequest.Marshal(b, m, deterministic)
}
func (m *GetMapLeavesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeavesRequest.Merge(m, src)
}
func (m *GetMapLeavesRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapLeavesRequest.Size(m)
}
func (m *GetMapLeavesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeavesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeavesRequest proto.InternalMessageInfo

func (m *GetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeavesRequest) GetIndex() [][]byte {
	if m != nil {
		return m.Index
	}
	return nil
}

type GetMapLeafRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Index                []byte   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapLeafRequest) Reset()         { *m = GetMapLeafRequest{} }
func (m *GetMapLeafRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapLeafRequest) ProtoMessage()    {}
func (*GetMapLeafRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{4}
}

func (m *GetMapLeafRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeafRequest.Unmarshal(m, b)
}
func (m *GetMapLeafRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeafRequest.Marshal(b, m, deterministic)
}
func (m *GetMapLeafRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeafRequest.Merge(m, src)
}
func (m *GetMapLeafRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapLeafRequest.Size(m)
}
func (m *GetMapLeafRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeafRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeafRequest proto.InternalMessageInfo

func (m *GetMapLeafRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeafRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

type GetMapLeafByRevisionRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Index                []byte   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Revision             int64    `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapLeafByRevisionRequest) Reset()         { *m = GetMapLeafByRevisionRequest{} }
func (m *GetMapLeafByRevisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapLeafByRevisionRequest) ProtoMessage()    {}
func (*GetMapLeafByRevisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{5}
}

func (m *GetMapLeafByRevisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeafByRevisionRequest.Unmarshal(m, b)
}
func (m *GetMapLeafByRevisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeafByRevisionRequest.Marshal(b, m, deterministic)
}
func (m *GetMapLeafByRevisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeafByRevisionRequest.Merge(m, src)
}
func (m *GetMapLeafByRevisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapLeafByRevisionRequest.Size(m)
}
func (m *GetMapLeafByRevisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeafByRevisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeafByRevisionRequest proto.InternalMessageInfo

func (m *GetMapLeafByRevisionRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeafByRevisionRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *GetMapLeafByRevisionRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

// This message replaces the current implementation of GetMapLeavesRequest
// with the difference that revision must be >=0.
type GetMapLeavesByRevisionRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	// index(es) to query.  It is an error to request the same index more than once.
	Index [][]byte `protobuf:"bytes,2,rep,name=index,proto3" json:"index,omitempty"`
	// revision >= 0.
	Revision             int64    `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapLeavesByRevisionRequest) Reset()         { *m = GetMapLeavesByRevisionRequest{} }
func (m *GetMapLeavesByRevisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapLeavesByRevisionRequest) ProtoMessage()    {}
func (*GetMapLeavesByRevisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{6}
}

func (m *GetMapLeavesByRevisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeavesByRevisionRequest.Unmarshal(m, b)
}
func (m *GetMapLeavesByRevisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeavesByRevisionRequest.Marshal(b, m, deterministic)
}
func (m *GetMapLeavesByRevisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeavesByRevisionRequest.Merge(m, src)
}
func (m *GetMapLeavesByRevisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapLeavesByRevisionRequest.Size(m)
}
func (m *GetMapLeavesByRevisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeavesByRevisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeavesByRevisionRequest proto.InternalMessageInfo

func (m *GetMapLeavesByRevisionRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetMapLeavesByRevisionRequest) GetIndex() [][]byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *GetMapLeavesByRevisionRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type GetMapLeafResponse struct {
	MapLeafInclusion     *MapLeafInclusion `protobuf:"bytes,1,opt,name=map_leaf_inclusion,json=mapLeafInclusion,proto3" json:"map_leaf_inclusion,omitempty"`
	MapRoot              *SignedMapRoot    `protobuf:"bytes,2,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMapLeafResponse) Reset()         { *m = GetMapLeafResponse{} }
func (m *GetMapLeafResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapLeafResponse) ProtoMessage()    {}
func (*GetMapLeafResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{7}
}

func (m *GetMapLeafResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeafResponse.Unmarshal(m, b)
}
func (m *GetMapLeafResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeafResponse.Marshal(b, m, deterministic)
}
func (m *GetMapLeafResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeafResponse.Merge(m, src)
}
func (m *GetMapLeafResponse) XXX_Size() int {
	return xxx_messageInfo_GetMapLeafResponse.Size(m)
}
func (m *GetMapLeafResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeafResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeafResponse proto.InternalMessageInfo

func (m *GetMapLeafResponse) GetMapLeafInclusion() *MapLeafInclusion {
	if m != nil {
		return m.MapLeafInclusion
	}
	return nil
}

func (m *GetMapLeafResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type GetMapLeavesResponse struct {
	MapLeafInclusion     []*MapLeafInclusion `protobuf:"bytes,2,rep,name=map_leaf_inclusion,json=mapLeafInclusion,proto3" json:"map_leaf_inclusion,omitempty"`
	MapRoot              *SignedMapRoot      `protobuf:"bytes,3,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetMapLeavesResponse) Reset()         { *m = GetMapLeavesResponse{} }
func (m *GetMapLeavesResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapLeavesResponse) ProtoMessage()    {}
func (*GetMapLeavesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{8}
}

func (m *GetMapLeavesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapLeavesResponse.Unmarshal(m, b)
}
func (m *GetMapLeavesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapLeavesResponse.Marshal(b, m, deterministic)
}
func (m *GetMapLeavesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapLeavesResponse.Merge(m, src)
}
func (m *GetMapLeavesResponse) XXX_Size() int {
	return xxx_messageInfo_GetMapLeavesResponse.Size(m)
}
func (m *GetMapLeavesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapLeavesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapLeavesResponse proto.InternalMessageInfo

func (m *GetMapLeavesResponse) GetMapLeafInclusion() []*MapLeafInclusion {
	if m != nil {
		return m.MapLeafInclusion
	}
	return nil
}

func (m *GetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

// GetLastInRangeByRevisionRequest specifies a range in the map at a revision.
// The range is defined as the entire subtree below a particular point in the
// Merkle tree. Another way of saying this is that the range matches all leaves
// that share a common prefix of `prefix_bits` with `prefix`.
type GetLastInRangeByRevisionRequest struct {
	MapId    int64  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Revision int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Prefix   []byte `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix_bits is the number of bits to include, starting from the left, or
	// most significant bit (MSB).
	PrefixBits           int32    `protobuf:"varint,4,opt,name=prefix_bits,json=prefixBits,proto3" json:"prefix_bits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLastInRangeByRevisionRequest) Reset()         { *m = GetLastInRangeByRevisionRequest{} }
func (m *GetLastInRangeByRevisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetLastInRangeByRevisionRequest) ProtoMessage()    {}
func (*GetLastInRangeByRevisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{9}
}

func (m *GetLastInRangeByRevisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLastInRangeByRevisionRequest.Unmarshal(m, b)
}
func (m *GetLastInRangeByRevisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLastInRangeByRevisionRequest.Marshal(b, m, deterministic)
}
func (m *GetLastInRangeByRevisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLastInRangeByRevisionRequest.Merge(m, src)
}
func (m *GetLastInRangeByRevisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetLastInRangeByRevisionRequest.Size(m)
}
func (m *GetLastInRangeByRevisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLastInRangeByRevisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLastInRangeByRevisionRequest proto.InternalMessageInfo

func (m *GetLastInRangeByRevisionRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetLastInRangeByRevisionRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *GetLastInRangeByRevisionRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *GetLastInRangeByRevisionRequest) GetPrefixBits() int32 {
	if m != nil {
		return m.PrefixBits
	}
	return 0
}

type SetMapLeavesRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	// The leaves being set must have unique Index values within the request.
	Leaves   []*MapLeaf `protobuf:"bytes,2,rep,name=leaves,proto3" json:"leaves,omitempty"`
	Metadata []byte     `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The map revision to associate the leaves with. The request will fail if
	// this revision already exists, does not match the current write revision, or
	// is not positive. Note that revision = 0 is reserved for the empty tree.
	Revision             int64    `protobuf:"varint,6,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMapLeavesRequest) Reset()         { *m = SetMapLeavesRequest{} }
func (m *SetMapLeavesRequest) String() string { return proto.CompactTextString(m) }
func (*SetMapLeavesRequest) ProtoMessage()    {}
func (*SetMapLeavesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{10}
}

func (m *SetMapLeavesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMapLeavesRequest.Unmarshal(m, b)
}
func (m *SetMapLeavesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMapLeavesRequest.Marshal(b, m, deterministic)
}
func (m *SetMapLeavesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMapLeavesRequest.Merge(m, src)
}
func (m *SetMapLeavesRequest) XXX_Size() int {
	return xxx_messageInfo_SetMapLeavesRequest.Size(m)
}
func (m *SetMapLeavesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMapLeavesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMapLeavesRequest proto.InternalMessageInfo

func (m *SetMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *SetMapLeavesRequest) GetLeaves() []*MapLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func (m *SetMapLeavesRequest) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SetMapLeavesRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type SetMapLeavesResponse struct {
	MapRoot              *SignedMapRoot `protobuf:"bytes,2,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetMapLeavesResponse) Reset()         { *m = SetMapLeavesResponse{} }
func (m *SetMapLeavesResponse) String() string { return proto.CompactTextString(m) }
func (*SetMapLeavesResponse) ProtoMessage()    {}
func (*SetMapLeavesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{11}
}

func (m *SetMapLeavesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMapLeavesResponse.Unmarshal(m, b)
}
func (m *SetMapLeavesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMapLeavesResponse.Marshal(b, m, deterministic)
}
func (m *SetMapLeavesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMapLeavesResponse.Merge(m, src)
}
func (m *SetMapLeavesResponse) XXX_Size() int {
	return xxx_messageInfo_SetMapLeavesResponse.Size(m)
}
func (m *SetMapLeavesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMapLeavesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetMapLeavesResponse proto.InternalMessageInfo

func (m *SetMapLeavesResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type WriteMapLeavesRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	// The leaves being set must have unique Index values within the request.
	Leaves []*MapLeaf `protobuf:"bytes,2,rep,name=leaves,proto3" json:"leaves,omitempty"`
	// Metadata that the Map should associate with the new Map root after
	// incorporating the leaf changes.  The metadata will be reflected in the
	// Map Root published for this revision.
	// Map personalities should use metadata to persist any state needed later
	// to continue mapping from an external data source.
	Metadata []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The map revision to associate the leaves with. The request will fail if
	// this revision already exists, does not match the current write revision, or
	// is not positive. Note that revision = 0 is reserved for the empty tree.
	ExpectRevision       int64    `protobuf:"varint,4,opt,name=expect_revision,json=expectRevision,proto3" json:"expect_revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteMapLeavesRequest) Reset()         { *m = WriteMapLeavesRequest{} }
func (m *WriteMapLeavesRequest) String() string { return proto.CompactTextString(m) }
func (*WriteMapLeavesRequest) ProtoMessage()    {}
func (*WriteMapLeavesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{12}
}

func (m *WriteMapLeavesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteMapLeavesRequest.Unmarshal(m, b)
}
func (m *WriteMapLeavesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteMapLeavesRequest.Marshal(b, m, deterministic)
}
func (m *WriteMapLeavesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteMapLeavesRequest.Merge(m, src)
}
func (m *WriteMapLeavesRequest) XXX_Size() int {
	return xxx_messageInfo_WriteMapLeavesRequest.Size(m)
}
func (m *WriteMapLeavesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteMapLeavesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteMapLeavesRequest proto.InternalMessageInfo

func (m *WriteMapLeavesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *WriteMapLeavesRequest) GetLeaves() []*MapLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func (m *WriteMapLeavesRequest) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WriteMapLeavesRequest) GetExpectRevision() int64 {
	if m != nil {
		return m.ExpectRevision
	}
	return 0
}

type WriteMapLeavesResponse struct {
	// The map revision that the leaves will be published at.
	// This may be accompanied by a proof that the write request has been included
	// in an input log in the future.
	Revision             int64    `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteMapLeavesResponse) Reset()         { *m = WriteMapLeavesResponse{} }
func (m *WriteMapLeavesResponse) String() string { return proto.CompactTextString(m) }
func (*WriteMapLeavesResponse) ProtoMessage()    {}
func (*WriteMapLeavesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{13}
}

func (m *WriteMapLeavesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteMapLeavesResponse.Unmarshal(m, b)
}
func (m *WriteMapLeavesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteMapLeavesResponse.Marshal(b, m, deterministic)
}
func (m *WriteMapLeavesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteMapLeavesResponse.Merge(m, src)
}
func (m *WriteMapLeavesResponse) XXX_Size() int {
	return xxx_messageInfo_WriteMapLeavesResponse.Size(m)
}
func (m *WriteMapLeavesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteMapLeavesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteMapLeavesResponse proto.InternalMessageInfo

func (m *WriteMapLeavesResponse) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type GetSignedMapRootRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSignedMapRootRequest) Reset()         { *m = GetSignedMapRootRequest{} }
func (m *GetSignedMapRootRequest) String() string { return proto.CompactTextString(m) }
func (*GetSignedMapRootRequest) ProtoMessage()    {}
func (*GetSignedMapRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{14}
}

func (m *GetSignedMapRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSignedMapRootRequest.Unmarshal(m, b)
}
func (m *GetSignedMapRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSignedMapRootRequest.Marshal(b, m, deterministic)
}
func (m *GetSignedMapRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignedMapRootRequest.Merge(m, src)
}
func (m *GetSignedMapRootRequest) XXX_Size() int {
	return xxx_messageInfo_GetSignedMapRootRequest.Size(m)
}
func (m *GetSignedMapRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignedMapRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignedMapRootRequest proto.InternalMessageInfo

func (m *GetSignedMapRootRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

type GetSignedMapRootByRevisionRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Revision             int64    `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSignedMapRootByRevisionRequest) Reset()         { *m = GetSignedMapRootByRevisionRequest{} }
func (m *GetSignedMapRootByRevisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSignedMapRootByRevisionRequest) ProtoMessage()    {}
func (*GetSignedMapRootByRevisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{15}
}

func (m *GetSignedMapRootByRevisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSignedMapRootByRevisionRequest.Unmarshal(m, b)
}
func (m *GetSignedMapRootByRevisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSignedMapRootByRevisionRequest.Marshal(b, m, deterministic)
}
func (m *GetSignedMapRootByRevisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignedMapRootByRevisionRequest.Merge(m, src)
}
func (m *GetSignedMapRootByRevisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetSignedMapRootByRevisionRequest.Size(m)
}
func (m *GetSignedMapRootByRevisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignedMapRootByRevisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignedMapRootByRevisionRequest proto.InternalMessageInfo

func (m *GetSignedMapRootByRevisionRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GetSignedMapRootByRevisionRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type GetSignedMapRootResponse struct {
	MapRoot              *SignedMapRoot `protobuf:"bytes,2,opt,name=map_root,json=mapRoot,proto3" json:"map_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetSignedMapRootResponse) Reset()         { *m = GetSignedMapRootResponse{} }
func (m *GetSignedMapRootResponse) String() string { return proto.CompactTextString(m) }
func (*GetSignedMapRootResponse) ProtoMessage()    {}
func (*GetSignedMapRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{16}
}

func (m *GetSignedMapRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSignedMapRootResponse.Unmarshal(m, b)
}
func (m *GetSignedMapRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSignedMapRootResponse.Marshal(b, m, deterministic)
}
func (m *GetSignedMapRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignedMapRootResponse.Merge(m, src)
}
func (m *GetSignedMapRootResponse) XXX_Size() int {
	return xxx_messageInfo_GetSignedMapRootResponse.Size(m)
}
func (m *GetSignedMapRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignedMapRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignedMapRootResponse proto.InternalMessageInfo

func (m *GetSignedMapRootResponse) GetMapRoot() *SignedMapRoot {
	if m != nil {
		return m.MapRoot
	}
	return nil
}

type InitMapRequest struct {
	MapId                int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitMapRequest) Reset()         { *m = InitMapRequest{} }
func (m *InitMapRequest) String() string { return proto.CompactTextString(m) }
func (*InitMapRequest) ProtoMessage()    {}
func (*InitMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{17}
}

func (m *InitMapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitMapRequest.Unmarshal(m, b)
}
func (m *InitMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitMapRequest.Marshal(b, m, deterministic)
}
func (m *InitMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMapRequest.Merge(m, src)
}
func (m *InitMapRequest) XXX_Size() int {
	return xxx_messageInfo_InitMapRequest.Size(m)
}
func (m *InitMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitMapRequest proto.InternalMessageInfo

func (m *InitMapRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

type InitMapResponse struct {
	Created              *SignedMapRoot `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InitMapResponse) Reset()         { *m = InitMapResponse{} }
func (m *InitMapResponse) String() string { return proto.CompactTextString(m) }
func (*InitMapResponse) ProtoMessage()    {}
func (*InitMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28d34dfba22a7ce2, []int{18}
}

func (m *InitMapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitMapResponse.Unmarshal(m, b)
}
func (m *InitMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitMapResponse.Marshal(b, m, deterministic)
}
func (m *InitMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMapResponse.Merge(m, src)
}
func (m *InitMapResponse) XXX_Size() int {
	return xxx_messageInfo_InitMapResponse.Size(m)
}
func (m *InitMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitMapResponse proto.InternalMessageInfo

func (m *InitMapResponse) GetCreated() *SignedMapRoot {
	if m != nil {
		return m.Created
	}
	return nil
}

func init() {
	proto.RegisterType((*MapLeaf)(nil), "trillian.MapLeaf")
	proto.RegisterType((*MapLeaves)(nil), "trillian.MapLeaves")
	proto.RegisterType((*MapLeafInclusion)(nil), "trillian.MapLeafInclusion")
	proto.RegisterType((*GetMapLeavesRequest)(nil), "trillian.GetMapLeavesRequest")
	proto.RegisterType((*GetMapLeafRequest)(nil), "trillian.GetMapLeafRequest")
	proto.RegisterType((*GetMapLeafByRevisionRequest)(nil), "trillian.GetMapLeafByRevisionRequest")
	proto.RegisterType((*GetMapLeavesByRevisionRequest)(nil), "trillian.GetMapLeavesByRevisionRequest")
	proto.RegisterType((*GetMapLeafResponse)(nil), "trillian.GetMapLeafResponse")
	proto.RegisterType((*GetMapLeavesResponse)(nil), "trillian.GetMapLeavesResponse")
	proto.RegisterType((*GetLastInRangeByRevisionRequest)(nil), "trillian.GetLastInRangeByRevisionRequest")
	proto.RegisterType((*SetMapLeavesRequest)(nil), "trillian.SetMapLeavesRequest")
	proto.RegisterType((*SetMapLeavesResponse)(nil), "trillian.SetMapLeavesResponse")
	proto.RegisterType((*WriteMapLeavesRequest)(nil), "trillian.WriteMapLeavesRequest")
	proto.RegisterType((*WriteMapLeavesResponse)(nil), "trillian.WriteMapLeavesResponse")
	proto.RegisterType((*GetSignedMapRootRequest)(nil), "trillian.GetSignedMapRootRequest")
	proto.RegisterType((*GetSignedMapRootByRevisionRequest)(nil), "trillian.GetSignedMapRootByRevisionRequest")
	proto.RegisterType((*GetSignedMapRootResponse)(nil), "trillian.GetSignedMapRootResponse")
	proto.RegisterType((*InitMapRequest)(nil), "trillian.InitMapRequest")
	proto.RegisterType((*InitMapResponse)(nil), "trillian.InitMapResponse")
}

func init() { proto.RegisterFile("trillian_map_api.proto", fileDescriptor_28d34dfba22a7ce2) }

var fileDescriptor_28d34dfba22a7ce2 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0xc7, 0xf9, 0xfb, 0x82, 0xba, 0xd9, 0x69, 0xb7, 0x9b, 0x75, 0x5b, 0xda, 0xf5, 0xaa,
	0xea, 0x56, 0x2b, 0xc5, 0x34, 0x20, 0x0e, 0x15, 0x42, 0x50, 0x55, 0xf4, 0x8f, 0xda, 0x52, 0x39,
	0xb0, 0x2b, 0xed, 0xc5, 0x4c, 0x93, 0x49, 0x32, 0x92, 0xe3, 0x31, 0xf6, 0xb4, 0x2a, 0xac, 0xf6,
	0xc2, 0x01, 0x71, 0xe1, 0x02, 0xdc, 0x90, 0xfa, 0x4d, 0x38, 0xf1, 0x11, 0xf8, 0x0a, 0x7c, 0x10,
	0x34, 0x33, 0x8e, 0x1d, 0x27, 0x4e, 0x1a, 0xb5, 0xec, 0xcd, 0xf3, 0xfe, 0xff, 0xe6, 0xf7, 0xde,
	0x9b, 0x04, 0x96, 0x79, 0x40, 0x5d, 0x97, 0x62, 0xcf, 0x19, 0x60, 0xdf, 0xc1, 0x3e, 0x6d, 0xf8,
	0x01, 0xe3, 0x0c, 0x95, 0x87, 0x72, 0x63, 0x61, 0xf8, 0xa5, 0x34, 0xc6, 0x6a, 0x8f, 0xb1, 0x9e,
	0x4b, 0x2c, 0xec, 0x53, 0x0b, 0x7b, 0x1e, 0xe3, 0x98, 0x53, 0xe6, 0x85, 0x4a, 0x6b, 0xfe, 0x08,
	0xa5, 0x53, 0xec, 0x9f, 0x10, 0xdc, 0x45, 0x4b, 0x50, 0xa0, 0x5e, 0x87, 0x5c, 0xd7, 0xb5, 0x0d,
	0xed, 0xc5, 0x07, 0xb6, 0x3a, 0xa0, 0x15, 0xa8, 0xb8, 0x04, 0x77, 0x9d, 0x3e, 0x0e, 0xfb, 0xf5,
	0x9c, 0xd4, 0x94, 0x85, 0xe0, 0x10, 0x87, 0x7d, 0xb4, 0x06, 0x20, 0x95, 0x57, 0xd8, 0xbd, 0x24,
	0x75, 0x5d, 0x6a, 0xa5, 0xf9, 0x2b, 0x21, 0x10, 0x6a, 0x72, 0xcd, 0x03, 0xec, 0x74, 0x30, 0xc7,
	0xf5, 0xbc, 0x52, 0x4b, 0xc9, 0x3e, 0xe6, 0xd8, 0xfc, 0x14, 0x2a, 0x2a, 0xf7, 0x15, 0x09, 0xd1,
	0x36, 0x14, 0x5d, 0xf9, 0x55, 0xd7, 0x36, 0xf4, 0x17, 0xd5, 0xe6, 0xa3, 0x46, 0x8c, 0x23, 0x2a,
	0xd0, 0x8e, 0x0c, 0xcc, 0xd7, 0x50, 0x8b, 0x44, 0x47, 0x5e, 0xdb, 0xbd, 0x0c, 0x29, 0xf3, 0xd0,
	0x26, 0xe4, 0x45, 0x5e, 0x59, 0x7b, 0xa6, 0xb3, 0x54, 0xa3, 0x55, 0xa8, 0xd0, 0xa1, 0x4f, 0x3d,
	0xb7, 0xa1, 0x8b, 0x82, 0x62, 0x81, 0x79, 0x08, 0x8b, 0x07, 0x84, 0xc7, 0x35, 0xd9, 0xe4, 0xfb,
	0x4b, 0x12, 0x72, 0xf4, 0x18, 0x8a, 0xe2, 0xb2, 0x69, 0x47, 0x46, 0xd7, 0xed, 0xc2, 0x00, 0xfb,
	0x47, 0x9d, 0xe4, 0xbe, 0x54, 0x1c, 0x75, 0x38, 0xce, 0x97, 0xf5, 0x5a, 0xde, 0xfc, 0x02, 0x1e,
	0xc5, 0x91, 0xba, 0xf3, 0xc7, 0x49, 0xee, 0xdd, 0xec, 0xc2, 0x4a, 0x12, 0x61, 0xef, 0x07, 0x9b,
	0x5c, 0x51, 0x51, 0xe3, 0x5d, 0x62, 0x21, 0x03, 0xca, 0x41, 0xe4, 0x2f, 0x49, 0xd2, 0xed, 0xf8,
	0x6c, 0xf6, 0x61, 0x6d, 0x14, 0xf3, 0x5d, 0x32, 0xe9, 0xf3, 0x65, 0xfa, 0x4d, 0x03, 0x34, 0x7a,
	0x29, 0xa1, 0xcf, 0xbc, 0x90, 0xa0, 0x43, 0x40, 0x22, 0xbe, 0xec, 0xa3, 0x84, 0x1b, 0xc5, 0xa3,
	0x31, 0xc1, 0x63, 0xcc, 0xb8, 0x5d, 0x1b, 0x8c, 0xf7, 0x40, 0x13, 0xca, 0x22, 0x52, 0xc0, 0x18,
	0x97, 0xf8, 0xab, 0xcd, 0x27, 0x89, 0x7f, 0x8b, 0xf6, 0x3c, 0xd2, 0x39, 0xc5, 0xbe, 0xcd, 0x18,
	0xb7, 0x4b, 0x03, 0xf5, 0x61, 0xfe, 0xa1, 0xc1, 0x52, 0x9a, 0xf3, 0x99, 0x65, 0xe5, 0x64, 0x6f,
	0xde, 0xbd, 0x2c, 0x7d, 0xce, 0xb2, 0x7e, 0xd5, 0x60, 0xfd, 0x80, 0xf0, 0x13, 0x1c, 0xf2, 0x23,
	0xcf, 0xc6, 0x5e, 0x8f, 0xcc, 0x4d, 0xcc, 0x28, 0x05, 0xb9, 0x34, 0x05, 0x68, 0x19, 0x8a, 0x7e,
	0x40, 0xba, 0xf4, 0x3a, 0x9a, 0xd5, 0xe8, 0x84, 0xd6, 0xa1, 0xaa, 0xbe, 0x9c, 0x0b, 0xca, 0x43,
	0x39, 0xa9, 0x05, 0x1b, 0x94, 0x68, 0x8f, 0xf2, 0xd0, 0xfc, 0x53, 0x83, 0xc5, 0xd6, 0xfc, 0xa3,
	0x91, 0x0c, 0x73, 0xee, 0x96, 0x61, 0x16, 0xe5, 0x0e, 0x08, 0xc7, 0x72, 0x43, 0x14, 0xd4, 0x7a,
	0x19, 0x9e, 0x53, 0x50, 0x8a, 0x69, 0x28, 0x6a, 0xce, 0x8e, 0xf3, 0xe5, 0x7c, 0xad, 0x60, 0x1e,
	0xc3, 0x52, 0x2b, 0x8b, 0xc3, 0xbb, 0x34, 0xc4, 0x8d, 0x06, 0x8f, 0x5f, 0x07, 0x94, 0x93, 0xf7,
	0x8c, 0x55, 0x1f, 0xc3, 0xba, 0x05, 0x0f, 0xc9, 0xb5, 0x4f, 0xda, 0xdc, 0x89, 0x21, 0xe7, 0x65,
	0x9a, 0x05, 0x25, 0x1e, 0xb2, 0x6f, 0x7e, 0x02, 0xcb, 0xe3, 0xf5, 0x45, 0x70, 0x47, 0xaf, 0x4b,
	0x1b, 0x1b, 0xbe, 0x8f, 0xe0, 0xc9, 0x01, 0xe1, 0x69, 0xcc, 0x33, 0x71, 0x99, 0xaf, 0xe0, 0xd9,
	0xb8, 0xc7, 0xff, 0xd1, 0x83, 0xe6, 0x19, 0xd4, 0x27, 0x2b, 0xb9, 0x07, 0x61, 0x5b, 0xb0, 0x70,
	0xe4, 0x51, 0xc1, 0xfe, 0x2d, 0x80, 0xf6, 0xe1, 0x61, 0x6c, 0x18, 0xe5, 0xdb, 0x81, 0x52, 0x3b,
	0x20, 0x98, 0x93, 0x4e, 0xb4, 0x70, 0xa6, 0xa7, 0x8b, 0xec, 0x9a, 0x7f, 0x97, 0xa1, 0xfa, 0x4d,
	0x64, 0x73, 0x8a, 0x7d, 0xf4, 0x15, 0x94, 0xc4, 0xa0, 0x8a, 0xc7, 0x65, 0x25, 0x71, 0x9e, 0x58,
	0xfe, 0xc6, 0x6a, 0xb6, 0x52, 0x15, 0x62, 0x3e, 0x40, 0x6f, 0xe4, 0x8b, 0x91, 0x5e, 0xf6, 0x68,
	0x33, 0xcb, 0x69, 0x82, 0x85, 0x5b, 0x63, 0x9f, 0x40, 0x45, 0xc5, 0x16, 0x4d, 0xb8, 0x96, 0x61,
	0x9c, 0x74, 0xb9, 0xf1, 0xe1, 0x34, 0x75, 0x1c, 0xed, 0x3b, 0xf9, 0x4a, 0x8e, 0x3f, 0x17, 0x68,
	0x2b, 0xdb, 0x71, 0xb2, 0xda, 0xdb, 0x33, 0x38, 0x60, 0x64, 0x64, 0x38, 0x63, 0xe7, 0x01, 0x63,
	0xdd, 0xf9, 0x13, 0x2d, 0x8e, 0x4f, 0xa2, 0xf8, 0xf1, 0xa0, 0xff, 0x92, 0xd3, 0xd0, 0x8d, 0x26,
	0x9b, 0x30, 0x73, 0xbd, 0xa2, 0xed, 0x54, 0xfc, 0x59, 0x2b, 0xd8, 0x98, 0x9c, 0x75, 0x73, 0xff,
	0xa7, 0x7f, 0xfe, 0xfd, 0x3d, 0xf7, 0x39, 0xfa, 0xcc, 0xba, 0xda, 0xb9, 0x20, 0x1c, 0xef, 0x58,
	0x03, 0xec, 0x87, 0xd6, 0x5b, 0xd5, 0x91, 0xef, 0x2c, 0xd1, 0xdb, 0xa1, 0xf5, 0x76, 0x38, 0x0e,
	0xef, 0x2c, 0xb5, 0x1b, 0x76, 0x5d, 0x1c, 0x72, 0x87, 0x7a, 0x4e, 0x20, 0x32, 0xa1, 0xaf, 0xa1,
	0xd2, 0xca, 0x62, 0xac, 0x35, 0x9b, 0xb1, 0xac, 0x2d, 0xa8, 0x10, 0xff, 0xac, 0x41, 0x6d, 0x7c,
	0xec, 0xd0, 0xb3, 0x14, 0xd2, 0xac, 0xe5, 0x60, 0x98, 0xb3, 0x4c, 0xa2, 0x04, 0x2f, 0x25, 0xe4,
	0x4d, 0xf4, 0x7c, 0x16, 0xe4, 0x5d, 0x17, 0x73, 0x31, 0x9c, 0x37, 0x9a, 0x24, 0x77, 0xca, 0x5e,
	0x41, 0x2f, 0xa7, 0xe7, 0x9b, 0xbc, 0xfe, 0x79, 0x8a, 0xb3, 0x64, 0x71, 0xdb, 0x68, 0x6b, 0x4e,
	0x3e, 0x50, 0x1b, 0x4a, 0xd1, 0x9a, 0x40, 0xf5, 0x24, 0x7e, 0x7a, 0xc5, 0x18, 0x4f, 0x33, 0x34,
	0x51, 0xc2, 0xe7, 0x32, 0xe1, 0x9a, 0xb9, 0x92, 0x9d, 0x70, 0x97, 0x7a, 0x94, 0x37, 0xff, 0xd2,
	0xa0, 0x36, 0xb2, 0x45, 0xe4, 0x42, 0x47, 0xdf, 0xde, 0x73, 0xb0, 0x32, 0xfb, 0xfd, 0x01, 0xb2,
	0xa1, 0x2a, 0xe3, 0x47, 0xdd, 0xb4, 0x9e, 0x58, 0x65, 0xbe, 0x73, 0xc6, 0xc6, 0x74, 0x83, 0xe1,
	0x84, 0xee, 0x9d, 0xc1, 0xd3, 0x36, 0x1b, 0x34, 0xd4, 0x5f, 0x8b, 0x46, 0xfa, 0x1f, 0xc7, 0xde,
	0xe2, 0x08, 0xb2, 0x2f, 0x7d, 0x7a, 0x2e, 0x84, 0xe7, 0xda, 0x1b, 0xa3, 0x47, 0x79, 0xff, 0xf2,
	0xa2, 0xd1, 0x66, 0x03, 0x2b, 0xfa, 0x4f, 0x32, 0x74, 0xbc, 0x28, 0x4a, 0xcf, 0x8f, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x84, 0x5c, 0xb9, 0x8c, 0xdf, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrillianMapClient is the client API for TrillianMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrillianMapClient interface {
	// GetLeaves returns an inclusion proof for each index requested.
	// For indexes that do not exist, the inclusion proof will use nil for the
	// empty leaf value.
	GetLeaf(ctx context.Context, in *GetMapLeafRequest, opts ...grpc.CallOption) (*GetMapLeafResponse, error)
	GetLeafByRevision(ctx context.Context, in *GetMapLeafByRevisionRequest, opts ...grpc.CallOption) (*GetMapLeafResponse, error)
	GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error)
	GetLeavesByRevision(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error)
	// Deprecated: this should only be used by writers, which should migrate
	// to TrillianMapWrite#GetLeavesByRevision
	GetLeavesByRevisionNoProof(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*MapLeaves, error)
	// GetLastInRangeByRevision returns the last leaf in a requested range.
	GetLastInRangeByRevision(ctx context.Context, in *GetLastInRangeByRevisionRequest, opts ...grpc.CallOption) (*MapLeaf, error)
	// Deprecated: this should only be used by writers, which should migrate
	// to TrillianMapWrite#WriteLeaves
	SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error)
	GetSignedMapRootByRevision(ctx context.Context, in *GetSignedMapRootByRevisionRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error)
	InitMap(ctx context.Context, in *InitMapRequest, opts ...grpc.CallOption) (*InitMapResponse, error)
}

type trillianMapClient struct {
	cc *grpc.ClientConn
}

func NewTrillianMapClient(cc *grpc.ClientConn) TrillianMapClient {
	return &trillianMapClient{cc}
}

func (c *trillianMapClient) GetLeaf(ctx context.Context, in *GetMapLeafRequest, opts ...grpc.CallOption) (*GetMapLeafResponse, error) {
	out := new(GetMapLeafResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLeaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetLeafByRevision(ctx context.Context, in *GetMapLeafByRevisionRequest, opts ...grpc.CallOption) (*GetMapLeafResponse, error) {
	out := new(GetMapLeafResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLeafByRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetLeaves(ctx context.Context, in *GetMapLeavesRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error) {
	out := new(GetMapLeavesResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLeaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetLeavesByRevision(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*GetMapLeavesResponse, error) {
	out := new(GetMapLeavesResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLeavesByRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *trillianMapClient) GetLeavesByRevisionNoProof(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*MapLeaves, error) {
	out := new(MapLeaves)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLeavesByRevisionNoProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetLastInRangeByRevision(ctx context.Context, in *GetLastInRangeByRevisionRequest, opts ...grpc.CallOption) (*MapLeaf, error) {
	out := new(MapLeaf)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetLastInRangeByRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *trillianMapClient) SetLeaves(ctx context.Context, in *SetMapLeavesRequest, opts ...grpc.CallOption) (*SetMapLeavesResponse, error) {
	out := new(SetMapLeavesResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/SetLeaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetSignedMapRoot(ctx context.Context, in *GetSignedMapRootRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error) {
	out := new(GetSignedMapRootResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetSignedMapRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) GetSignedMapRootByRevision(ctx context.Context, in *GetSignedMapRootByRevisionRequest, opts ...grpc.CallOption) (*GetSignedMapRootResponse, error) {
	out := new(GetSignedMapRootResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/GetSignedMapRootByRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapClient) InitMap(ctx context.Context, in *InitMapRequest, opts ...grpc.CallOption) (*InitMapResponse, error) {
	out := new(InitMapResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMap/InitMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrillianMapServer is the server API for TrillianMap service.
type TrillianMapServer interface {
	// GetLeaves returns an inclusion proof for each index requested.
	// For indexes that do not exist, the inclusion proof will use nil for the
	// empty leaf value.
	GetLeaf(context.Context, *GetMapLeafRequest) (*GetMapLeafResponse, error)
	GetLeafByRevision(context.Context, *GetMapLeafByRevisionRequest) (*GetMapLeafResponse, error)
	GetLeaves(context.Context, *GetMapLeavesRequest) (*GetMapLeavesResponse, error)
	GetLeavesByRevision(context.Context, *GetMapLeavesByRevisionRequest) (*GetMapLeavesResponse, error)
	// Deprecated: this should only be used by writers, which should migrate
	// to TrillianMapWrite#GetLeavesByRevision
	GetLeavesByRevisionNoProof(context.Context, *GetMapLeavesByRevisionRequest) (*MapLeaves, error)
	// GetLastInRangeByRevision returns the last leaf in a requested range.
	GetLastInRangeByRevision(context.Context, *GetLastInRangeByRevisionRequest) (*MapLeaf, error)
	// Deprecated: this should only be used by writers, which should migrate
	// to TrillianMapWrite#WriteLeaves
	SetLeaves(context.Context, *SetMapLeavesRequest) (*SetMapLeavesResponse, error)
	GetSignedMapRoot(context.Context, *GetSignedMapRootRequest) (*GetSignedMapRootResponse, error)
	GetSignedMapRootByRevision(context.Context, *GetSignedMapRootByRevisionRequest) (*GetSignedMapRootResponse, error)
	InitMap(context.Context, *InitMapRequest) (*InitMapResponse, error)
}

// UnimplementedTrillianMapServer can be embedded to have forward compatible implementations.
type UnimplementedTrillianMapServer struct {
}

func (*UnimplementedTrillianMapServer) GetLeaf(ctx context.Context, req *GetMapLeafRequest) (*GetMapLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaf not implemented")
}
func (*UnimplementedTrillianMapServer) GetLeafByRevision(ctx context.Context, req *GetMapLeafByRevisionRequest) (*GetMapLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeafByRevision not implemented")
}
func (*UnimplementedTrillianMapServer) GetLeaves(ctx context.Context, req *GetMapLeavesRequest) (*GetMapLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaves not implemented")
}
func (*UnimplementedTrillianMapServer) GetLeavesByRevision(ctx context.Context, req *GetMapLeavesByRevisionRequest) (*GetMapLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeavesByRevision not implemented")
}
func (*UnimplementedTrillianMapServer) GetLeavesByRevisionNoProof(ctx context.Context, req *GetMapLeavesByRevisionRequest) (*MapLeaves, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeavesByRevisionNoProof not implemented")
}
func (*UnimplementedTrillianMapServer) GetLastInRangeByRevision(ctx context.Context, req *GetLastInRangeByRevisionRequest) (*MapLeaf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastInRangeByRevision not implemented")
}
func (*UnimplementedTrillianMapServer) SetLeaves(ctx context.Context, req *SetMapLeavesRequest) (*SetMapLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeaves not implemented")
}
func (*UnimplementedTrillianMapServer) GetSignedMapRoot(ctx context.Context, req *GetSignedMapRootRequest) (*GetSignedMapRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedMapRoot not implemented")
}
func (*UnimplementedTrillianMapServer) GetSignedMapRootByRevision(ctx context.Context, req *GetSignedMapRootByRevisionRequest) (*GetSignedMapRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedMapRootByRevision not implemented")
}
func (*UnimplementedTrillianMapServer) InitMap(ctx context.Context, req *InitMapRequest) (*InitMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMap not implemented")
}

func RegisterTrillianMapServer(s *grpc.Server, srv TrillianMapServer) {
	s.RegisterService(&_TrillianMap_serviceDesc, srv)
}

func _TrillianMap_GetLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeaf(ctx, req.(*GetMapLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetLeafByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeafByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeafByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeafByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeafByRevision(ctx, req.(*GetMapLeafByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeaves(ctx, req.(*GetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetLeavesByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeavesByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeavesByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeavesByRevision(ctx, req.(*GetMapLeavesByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetLeavesByRevisionNoProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLeavesByRevisionNoProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLeavesByRevisionNoProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLeavesByRevisionNoProof(ctx, req.(*GetMapLeavesByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetLastInRangeByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastInRangeByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetLastInRangeByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetLastInRangeByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetLastInRangeByRevision(ctx, req.(*GetLastInRangeByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_SetLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).SetLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/SetLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).SetLeaves(ctx, req.(*SetMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetSignedMapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedMapRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetSignedMapRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetSignedMapRoot(ctx, req.(*GetSignedMapRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_GetSignedMapRootByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedMapRootByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).GetSignedMapRootByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/GetSignedMapRootByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).GetSignedMapRootByRevision(ctx, req.(*GetSignedMapRootByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMap_InitMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapServer).InitMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMap/InitMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapServer).InitMap(ctx, req.(*InitMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianMap",
	HandlerType: (*TrillianMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaf",
			Handler:    _TrillianMap_GetLeaf_Handler,
		},
		{
			MethodName: "GetLeafByRevision",
			Handler:    _TrillianMap_GetLeafByRevision_Handler,
		},
		{
			MethodName: "GetLeaves",
			Handler:    _TrillianMap_GetLeaves_Handler,
		},
		{
			MethodName: "GetLeavesByRevision",
			Handler:    _TrillianMap_GetLeavesByRevision_Handler,
		},
		{
			MethodName: "GetLeavesByRevisionNoProof",
			Handler:    _TrillianMap_GetLeavesByRevisionNoProof_Handler,
		},
		{
			MethodName: "GetLastInRangeByRevision",
			Handler:    _TrillianMap_GetLastInRangeByRevision_Handler,
		},
		{
			MethodName: "SetLeaves",
			Handler:    _TrillianMap_SetLeaves_Handler,
		},
		{
			MethodName: "GetSignedMapRoot",
			Handler:    _TrillianMap_GetSignedMapRoot_Handler,
		},
		{
			MethodName: "GetSignedMapRootByRevision",
			Handler:    _TrillianMap_GetSignedMapRootByRevision_Handler,
		},
		{
			MethodName: "InitMap",
			Handler:    _TrillianMap_InitMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_map_api.proto",
}

// TrillianMapWriteClient is the client API for TrillianMapWrite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrillianMapWriteClient interface {
	// GetLeavesByRevision returns the requested map leaves without inclusion proofs.
	// This API is designed for internal use where verification is not needed.
	GetLeavesByRevision(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*MapLeaves, error)
	// WriteLeaves sets the values for the provided leaves, and returns the new map
	// revision if successful.
	WriteLeaves(ctx context.Context, in *WriteMapLeavesRequest, opts ...grpc.CallOption) (*WriteMapLeavesResponse, error)
}

type trillianMapWriteClient struct {
	cc *grpc.ClientConn
}

func NewTrillianMapWriteClient(cc *grpc.ClientConn) TrillianMapWriteClient {
	return &trillianMapWriteClient{cc}
}

func (c *trillianMapWriteClient) GetLeavesByRevision(ctx context.Context, in *GetMapLeavesByRevisionRequest, opts ...grpc.CallOption) (*MapLeaves, error) {
	out := new(MapLeaves)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMapWrite/GetLeavesByRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianMapWriteClient) WriteLeaves(ctx context.Context, in *WriteMapLeavesRequest, opts ...grpc.CallOption) (*WriteMapLeavesResponse, error) {
	out := new(WriteMapLeavesResponse)
	err := c.cc.Invoke(ctx, "/trillian.TrillianMapWrite/WriteLeaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrillianMapWriteServer is the server API for TrillianMapWrite service.
type TrillianMapWriteServer interface {
	// GetLeavesByRevision returns the requested map leaves without inclusion proofs.
	// This API is designed for internal use where verification is not needed.
	GetLeavesByRevision(context.Context, *GetMapLeavesByRevisionRequest) (*MapLeaves, error)
	// WriteLeaves sets the values for the provided leaves, and returns the new map
	// revision if successful.
	WriteLeaves(context.Context, *WriteMapLeavesRequest) (*WriteMapLeavesResponse, error)
}

// UnimplementedTrillianMapWriteServer can be embedded to have forward compatible implementations.
type UnimplementedTrillianMapWriteServer struct {
}

func (*UnimplementedTrillianMapWriteServer) GetLeavesByRevision(ctx context.Context, req *GetMapLeavesByRevisionRequest) (*MapLeaves, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeavesByRevision not implemented")
}
func (*UnimplementedTrillianMapWriteServer) WriteLeaves(ctx context.Context, req *WriteMapLeavesRequest) (*WriteMapLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLeaves not implemented")
}

func RegisterTrillianMapWriteServer(s *grpc.Server, srv TrillianMapWriteServer) {
	s.RegisterService(&_TrillianMapWrite_serviceDesc, srv)
}

func _TrillianMapWrite_GetLeavesByRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapLeavesByRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapWriteServer).GetLeavesByRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMapWrite/GetLeavesByRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapWriteServer).GetLeavesByRevision(ctx, req.(*GetMapLeavesByRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianMapWrite_WriteLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMapLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianMapWriteServer).WriteLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianMapWrite/WriteLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianMapWriteServer).WriteLeaves(ctx, req.(*WriteMapLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianMapWrite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianMapWrite",
	HandlerType: (*TrillianMapWriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeavesByRevision",
			Handler:    _TrillianMapWrite_GetLeavesByRevision_Handler,
		},
		{
			MethodName: "WriteLeaves",
			Handler:    _TrillianMapWrite_WriteLeaves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_map_api.proto",
}
